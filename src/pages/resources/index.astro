---
import { getCollection } from "astro:content";

import BaseLayout from "../../layouts/BaseLayout.astro";
import Accordion from "src/components/Accordion.astro";
import MediaDialog from "src/components/dialogs/MediaDialog.astro";
import LinkListItem from "src/components/LinkListItem.astro";

import IconCheckmark from "../../components/icons/IconCheckmark_8.astro";
import IconFilterClear from "src/components/icons/IconFilterClear_20.astro";
import IconWarning from "src/components/icons/IconWarning_16.astro";
import IconSearch from "src/components/icons/IconSearch_20.astro";
import IconSortAlpha from "src/components/icons/IconSortAlpha_20.astro";
import IconSortTime from "src/components/icons/IconSortTime_20.astro";
import IconCompact from "src/components/icons/IconCompact_20.astro";
import IconDetailed from "src/components/icons/IconDetailed_20.astro";
import IconXmarkSmall from "src/components/icons/IconXmark_12.astro";
import { findObjectByKey } from "src/utilities/helpers";

let allResources = await getCollection("resources");

allResources.sort((a, b) => {
	let toDate = (value?: Date) => (value ? new Date(value) : new Date(0));
	return (
		toDate(b.data.dateAdded).getTime() - toDate(a.data.dateAdded).getTime()
	);
});

let allIndicators = await getCollection("indicators");

allIndicators.sort((a, b) => {
	return (a.data.tag || "").localeCompare(b.data.tag || "");
});

let allComponents = await getCollection("components");

allComponents.map((component) => {
	let indicator = findObjectByKey(
		allIndicators,
		"id",
		component.data.indicator,
	);
	component.data["colour"] = indicator.data.colour;
});

allComponents.sort((a, b) => {
	return (a.data.tag || "").localeCompare(b.data.tag || "");
});

let types = ["Audio", "Document", "Presentation", "Video", "Website"];
---

<BaseLayout pageTitle={"Resources"}>
	<MediaDialog />

	<aside class="filters-container">
		<form
			id="resources-list-secondary-controls"
			class="list-secondary-controls"
			data-no-value-behaviour="shown"
			data-list="resources-list"
			data-tags-list="active-filters-list"
			data-sort-control="resources-list-primary-controls"
		>
			<div class="heading-group">
				<h2 class="heading">
					<!-- <IconFilter /> -->
					<span>Filters</span>
				</h2>
				<div
					class="separator"
					data-orientation="vertical"
					aria-hidden="true"
				>
				</div>
				<label class="filters-reset" data-style-as="button">
					<div class="icon-and-label-container">
						<IconFilterClear />
						<!-- <span class="label-container">
							<span class="label">Clear Filters</span>
						</span> -->
					</div>
					<input type="reset" value="" />
				</label>
			</div>

			<div class="separator group" aria-hidden="true"></div>

			<Accordion
				title={"Type"}
				id={"filters_type"}
				crossIconSize={"small"}
				wrapper={false}
			>
				<span
					class="filter-group-status label-container field-container"
					slot="button-meta"
					hidden
				>
					<span data-field="filtersTypesStatus">0</span
					>&nbsp;Selected</span
				>

				<div class="separator item" aria-hidden="true"></div>

				<fieldset class="filters" aria-labelledby="filters_type">
					{
						types.map((type) => (
							<label>
								<input
									type="checkbox"
									name="types"
									value={type.toLowerCase()}
									data-title={type}
									data-status-field="filtersTypesStatus"
								/>
								<IconCheckmark />
								<span class="text-container">{type}</span>
							</label>
						))
					}
				</fieldset>
			</Accordion>

			<div class="separator group" aria-hidden="true"></div>

			<Accordion
				title={"Indicator"}
				id={"filters_indicator"}
				crossIconSize={"small"}
				wrapper={false}
			>
				<span
					class="filter-group-status label-container field-container"
					slot="button-meta"
					hidden
				>
					<span data-field="filtersIndicatorsStatus">0</span
					>&nbsp;Selected</span
				>

				<div class="separator item" aria-hidden="true"></div>

				<fieldset class="filters" aria-labelledby="filters_indicator">
					{
						allIndicators.map((indicator) => (
							<label>
								<input
									type="checkbox"
									name="indicators"
									value={indicator.data.tag}
									data-title={indicator.data.title}
									data-status-field="filtersIndicatorsStatus"
								/>
								<IconCheckmark />
								<span class="text-container">
									<span
										class="tag"
										data-theme={indicator.data["colour"]}
										data-vibrancy="vivid"
									>
										{indicator.data.tag}
									</span>
									<span class="text">
										{indicator.data.title}
									</span>
								</span>
							</label>
						))
					}
				</fieldset>
			</Accordion>

			<div class="separator group" aria-hidden="true"></div>

			<Accordion
				title={"Component"}
				id={"filters_components"}
				crossIconSize={"small"}
				wrapper={false}
			>
				<span
					class="filter-group-status label-container field-container"
					slot="button-meta"
					hidden
				>
					<span data-field="filtersComponentsStatus">0</span
					>&nbsp;Selected</span
				>

				<div class="separator item" aria-hidden="true"></div>

				<fieldset class="filters" aria-labelledby="filters_component">
					{
						allComponents.map((component) => (
							<label>
								<input
									type="checkbox"
									name="components"
									value={component.data.tag}
									data-title={component.data.title}
									data-status-field="filtersComponentsStatus"
								/>
								<IconCheckmark />
								<span class="text-container">
									<span
										class="tag"
										data-theme={component.data["colour"]}
										data-vibrancy="vivid"
									>
										{component.data.tag}
									</span>
									<span class="text">
										{component.data.title}
									</span>
								</span>
							</label>
						))
					}
				</fieldset>
			</Accordion>
		</form>
	</aside>

	<div class="content">
		<h1>Resources</h1>

		<ul id="active-filters-list" class="field-values-list">
			<template>
				<li
					class="filter-tag"
					data-group=""
					data-value=""
					data-status-field=""
				>
					<span class="group"></span>
					<span class="title" title=""></span>
					<button class="clear" type="button" aria-label="">
						<IconXmarkSmall />
					</button>
				</li>
			</template>
		</ul>

		<form
			id="resources-list-primary-controls"
			class="list-primary-controls"
			data-no-value-behaviour="shown"
			data-list="resources-list"
		>
			<fieldset class="search">
				<div class="input-container">
					<input
						id="filters-search-input"
						name="search"
						type="text"
						placeholder="Search these resources..."
						aria-label="Search Resources"
						aria-describedby="resources-list_error"
						autofocus
					/>
					<IconSearch />
				</div>
			</fieldset>

			<div
				class="separator item"
				data-orientation="vertical"
				aria-hidden="true"
			>
			</div>

			<fieldset class="sort">
				<legend aria-label="List Sort Options">Sort</legend>
				<div class="button-group">
					<button
						type="button"
						value="date"
						aria-label="Sort list by date added"
						aria-pressed="true"
					>
						<span class="icon-and-label-container">
							<IconSortTime />
							<span class="label-container">
								<span class="label">Date</span>
							</span>
						</span>
					</button>
					<button
						type="button"
						value="title"
						aria-label="Sort list by title"
						aria-pressed="false"
					>
						<span class="icon-and-label-container">
							<IconSortAlpha />
							<span class="label-container">
								<span class="label">Title</span>
							</span>
						</span>
					</button>
				</div>
			</fieldset>

			<div
				class="separator item"
				data-orientation="vertical"
				aria-hidden="true"
			>
			</div>

			<fieldset class="layout">
				<legend aria-label="List Layout Options">Layout</legend>
				<div class="button-group">
					<button
						type="button"
						value="compact"
						aria-label="Switch to compact list layout"
						aria-pressed="true"
					>
						<span class="icon-and-label-container">
							<IconCompact />
							<span class="label-container">
								<span class="label">Compact</span>
								<span class="visually-hidden" hidden
									>Compact view unavailable for this filter</span
								>
							</span>
						</span>
					</button>
					<button
						type="button"
						value="detailed"
						aria-label="Switch to compact list layout"
						aria-pressed="false"
					>
						<span class="icon-and-label-container">
							<IconDetailed />
							<span class="label-container">
								<span class="label">Detailed</span>
							</span>
						</span>
					</button>
				</div>
			</fieldset>
		</form>

		<div class="list-container">
			<p
				id="resources-list_error"
				class="error-status"
				role="status"
				hidden
			>
				<IconWarning aria-hidden="true" />
				<span>There are no results that match the search term.</span>
			</p>

			<ul
				id="resources-list"
				class="links-list"
				data-style="divided"
				data-layout="compact"
				data-content="resources"
			>
				{
					allResources.map((resource) => {
						let data = JSON.parse(JSON.stringify(resource.data));
						data.category = "resource";
						data.slug = resource.id;
						return <LinkListItem itemData={data} />;
					})
				}
			</ul>
		</div>
	</div>
</BaseLayout>

<!-- TODO: How to handle the progressive enhancement popping in of accordions? https://docs.astro.build/en/guides/view-transitions/#script-re-execution -->

<style is:global>
	.filters-container {
		grid-area: left-aside;
		margin: 0 5rem 0 0;
		padding: 2rem 0;
		min-width: 300px;
		border-right: 1px solid var(--colour-border-neutral-subtle);
	}

	.filters-container .heading-group {
		--icon-size: 1.25rem;
		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: 0.5rem;
		margin: 0 0.5rem;
	}

	.filters-container .heading-group .heading {
		font-size: 1.5rem;
		margin: 0 0 0 0.75rem;
		flex-grow: 1;
	}

	.filters-container .heading-group .separator {
		--separator-long-edge-dimension: 1.75rem;
	}

	.filters-container .heading-group [data-style-as="button"] {
		--button-background-colour: transparent;
		--icon-size: 1.25rem;
	}

	.filters-container
		.heading-group
		[data-style-as="button"]:is(:hover, :focus-visible) {
		/* --icon-colour: var(--colour-ui-reverse); */
		/* --label-colour: var(--colour-ui-reverse); */
		--button-background-colour: var(--colour-fill-neutral-subtle);
	}

	.filters-container form {
		gap: 0.5rem;
	}

	.filters-container .accordion .heading {
		margin: 0 0.5rem;
	}

	.filters-container .accordion .heading button {
		--button-background-colour: transparent;
		--button-border-radius: var(--border-radius-small);
		--button-ui-colour: var(--colour-ui-neutral);
		/* --icon-colour: var(--colour-ui-accent); */
		--icon-size: 1rem;

		padding: 0.75rem;
	}

	.filters-container .accordion .heading button:is(:hover, :focus-visible),
	.filters-container
		.accordion
		.heading
		button[aria-expanded="true"]:is(:hover, :focus-visible) {
		--button-background-colour: var(--colour-fill-neutral-subtle);
	}

	.filters-container
		.accordion
		.heading
		button:not([aria-expanded="true"]):is(:hover, :focus-visible) {
		outline-color: transparent;
	}

	.filters-container .accordion .heading button[aria-expanded="true"] {
		--button-background-colour: transparent;
		--icon-colour: unset;
		border-radius: var(--button-border-radius);
		/* border-bottom: 1px solid var(--colour-border-neutral-subtle); */
	}

	.filters-container .accordion .heading button .icon-and-label-container {
		--label-size: 1rem;
		--label-weight: 600;
	}

	.filters-container
		.accordion
		.heading
		button[aria-expanded="true"]
		.icon-and-label-container {
		--label-colour: unset;
	}

	.filters-container .accordion .panel {
		margin: 0 0.5rem;
		padding-top: 0.25rem;
		border: none;
	}

	.filters-container .separator.item {
		--separator-long-edge-dimension: auto;
		margin: 0 0.75rem;
	}

	fieldset.filters {
		padding: 0.75rem 0 0.25rem;
		max-height: min(500px, 50vh);
		overflow: auto;
	}

	fieldset.filters label:has(input[type="checkbox"]) {
		margin: 0 0.75rem;
		padding: 0.5rem 0.75rem;
		border-radius: var(--border-radius-small);
	}

	fieldset.filters
		label:has(input[type="checkbox"]):is(:hover, :focus-visible) {
		background-color: var(--colour-fill-neutral-subtle);
	}

	fieldset.filters label:has(input[type="checkbox"]) .icon.checkmark {
		top: 0.75rem;
		left: 1rem;
	}

	form.list-primary-controls {
		display: flex;
		flex-flow: row nowrap;
		align-items: end;
		gap: 1rem;
	}

	form.list-primary-controls fieldset.search {
		flex-grow: 1;
	}

	form.list-primary-controls fieldset:is(.sort, .layout) {
		--group-gap: 0.5rem;
	}

	form.list-primary-controls fieldset:is(.sort, .layout) legend {
		font-size: 0.75rem;
		color: var(--colour-ui-neutral-subtle);
		margin: 0 0 0.325rem;
	}

	form.list-primary-controls fieldset:is(.sort, .layout) button {
		--icon-size: 1.25rem;
		font-size: 0.875rem;
		height: 2rem;
	}

	form.list-primary-controls
		fieldset:is(.sort, .layout)
		button:is(:hover, :focus-visible, [aria-pressed="true"]) {
		--icon-colour: var(--colour-ui-reverse);
		--label-colour: var(--colour-ui-reverse);
	}

	form.list-primary-controls
		fieldset:is(.sort, .layout):has(
			button:not([aria-pressed="true"]):is(:hover, :focus-visible)
		)
		button[aria-pressed="true"] {
		--button-background-colour: var(--colour-fill-neutral-subtle);
		--icon-colour: var(--colour-ui-neutral);
		--label-colour: var(--colour-ui-neutral);
	}

	form.list-primary-controls
		fieldset:is(.sort, .layout)
		button[aria-pressed="true"] {
		pointer-events: none;
	}

	form.list-primary-controls
		fieldset:is(.sort, .layout)
		button
		.label-container {
		display: none;
	}

	form.list-primary-controls .separator {
		--separator-long-edge-dimension: 1.5rem;
		margin-bottom: 0.25rem;
	}
</style>

<script>
	//
	// Imports
	//

	import { getUserData } from "src/stores/userDataStore";
	import { eventControl } from "src/utilities/event";
	import { filter, search, sort, layout } from "src/utilities/list";

	//
	// Methods
	//

	let toggleForcedLayout = (forceLayout: Boolean) => {
		let resourcesList = document.querySelector("#resources-list");
		let layoutDetailedBtn = document.querySelector(
			'fieldset.layout button[value="detailed"]',
		);
		let layoutCompactBtn = document.querySelector(
			'fieldset.layout button[value="compact"]',
		);
		let screenReaderContext =
			layoutCompactBtn.querySelector(".visually-hidden");

		if (forceLayout) {
			resourcesList.setAttribute("data-layout", "detailed");
			layoutCompactBtn.setAttribute("disabled", "");
			layoutCompactBtn.setAttribute("aria-pressed", "false");
			screenReaderContext.removeAttribute("hidden");
			layoutDetailedBtn.setAttribute("aria-pressed", "true");
		} else {
			let userLayoutPreference =
				getUserData().uiPreferences.resourcePageLayout;

			if (userLayoutPreference === "compact") {
				resourcesList.setAttribute("data-layout", "compact");
				layoutCompactBtn.setAttribute("aria-pressed", "true");
				layoutDetailedBtn.setAttribute("aria-pressed", "false");
			} else {
				resourcesList.setAttribute("data-layout", "detailed");
				layoutCompactBtn.setAttribute("aria-pressed", "false");
				layoutDetailedBtn.setAttribute("aria-pressed", "true");
			}

			layoutCompactBtn.removeAttribute("disabled");
			screenReaderContext.setAttribute("hidden", "");
		}
	};

	//
	// Inits
	//

	filter.init();
	document.addEventListener("astro:before-swap", filter.destroy);
	document.addEventListener("astro:after-swap", filter.init);

	search.init();
	document.addEventListener("astro:before-swap", search.destroy);
	document.addEventListener("astro:after-swap", search.init);

	sort.init();
	document.addEventListener("astro:before-swap", sort.destroy);
	document.addEventListener("astro:after-swap", sort.init);

	layout.init();
	document.addEventListener("astro:before-swap", layout.destroy);
	document.addEventListener("astro:after-swap", layout.init);

	//
	// Event Listeners
	//

	document.addEventListener("astro:after-swap", () => {
		console.log("After Swap");
	});

	let onSearchMatchFound = (event: CustomEvent) => {
		let matchTypes = event.detail.matchTypes;
		let forceLayout = matchTypes.has("description");
		toggleForcedLayout(forceLayout);
	};
	eventControl.initEvent({
		elem: document as any,
		eventType: "searchMatchFound",
		fn: onSearchMatchFound,
	});
</script>
