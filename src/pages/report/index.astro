---
import { getCollection, render } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import IconArrowDownSmall from "src/components/icons/IconArrowDown_16.astro";
import IconFolder20 from "src/components/icons/IconFolder_20.astro";
import IconCross20 from "src/components/icons/IconCross_20.astro";
import IconDownload20 from "src/components/icons/IconDownload_20.astro";
import IconCog20 from "src/components/icons/IconCog_20.astro";
import IconXmark20 from "src/components/icons/IconXmark_20.astro";
import ProgressChart from "src/components/charts/ProgressChart.astro";
import MatrixChart from "src/components/charts/MatrixChart.astro";
import OpenImportAssessmentDialogs from "src/components/dialogs/OpenImportAssessmentDialogs.astro";
import ReportDialogs from "src/components/dialogs/ReportDialogs.astro";
import Toast from "src/components/Toast.astro";
import IconCheckmark from "src/components/icons/IconCheckmark_12.astro";
import IconWarningSmall from "src/components/icons/IconWarning_16.astro";
import IconWarningBig from "src/components/icons/IconWarning_24.astro";
import { findObjectByKey } from "src/utilities/helpers";
import PageNav from "src/components/PageNav.astro";

// Get all indicators
let allIndicators = await getCollection("indicators");

let indicators = allIndicators.sort((a, b) => a.data.tag.localeCompare(b.data.tag));

// Get all components
let allComponents = await getCollection("components");

let components = allComponents.sort((a, b) => a.data.tag.localeCompare(b.data.tag));
components = components.map((component) => {
	let colour = findObjectByKey(allIndicators, "id", component.data.indicator)?.data.colour;
	return {
		...component,
		data: {
			...component.data,
			colour
		}
	}
})

let sectionLinks = [];
sectionLinks.push({
	url: "#overview",
	text: "Overview",
	dataset: [{
		key: 'tag',
		value: '0'
	}]
})
for (let indicator of indicators) {
	sectionLinks.push({
		url: `#indicator-${indicator.data.tag}`,
		text: indicator.data.title,
		dataset: [{
			key: 'tag',
			value: indicator.data.tag
		}]
	})
}

---
<BaseLayout pageTitle={'Report'} pageType={"report"}>

	<PageNav heading={'In this report'} sectionLinks={sectionLinks} dataset={[{key: 'restrict-report', value: 'active'}]}/>

	<Toast
		id={"open-assessment-dialog_open-toast_success"}
		message={`Report opened!`}
		colour={"green"}
		type={"success"}
	>
		<IconCheckmark slot={"icon"} />
	</Toast>
	<Toast
		id={"report-settings-dialog_save-toast_success"}
		message={`Report settings saved!`}
		colour={"green"}
		type={"success"}
	>
		<IconCheckmark slot={"icon"} />
	</Toast>
	<Toast
		id={"report-page_close-toast_success"}
		message={`Report closed.`}
		colour={"green"}
		type={"success"}
	>
		<IconCheckmark slot={"icon"} />
	</Toast>
	<Toast
		id={"report-page_close-toast_failure"}
		message={`Unable to close report. Please reload the page to try again.`}
		colour={"red"}
		type={"failure"}
	>
		<IconWarningSmall slot={"icon"} />
	</Toast>

	<OpenImportAssessmentDialogs/>
	<ReportDialogs/>

	<div class="content report">

		<h1 id="main-heading" tabindex="-1" aria-live="polite">
			<span class="title" data-restrict-device-max="small">Report</span>
			<span class="title" data-restrict-device-min="medium" data-field="reportSchool">Report</span>
			<span class="subtitle" data-font-type="sans-serif" data-restrict-report="active">
				<span data-field="reportYear"></span>
				Report
			</span>
		</h1>

		<div class="callout" data-style="solid" data-fit="compact" data-theme="yellow" data-vibrancy="vivid" data-restrict-device-max="small">
			<div class="wrapper">
				<div class="icon-container">
					<IconWarningBig />
				</div>
				<div class="text-container">
					<p>
						The report feature isn't available on small screens. Please use a tablet or desktop device to access it.
					</p>
				</div>
			</div>
		</div>

		<div class="welcome-container" data-restrict-report="inactive" data-restrict-device-min="medium">
			<div class="wrapper">
				<p class="instructions">To view a report, create and complete an assessment or open a completed assessment.</p>
				<div class="button-group">
					<a href="/big-seven?dialog=create-assessment" aria-label="Create Assessment" data-style-as="button" data-style="solid" data-size="large">
						<span class="icon-and-label-container">
							<IconCross20/>
							<span class="label-container">
								<span class="label">Create</span>
							</span>
						</span>
					</a>
					<button class="open-dialog" data-dialog="open-assessment-dialog" data-dialog-context="report" data-dialog-heading="Open Assessment Report" aria-label="Open or Import Assessment" type="button" data-style="solid" data-size="large">
						<span class="icon-and-label-container">
							<IconFolder20/>
							<span class="label-container">
								<span class="label">Open</span>
							</span>
						</span>
					</button>
				</div>
			</div>
		</div>

		<div id="report-controls" data-print="false" data-restrict-report="active">
			<div class="button-group">
				<button class="open-dialog" data-dialog="open-assessment-dialog" data-dialog-context="report" data-dialog-heading="Open Assessment Report" aria-label="Open or Import Assessment" type="button">
					<span class="icon-and-label-container">
						<IconFolder20/>
						<span class="label-container">
							<span class="label">Open</span>
						</span>
					</span>
				</button>

				<div class="separator item" data-orientation="vertical" aria-hidden="true" ></div>

				<button class="open-dialog" data-dialog="report-settings-dialog" aria-label="Modify Report Settings" type="button" >
					<span class="icon-and-label-container">
						<IconCog20/>
						<span class="label-container">
							<span class="label">Settings</span>
						</span>
					</span>
				</button>
				
				<div class="separator item" data-orientation="vertical" aria-hidden="true" ></div>

				<button class="download-report" aria-label="Download Assessment Report" type="button" >
					<span class="icon-and-label-container">
						<IconDownload20/>
						<span class="label-container">
							<span class="label">Download</span>
						</span>
					</span>
				</button>
				
				<div class="separator item" data-orientation="vertical" aria-hidden="true" ></div>

				<button class="close-report" 
				aria-label="Close Assessment Report" 
				type="button" 
				data-toast-success="report-page_close-toast_success" 
				data-toast-failure="report-page_close-toast_failure">
					<span class="icon-and-label-container">
						<IconXmark20/>
						<span class="label-container">
							<span class="label">Close</span>
						</span>
					</span>
				</button>
			</div>
		</div>

		<div id="pdf-export-progress-container" role="status" aria-live="polite" aria-atomic="true" data-theme="blue" data-vibrancy="vivid" hidden>
			<div class="text-container" data-field="pdfExportMessage">
				Preparing report for download.
			</div>
			<div class="progress-bar-container" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
				<div data-role="bar"></div>
			</div>
		</div>

		<hr class="section" data-print="false" data-restrict-report="active"/>

		<div id="report-container" data-restrict-report="active">

			<section class="overview" data-tag="0" data-include="true">
				<h2 id="overview">Overview</h2>
				<!-- <h3>Continuum Progress</h3>
				<ProgressChart/> -->
				<h3>Indicator Progress</h3>
				<MatrixChart entries={indicators} scope={'Indicators'}/>
			</section>

			{indicators.map((indicator) => {

				// Get all current indicator components
				let components = allComponents.filter((component => component.data.indicator === indicator.id)).sort((a, b) => a.data.tag.localeCompare(b.data.tag));

				return (

					<hr class="section" data-print="false" />

					<section class="indicator" data-tag={indicator.data.tag} data-theme={indicator.data.colour} data-vibrancy="vivid" data-include="true">
						<h2 id={`indicator-${indicator.data.tag}`}>
							<span class="title">{indicator.data?.title}</span>
						</h2>
						<h3>Overall Progress</h3>
						<ProgressChart/>
						<h3>Component Progress</h3>
						<MatrixChart entries={components} scope={'Components'} />
					</section>

				)
				
			})}

			<section class="summary" data-include="true" hidden>
				<h2 id="summary">Summary</h2>
				<!-- <h3>Component Progress</h3> -->
				<MatrixChart entries={components} scope={'Components'} fit={'compact'}/>
			</section>


		</div>

	</div>

</BaseLayout>

<style is:global>
	/* 
	// Device Restrictions
	*/

	@container main (width < 744px) {
		.content.report [data-restrict-report="active"] {
			display: none !important;
		}

		.content.report [data-restrict-device-min="medium"] {
			display: none !important;
		}
	}

	@container main (width >= 744px) {
		.content.report [data-restrict-device-max="small"] {
			display: none !important;
		}
	}

	/* 
	// Page Heading
	*/

	.content.report h1 .subtitle {
		display: block;
		font-weight: 400;
		font-size: var(--font-size-xl);
		color: var(--colour-ui-neutral-subtle);
		margin: var(--space-2xs) 0 0;
	}

	/* 
	// Welcome Container Buttons
	*/
	
	main.report .welcome-container :is(button, [data-style-as="button"]) {
		--container-gap: var(--space-xs);
		--label-size: var(--font-size-xs);
		--icon-size: 1.25rem;
	}

	main.report .welcome-container :is(button, [data-style-as="button"]):is(:hover, :focus-visible) {
		--label-colour: var(--colour-ui-reverse);
		--icon-colour: var(--colour-ui-reverse); 
	}

	main.report .welcome-container .button-group {
		margin: var(--space-lg) 0 0;
	}

	#report-controls {
		--group-gap: var(--space-2xs);
		display: inline-flex;
		flex-flow: row wrap;
		align-items: center;
		gap: var(--space-2xs);
		min-height: 3.25rem;
		padding: var(--space-2xs);
		margin: var(--space-sm) 0 0;
		background-color: var(--colour-fill-neutral-subtle);
		border-radius: var(--border-radius-normal);
	}

	#report-controls :is(button, [data-style-as='button']) {
		--icon-size: 1.25rem;
		--button-background-colour: transparent;
	}

	#report-controls :is(button, [data-style-as='button']):is(:hover, :focus-visible) {
		--icon-colour: var(--colour-ui-reverse);
		--label-colour: var(--colour-ui-reverse);
		--button-background-colour: var(--colour-fill-neutral-bold);
	}

	#report-controls .separator.item {
		--separator-long-edge-dimension: 1.75rem;
	}

	#report-container {
		position: relative;
	}

	#report-container > section {
		width: 100%;
	}
	
	#report-container h3 {
		font-weight: 500;
	}

	hr:has(+ #report-container[hidden]) {
		display: none;
	}

	#report-container hr:has(+ section[hidden]) {
		display: none;
	}

	#pdf-export-progress-container {
		width: 100%;
		max-width: 400px;
		margin: var(--space-lg) 0 0;
	}

	#pdf-export-progress-container .text-container {
		font-size: var(--font-size-xs);
		color: var(--colour-ui-neutral-subtle);
		margin: 0 0 var(--space-xs);
	}

	#pdf-export-progress-container [role="progressbar"] {
		width: 100%;
		height: 1rem;
		border-radius: var(--border-radius-normal);
		background-color: var(--colour-fill-neutral-subtle);
		overflow: hidden;
	}

	#pdf-export-progress-container [role="progressbar"] [data-role="bar"] {
		width: 0%;
		height: 100%;
		background-color: var(--colour-fill-accent-bold, var(--colour-fill-neutral-bold));
	}

	@media print {
		header,
		main > aside,
		dialog,
		hr,
		#report-controls,
		footer {
			display: none !important;
		}
	}
</style>

<script>
	//
	// Imports
	//

	import { formatDateAsString } from 'src/utilities/helpers';
	import { userDataStore, setState, subscribe, setPreferences } from 'src/stores/userDataStore';
	import {
		getActiveReportData,
	} from 'src/stores/userDataStore';
	import html2canvas from 'html2canvas';
	import jsPDF from 'jspdf';
	import { eventControl } from 'src/utilities/event';
import { toastControl } from 'src/utilities/toast';

	//
	// Methods
	//


	let fetchFontBase64 = async (url: string) => {
		const res = await fetch(url);
		const arrayBuffer = await res.arrayBuffer();
		const uint8 = new Uint8Array(arrayBuffer);

		// Convert to base64
		let binary = "";
		for (let i = 0; i < uint8.length; i++) {
			binary += String.fromCharCode(uint8[i]);
		}
		return btoa(binary);
	};
	
	let fetchPngBase64 = async (image) => {
		let res = await fetch(image);
		const arrayBuffer = await res.arrayBuffer();
		const uint8 = new Uint8Array(arrayBuffer);

		// Convert to base64
		let binary = "";
		for (let i = 0; i < uint8.length; i++) {
			binary += String.fromCharCode(uint8[i]);
		}
		return btoa(binary);
	};
	
	let progressTracker = (() => {

		let container, 
		barContainer, 
		bar,
		messageField,
		statusField, 
		current = 0, 
		target = 0, 
		rafId;

		let animate = () => {
			if (current < target) {
				// move faster when gap is large, slower when near target
				current += (target - current) * 0.20; // 20% of the gap per frame
				if (Math.abs(target - current) < 0.1) current = target; // snap to target if very close
				bar.style.width = current + '%';
			}
			rafId = requestAnimationFrame(animate);
		};

		let init = (selector) => {
			container = document.querySelector(selector);
			if (!container) return;
			barContainer = container.querySelector('[role="progressbar"]');
			bar = container.querySelector('[data-role="bar"]');
			if (!bar) return;
			messageField = container.querySelector('[data-field="pdfExportMessage"]');
			statusField = container.querySelector('[data-field="pdfExportStatus"]');

			current = 0;
			target = 0;
			bar.style.width = '0%';
			cancelAnimationFrame(rafId);
			rafId = requestAnimationFrame(animate);
		};

		let start = (totalPages) => {
			if (!container || !barContainer) return;
			container.removeAttribute('hidden');
			barContainer.setAttribute('aria-valuemin', 0);
			barContainer.setAttribute('aria-valuemax', totalPages);
			barContainer.setAttribute('aria-valuenow', 0);
			let estimatedDuration = Math.floor(totalPages * 3.66); 
			let message = `Preparing report for download (about ${estimatedDuration} seconds)...`;
			messageField.textContent = message;
			barContainer.setAttribute('aria-valuetext', message);
		};

		let update = (page, totalPages) => {
			if (!barContainer) return;
			target = Math.round((page / totalPages) * 100);
			barContainer.setAttribute('aria-valuenow', page);
			let message = `${page} of ${totalPages} pages complete.`
			messageField.textContent = message;
			barContainer.setAttribute('aria-valuetext', message);
		};

		let finish = () => {
			if (!barContainer) return;
			target = 100;
			barContainer.setAttribute('aria-valuenow', barContainer.getAttribute('aria-valuemax'));
			let message = `Report is ready. Downloading now...`
			messageField.textContent = message;
			barContainer.setAttribute('aria-valuetext', message);
			setTimeout(() => {
				container.setAttribute('hidden', '');
			}, 2000);
		};

		return { init, start, update, finish };

	})();

	let packageReport = async () => {

		/**
		 * Add wrapped text to jsPDF
		 * @param {object} doc - jsPDF instance
		 * @param {string} text - Text to render
		 * @param {number} x - Left position (margin start)
		 * @param {number} y - Top position
		 * @param {number} maxWidth - Max width available for text
		 * @param {number} lineHeight - Line height (spacing between lines)
		 * @returns {number} - Final y position after text block
		 */
		let addWrappedText = (doc, text, x, y, maxWidth, lineHeight = doc.getLineHeight()) => {

			let lines = doc.splitTextToSize(text, maxWidth);
			
			// Account for baseline text placement
			y += lineHeight;
			
			for (let i = 0; i < lines.length; i++) {
				doc.text(lines[i], x, y);
				
				// Only increase y if not on the last line
				if (i < lines.length - 1) {
					y += lineHeight;
				}
			}

			return y; // return new Y so you can keep adding below
		};
		
		let reportContainer = document.querySelector('main .content') as HTMLElement;
		if (!reportContainer) return;

		let sections = reportContainer.querySelectorAll('section[data-include]') as NodeListOf<HTMLElement>;
		let totalPages = sections.length + 1; // Cover + charts

		progressTracker.init('#pdf-export-progress-container');
		progressTracker.start(totalPages);

		let assessment = getActiveReportData();
		
		let pdf = new jsPDF({
			orientation: 'portrait',
			unit: 'pt',
			format: 'letter',
		});

		console.log('jsPDF Created', pdf);

		let margin = 72;
		let pageWidth = pdf.internal.pageSize.getWidth() - (margin * 2);
		let pageHeight = pdf.internal.pageSize.getHeight();
		let currentYPosition = margin;
		pdf.setLineHeightFactor(1.1);

		let aesthetNovaMediumBase64 = await fetchFontBase64('fonts/AesthetNova-Medium.ttf');
		let aesthetNovaBoldBase64 = await fetchFontBase64('fonts/AesthetNova-Bold.ttf');
		let publicSansRegularBase64 = await fetchFontBase64('fonts/PublicSans-Regular.ttf');
		let publicSansBoldBase64 = await fetchFontBase64('fonts/PublicSans-Bold.ttf');

		pdf.addFileToVFS('AesthetNova-Medium.ttf', aesthetNovaMediumBase64);
		pdf.addFont('AesthetNova-Medium.ttf', 'Aesthet Nova', 'normal')
		pdf.addFileToVFS('AesthetNova-Bold.ttf', aesthetNovaBoldBase64);
		pdf.addFont('AesthetNova-Bold.ttf', 'Aesthet Nova', 'bold')
		pdf.addFileToVFS('PublicSans-Regular.ttf', publicSansRegularBase64);
		pdf.addFont('PublicSans-Regular.ttf', 'Public Sans', 'normal');
		pdf.addFileToVFS('PublicSans-Bold.ttf', publicSansBoldBase64);
		pdf.addFont('PublicSans-Bold.ttf', 'Public Sans', 'bold');

		console.log('Added Fonts', pdf);

		let gnbLogoBase64 = await fetchPngBase64('images/gnb-logo-colour.png');

		// 1. Create the report cover page

		let gnbLogoHeight = 34.4073;
		pdf.addImage(gnbLogoBase64, margin, 160, 100, gnbLogoHeight);
		currentYPosition = 160 + gnbLogoHeight;

		currentYPosition += 24;

		let websiteTitle = 'New Brunswick Middle Schools';
		pdf.setFont('Aesthet Nova', 'bold');
		pdf.setFontSize(32);
		pdf.setTextColor('#162130');
		currentYPosition = addWrappedText(pdf, websiteTitle, margin, currentYPosition, pageWidth);

		currentYPosition += 18;

		pdf.setFillColor('#8c3b43');
		pdf.roundedRect(margin, currentYPosition, 424, 36, 8, 8, 'F');

		let websiteSubtitle = 'Conditions for Success Developmental Continuums';
		pdf.setFont('Aesthet Nova', 'normal');
		pdf.setFontSize(18);
		pdf.setTextColor('#FFFFFF');
		currentYPosition = addWrappedText(pdf, websiteSubtitle, margin + 14, currentYPosition + 3, pageWidth);

		currentYPosition += 280;

		let schoolName = assessment.school;
		pdf.setFont('Aesthet Nova', 'bold');
		pdf.setFontSize(24);
		pdf.setTextColor('#162130');
		currentYPosition = addWrappedText(pdf, schoolName, margin, currentYPosition, pageWidth);
		
		currentYPosition += 12;
		
		let reportingYear = `${assessment.reportingYear} Report`;
		pdf.setFont('Public Sans', 'normal');
		pdf.setFontSize(18);
		currentYPosition = addWrappedText(pdf, reportingYear, margin, currentYPosition, pageWidth);

		currentYPosition += 36;

		let assessmentCompletionDate = `Assessment Completed: ${formatDateAsString(assessment.dateCompleted, false)}`;
		pdf.setFont('Public Sans', 'normal');
		pdf.setFontSize(12);
		currentYPosition = addWrappedText(pdf, assessmentCompletionDate, margin, currentYPosition, pageWidth);

		currentYPosition += 6;

		let reportDate = `Report Created: ${formatDateAsString(Date.now(), false)}`;
		pdf.setFont('Public Sans', 'normal');
		pdf.setFontSize(12);
		currentYPosition = addWrappedText(pdf, reportDate, margin, currentYPosition, pageWidth);

		progressTracker.update(1, totalPages);
		
		// 2. Create the chart pages
		
		margin = 54;
		pageWidth = pdf.internal.pageSize.getWidth() - (margin * 2);

		// Safari Fix:
		let lazyElements = document.querySelectorAll('[loading="lazy"]');
		for (let elem of lazyElements) {
			elem.setAttribute('loading', 'eager');
		}
		
		for (let [index, section] of sections.entries()) {

			let isSummary = section.matches('.summary');
			
			pdf.addPage();

			console.log('New Page', pdf);

			currentYPosition = margin - 16; // Account for section heading line height padding

			// Convert on screen charts to images

			let progressChartElem = section.querySelector('.progress') as HTMLElement;
			let progressChartCanvas = null;
			let progressChartImgProps;
			let progressChartImgHeight;
			if (progressChartElem) {
				progressChartCanvas = await html2canvas(progressChartElem, {
					scale: 3,
					useCORS: true,
				}) as HTMLCanvasElement;
				progressChartImgProps = pdf.getImageProperties(progressChartCanvas);
				progressChartImgHeight = (progressChartImgProps.height * pageWidth) / progressChartImgProps.width;
			} 

			console.log('Converted Progress Chart', progressChartCanvas);

			let matrixChartElem = section.querySelector('.matrix') as HTMLElement;
			let matrixChartCanvas = null;
			let matrixChartImgProps;
			let matrixChartImgHeight
			if (matrixChartElem) {
				if (isSummary){
					section.removeAttribute('hidden');
					section.style.position = 'absolute';
					section.style.left = '-9999px';
				}
				matrixChartCanvas = await html2canvas(matrixChartElem, {
					scale: 3,
					useCORS: true,
				}) as HTMLCanvasElement;
				matrixChartImgProps = pdf.getImageProperties(matrixChartCanvas);
				matrixChartImgHeight = (matrixChartImgProps.height * pageWidth) / matrixChartImgProps.width;
				if (isSummary) {
					section.setAttribute('hidden', '');
					section.style.position = '';
					section.style.left = '';
				}
			}

			console.log('Converted Matrix Chart', matrixChartCanvas);
			
			// Create page layout 

			let sectionHeading = section.querySelector('h2').textContent.trim();
			pdf.setFont('Aesthet Nova', 'bold');
			pdf.setFontSize(24);
			currentYPosition = addWrappedText(pdf, sectionHeading, margin, currentYPosition, pageWidth);

			currentYPosition += 18;

			if (progressChartCanvas) {
				let chartHeading1 = 'Overall Progress';
				pdf.setFont('Public Sans', 'normal');
				pdf.setFontSize(18);
				currentYPosition = addWrappedText(pdf, chartHeading1, margin, currentYPosition, pageWidth);
	
				currentYPosition += 24;
	
				pdf.addImage(progressChartCanvas, margin, currentYPosition, pageWidth, progressChartImgHeight);
				currentYPosition += progressChartImgHeight;
	
				currentYPosition += 12;
			}

			if (matrixChartCanvas) {
				if (!isSummary) {
					let chartHeading2 = `${index === 0 ? 'Indicator' : 'Component'} Progress`;
					pdf.setFont('Public Sans', 'normal');
					pdf.setFontSize(18);
					currentYPosition = addWrappedText(pdf, chartHeading2, margin, currentYPosition, pageWidth);
					currentYPosition += 24;
				}
	
				pdf.addImage(matrixChartCanvas, margin, currentYPosition, pageWidth, matrixChartImgHeight);
	
				progressTracker.update(index + 2, totalPages);
			}

			let pageFooter = `${schoolName} | ${reportingYear} | Page ${index + 2} of ${sections.length + 1}`;
			pdf.setFont('Public Sans', 'normal');
			pdf.setFontSize(10);

			addWrappedText(pdf, pageFooter, margin, (pageHeight - margin + 16), pageWidth);
		}
		
		pdf.save('report.pdf');
		progressTracker.finish();

	}

	//
	// DOM Updates
	//

	let updateReport = async (data: UserData, changes) => {		
		let reportContainer = document.querySelector('#report-container');
		if (!reportContainer) return;

		let stateTriggerKeys = ["activeReportId"];
		let preferencesTriggerKeys = ["reportIncludedIndicators"];
		let assessmentTriggerKeys = ["school", "reportingYear", "continuumCompletion"];
		if (
			!changes.initiating &&
			!(
				(changes.assessments &&
				assessmentTriggerKeys.some((val) => changes.assessments.includes(val)))
			||
				(changes.uiPreferences &&
				preferencesTriggerKeys.some((val) => changes.uiPreferences.includes(val)))
			||
				(changes.uiState &&
				stateTriggerKeys.some((val) => changes.uiState.includes(val))) 
			)
		)
			return;	
			
		let main = document.querySelector('main');
		let sections = reportContainer?.querySelectorAll(':scope > section');
		let onPageNav = document.querySelector('nav.on-page');
		let reportHeading = document.querySelector('h1');
		let reportHeadingSchool = reportHeading?.querySelector('[data-field="reportSchool"]');
		let reportHeadingYear = reportHeading?.querySelector('[data-field="reportYear"]');

		if (!data.uiState.activeReportId) {

			main.setAttribute('data-report', 'inactive');
			reportHeadingSchool.textContent = 'Report';

		} else {

			let assessment = getActiveReportData();
			if (!assessment) return;

			main.setAttribute('data-report', 'active');
			
			let onPageNavLinks = onPageNav.querySelectorAll('a');
			for (let link of onPageNavLinks) {
				if (link.getAttribute('data-tag') === '0') continue;
				if (data.uiPreferences.reportIncludedIndicators.includes(link.getAttribute('data-tag'))) link.closest('li').removeAttribute('hidden');
				else link.closest('li').setAttribute('hidden', '');
			}

			reportHeadingSchool.textContent = assessment.school;
			reportHeadingYear.textContent = assessment.reportingYear;

			for (let section of sections) {

				let mainScopeTag = section.getAttribute('data-tag');
				let mainScopeCompletion = mainScopeTag === '0' ? assessment.continuumCompletion.continuum : assessment.continuumCompletion[mainScopeTag];

				let progressChart = section.querySelector('.progress');
				let progressSimplified = section.querySelector('.progress-simplified');
				if (progressChart) {
					let progressChartSegments = progressChart.querySelectorAll('.segment-container');
					let progressSimDetails = progressSimplified.querySelectorAll('dd');
					let progressSimPhaseField = progressSimplified.querySelector('[data-field="phase"]');

					for (let [index, segment] of Object.entries(progressChartSegments)) {

						let phase = segment.getAttribute('data-phase');

						let activePhase = mainScopeCompletion ? mainScopeCompletion.phase.toLowerCase() : 'initiating';

						if (phase.toLowerCase() === activePhase) {
							segment.setAttribute('data-active', '');
							progressSimPhaseField.textContent = phase.charAt(0).toUpperCase() + phase.slice(1);
						} else {
							segment.removeAttribute('data-active');
						}

						let countField = segment.querySelector('[data-field="count"]');
						let totalField = segment.querySelector('[data-field="total"]');
						let progressSimCountField = progressSimDetails[index].querySelector('[data-field="count"]');
						let progressSimTotalField = progressSimDetails[index].querySelector('[data-field="total"]');

						let phaseTotal;
						if (!mainScopeCompletion) {
							let count = await userDataStore.getConsiderationCount();
							phaseTotal = mainScopeTag === '0' ? count.continuum[phase] : count[mainScopeTag][phase];
						}

						countField.textContent = mainScopeCompletion ? mainScopeCompletion[`${phase}Count`] : 0;
						totalField.textContent = mainScopeCompletion ? mainScopeCompletion[`${phase}Total`] : phaseTotal;
						progressSimCountField.textContent = mainScopeCompletion ? mainScopeCompletion[`${phase}Count`] : 0;
						progressSimTotalField.textContent = mainScopeCompletion ? mainScopeCompletion[`${phase}Total`] : phaseTotal;

					}
				}

				let matrixCharts = section.querySelectorAll('.matrix');

				for (let matrix of matrixCharts) {
					let matrixChartScope = matrix.getAttribute('data-scope'); 
					let matrixChartRows = matrix.querySelectorAll('tr');
					let matrixSimplified = section.querySelector('.matrix-simplified');
					let matrixSimRows = matrixSimplified.querySelectorAll('tr');
					let matrixSimScopeField = matrixSimplified.querySelector('[data-field="scope"]');
					matrixSimScopeField.textContent = matrixChartScope;

					for (let [index, row] of Object.entries(matrixChartRows)) {
						
						let subScopeTag = row.getAttribute('data-tag');
	
						let subScopeCompletion = assessment.continuumCompletion[subScopeTag];
	
						if (!subScopeCompletion) continue;
						
						row.setAttribute('data-phase', subScopeCompletion.phase.toLowerCase());
						
						let matrixSimRow = matrixSimRows[index];
						let matrixSimPhaseField = matrixSimRow.querySelector('[data-field="phase"]');
						matrixSimPhaseField.textContent = subScopeCompletion.phase;
	
					}
				}

				let reportIncludedIndicators = data.uiPreferences.reportIncludedIndicators;

				if (section.matches('.indicator')) {
	
					if (reportIncludedIndicators.includes(mainScopeTag)) {
						section.removeAttribute('hidden');
						section.setAttribute('data-include', '');
					} else {
						section.setAttribute('hidden', '');
						section.removeAttribute('data-include');
					}

				}

			}

		}
	}

	//
	// Inits
	//

	subscribe(updateReport);

	//
	// Event Listeners
	//

	let onClick = async (event) => {
		let target = event.target as any;

		let toolbar = target.closest('#report-controls');
		if (!toolbar) return;

		if (target.matches('button.download-report')) {
			packageReport();
		}

		if (target.matches('button.close-report')) {
			try {
				setState({
					activeReportId: null,
				})
	
				setPreferences({
					reportIncludedIndicators: ['1', '2', '3', '4', '5', '6', '7'],
				})

				toastControl.show({ target, type: "success" });

			} catch (error) {
				console.error(error);
				toastControl.show({ target, type: "failure" });
			}
		}

	}
	eventControl.add({
		selector: '#report-controls',
		eventType: 'click',
		fn: onClick,
	})




</script>