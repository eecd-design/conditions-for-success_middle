---
import Accordion from "src/components/Accordion.astro";
import IconXmark from "src/components/icons/IconXmark_20.astro";
import IconTranscript from "src/components/icons/IconTranscript_24.astro";
import { Image } from "astro:assets";
import videoPoster from "src/images/video-poster.png";
---

<dialog id="media-dialog" class="media" aria-labelledby="media-dialog_heading">
	<button class="close-dialog" type="button" aria-label="Close Media Dialog"
		><IconXmark /></button
	>

	<h2
		id="media-dialog_heading"
		class="heading"
		data-default-text="Media Resource"
	>
		Media Resource
	</h2>

	<video controls poster={videoPoster.src} hidden></video>

	<audio controls src="" hidden></audio>

	<iframe
		src=""
		frameborder="0"
		referrerpolicy="strict-origin-when-cross-origin"
		allowfullscreen
		hidden></iframe>

	<div class="transcript accordion-group" hidden>
		<Accordion title={"Transcript"}>
			<IconTranscript slot="button-icon" />
			<p>Transcript goes here...</p>
		</Accordion>
	</div>
</dialog>

<script>
	//
	// Imports
	//

	import { dialogControl } from "src/utilities/dialog";
	import { eventControl } from "src/utilities/event";
	import { stringToBoolean } from "src/utilities/helpers";

	//
	// Methods
	//

	/**
	 * Generate an iframe element from a YouTube or Vimeo URL
	 * @param {string} url - Full video URL (YouTube or Vimeo)
	 * @returns {HTMLIFrameElement|null} iframe element or null if URL is invalid
	 */
	let convertURLToEmbedURL = function (url) {
		let videoId, embedUrl;

		// YouTube URLs
		if (/youtu(\.be|be\.com)/.test(url)) {
			let match = url.match(/(?:v=|youtu\.be\/|embed\/)([^#\&\?]+)/);
			if (!match) return null;
			videoId = match[1];
			embedUrl = `https://www.youtube.com/embed/${videoId}`;
		}

		// Vimeo URLs
		else if (/vimeo\.com/.test(url)) {
			let match = url.match(/vimeo\.com\/(\d+)/);
			if (!match) return null;
			videoId = match[1];
			embedUrl = `https://player.vimeo.com/video/${videoId}`;
		} else {
			return null; // Unsupported platform
		}

		return embedUrl;
	};

	/**
	 * Remove the file extension from a URL string
	 * @param {string} url - URL with optional file extension
	 * @returns {string} URL without the file extension
	 */
	let removeFileExtension = function (url) {
		return url.replace(/\.[^.\/?#]+(?=$|[?#])/, "");
	};

	//
	// Inits
	//

	//
	// Event Listeners
	//

	let onClick = (event) => {
		let target = event.target.closest(
			`button.open-dialog[data-dialog="media-dialog"]`,
		) as HTMLButtonElement;
		let mediaDialog = document.querySelector("#media-dialog");

		if (!mediaDialog || !target) return;

		// Get the media elements
		let video = mediaDialog.querySelector("video");
		let iframe = mediaDialog.querySelector("iframe");
		let audio = mediaDialog.querySelector("audio");
		let transcriptAccordion = mediaDialog.querySelector(".transcript");

		// Reset visibility
		video.setAttribute("hidden", "");
		iframe.setAttribute("hidden", "");
		audio.setAttribute("hidden", "");
		transcriptAccordion.setAttribute("hidden", "");

		// Get the media data from the button
		let mediaType = target.getAttribute("data-media-type");
		let mediaExternal = target.getAttribute("data-media-external")
			? stringToBoolean(target.getAttribute("data-media-external"))
			: false;
		let mediaSrc = target.getAttribute("data-media-src");

		if (!mediaType && !mediaSrc) return;

		// Get a path only version of the src url
		let mediaSrcPathOnly = removeFileExtension(mediaSrc);

		if (mediaType === "video") {
			let iframeSrc = convertURLToEmbedURL(mediaSrc);
			if (iframeSrc) {
				iframe.setAttribute("src", convertURLToEmbedURL(mediaSrc));
				iframe.removeAttribute("hidden");
			} else {
				video.removeAttribute("hidden");
				video.src = mediaSrc;

				// Disable old tracks
				for (let track of video.textTracks) {
					track.mode = "disabled";
				}

				// Remove old tracks
				for (let track of video.querySelectorAll("track")) {
					track.remove();
				}

				// Create new track
				let newTrack = document.createElement("track");
				// newTrack.src = `${mediaSrcPathOnly}.vtt`;
				newTrack.src = `/assets/media/${mediaSrcPathOnly.split("/").slice(-1)}.vtt`; // TODO: TEMP TESTING
				newTrack.kind = "captions";
				newTrack.srclang = "en";
				newTrack.label = "English";
				video.append(newTrack);

				// Force reload
				video.load();
			}
		} else if (mediaType === "audio") {
			audio.setAttribute("src", mediaSrc);
			audio.removeAttribute("hidden");
			transcriptAccordion.removeAttribute("hidden");
			let transcriptPanel =
				transcriptAccordion.querySelector(".panel > .content");
			transcriptPanel.innerHTML = "<p>Updated transcript...</p>";
		} else {
			console.warn("Invalid Resource Type");
		}
	};
	eventControl.add({
		selector: `button.open-dialog[data-dialog="media-dialog"]`,
		eventType: "click",
		fn: onClick,
	});
</script>
