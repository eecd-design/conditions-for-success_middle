---
import IconAssessment from "src/components/icons/IconAssessment_20.astro";
import IconWarningBig from "src/components/icons/IconWarning_24.astro";
import IconWarningSmall from "src/components/icons/IconWarning_16.astro";
import IconXmark from "src/components/icons/IconXmark_20.astro";
import Toast from "src/components/Toast.astro";
import IconCheckmark from "src/components/icons/IconCheckmark_12.astro";
import IconTrash from "src/components/icons/IconTrash_20.astro";
---

<dialog
	id="open-assessment-dialog"
	aria-describedby="open-assessment-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Open Assessment Dialog"><IconXmark /></button
	>

	<Toast
		id={"import-conflict-dialog_overwrite-toast_success"}
		message={`Assessment overwritten.`}
		colour={"green"}
		type={"success"}
	>
		<IconCheckmark slot={"icon"} />
	</Toast>
	<Toast
		id={"deletion-confirmation-dialog_delete-toast_success"}
		message={`Assessment deleted.`}
		colour={"green"}
		type={"success"}
	>
		<IconCheckmark slot={"icon"} />
	</Toast>

	<h2
		id="open-assessment-dialog_heading"
		class="heading"
		data-default-text="Open Assessment"
	>
		Open or Import Assessment
	</h2>

	<section class="import">
		<h3>Import Assessment</h3>

		<Toast
			id={"open-assessment-dialog_import-file-toast_success"}
			message={`Assessment imported into 'Saved Assessments'.`}
			colour={"green"}
			type={"success"}
		>
			<IconCheckmark slot={"icon"} />
		</Toast>
		<Toast
			id={"open-assessment-dialog_import-file-toast_failure"}
			message={`Unable to import assessment. Please reload the page to try again.`}
			colour={"red"}
			type={"failure"}
		>
			<IconWarningSmall slot={"icon"} />
		</Toast>

		<form>
			<fieldset class="file">
				<!-- <h4 class="heading">File</h4> -->
				<label
					class="file-input-container"
					data-toast-success="open-assessment-dialog_import-file-toast_success"
					data-toast-failure="open-assessment-dialog_import-file-toast_failure"
				>
					<span
						data-style-as="button"
						data-style="solid"
						data-size="large">Choose File</span
					>
					<input type="file" accept=".csv" autofocus />
				</label>
			</fieldset>

			<div class="separator item" data-orientation="vertical"></div>

			<fieldset class="code">
				<!-- <h4 class="heading">Code</h4> -->
				<div class="code-container input-container">
					<input
						type="text"
						name="import-code"
						placeholder="Paste code here..."
					/>
					<button
						class="import-code"
						type="button"
						aria-label="Import assessment code"
						data-toast-success="open-assessment-dialog_import-code-toast_success"
						data-toast-failure="open-assessment-dialog_import-code-toast_failure"
						disabled
					>
						Import
					</button>
				</div>
			</fieldset>
		</form>
	</section>

	<hr class="group" />

	<section>
		<h3>Saved Assessments</h3>

		<div
			class="callout"
			data-style="solid"
			data-vibrancy="vivid"
			data-fit="compact"
			data-theme="yellow"
			data-restrict-context="report"
		>
			<div class="icon-container">
				<IconWarningBig />
			</div>
			<div class="text-container">
				<p>
					To view a report, the assessment must be <strong
						>Complete</strong
					>.
				</p>
			</div>
		</div>

		<!-- Success Toast located in Assessors Dialogs -->
		<Toast
			id={"open-assessment-dialog_open-toast_failure"}
			message={`Unable to open assessment. Please reload the page to try again.`}
			colour={"red"}
			type={"failure"}
		>
			<IconWarningSmall slot={"icon"} />
		</Toast>

		<ul
			class="saved-assessments-list elem-group"
			data-fit="compact"
			data-columns="2"
		>
			<template>
				<li class="card" data-theme="red" data-vibrancy="vivid">
					<div
						class="banner"
						data-theme="blue"
						data-vibrancy="vivid"
						data-field="banner"
						hidden
					>
					</div>
					<div class="wrapper">
						<h4 class="heading icon-and-label-container">
							<!-- <IconAssessment /> -->
							<span class="label-container">
								<span class="title" data-field="school"></span>
								<span
									class="subtitle"
									data-field="reportingYear">2025</span
								>
							</span>
						</h4>
						<div class="details">
							<span class="label-group">
								<div
									class="edit-status label-container field-container"
									data-vibrancy="vivid"
									data-style="solid"
								>
									<span class="label" data-field="editStatus"
									></span>
								</div>
								<div
									class="export-status label-container field-container"
									data-theme="red"
									hidden
								>
									<span
										class="label"
										data-field="exportStatus"
										>*Unexported Changes</span
									>
								</div>
							</span>
							<dl data-fit="compact">
								<div class="date-created detail-container">
									<dt>Date Created:</dt>
									<dd data-field="dateCreated"></dd>
								</div>
								<div
									class="date-completed detail-container"
									hidden
								>
									<dt>Date Completed:</dt>
									<dd data-field="dateCompleted"></dd>
								</div>
								<div
									class="date-exported detail-container"
									hidden
								>
									<dt>Date Exported:</dt>
									<dd data-field="dateExported"></dd>
								</div>
								<div
									class="date-modified detail-container"
									hidden
								>
									<dt>Date Modified:</dt>
									<dd data-field="dateModified"></dd>
								</div>
							</dl>
						</div>
						<div class="button-group">
							<button
								class="open-assessment"
								type="button"
								data-size="large"
								data-toast-success="open-assessment-dialog_open-toast_success"
								data-toast-failure="open-assessment-dialog_open-toast_failure"
								hidden>Open</button
							>
							<button
								class="open-assessment change-status"
								type="button"
								data-size="large"
								data-toast-success="open-assessment-dialog_open-toast_success"
								data-toast-failure="open-assessment-dialog_open-toast_failure"
								hidden>Mark Complete and Open</button
							>
							<button
								class="delete open-dialog"
								type="button"
								data-size="large"
								data-theme="red"
								data-vibrancy="vivid"
								aria-label="Delete Assessment"
								data-dialog="deletion-confirmation-dialog"
								data-dialog-context=""
								data-id=""
							>
								<IconTrash />
								<!-- <div class="icon-and-label-container">
									<IconTrash />
									<span class="label-container">
										<span class="label">Delete</span>
									</span>
								</div> -->
							</button>
						</div>
					</div>
				</li>
			</template>
		</ul>
	</section>
</dialog>

<dialog
	id="import-conflict-dialog"
	aria-describedby="import-conflict-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Open Assessment Dialog"><IconXmark /></button
	>

	<h2
		id="import-conflict-dialog_heading"
		class="heading"
		data-default-text="Import Conflict"
	>
		Import Conflict
	</h2>
	<div
		class="callout"
		data-style="solid"
		data-vibrancy="vivid"
		data-fit="compact"
		data-theme="red"
	>
		<div class="icon-container">
			<IconWarningBig />
		</div>
		<div class="text-container">
			<p>
				The imported assessment conflicts with an assessment already
				saved in the browser. <strong
					>Each school can have only one assessment per reporting year</strong
				>.
			</p>
			<p>
				Review the assessment properties below and choose whether to
				keep the saved assessment or overwrite it.
			</p>
		</div>
	</div>
	<template class="highlight">
		<div class="highlight-container" data-theme="red" data-vibrancy="vivid">
			<IconWarningSmall />
			<span>
				<span class="value"></span>
				<span data-screen-reader>, conflicting value</span>
			</span>
		</div>
	</template>
	<div class="conflicting-assessments elem-group" data-columns="2">
		<div class="card local">
			<div class="banner" data-theme="blue" data-vibrancy="vivid">
				Saved
			</div>
			<div class="wrapper">
				<h4 class="heading icon-and-label-container">
					<!-- <IconAssessment /> -->
					<span class="label-container" data-field="school"></span>
				</h4>
				<div class="details">
					<dl data-fit="compact">
						<div class="detail-container">
							<dt>Reporting Year:</dt>
							<dd data-field="reportingYear"></dd>
						</div>
						<div class="detail-container">
							<dt>Status:</dt>
							<dd data-field="status"></dd>
						</div>
						<div class="detail-container">
							<dt>Date Modified:</dt>
							<dd data-field="dateModified"></dd>
						</div>
						<div class="detail-container">
							<dt>Last Modified By:</dt>
							<dd data-field="lastModifiedBy"></dd>
						</div>
					</dl>
				</div>
			</div>
		</div>
		<div class="card imported">
			<div class="banner" data-theme="yellow" data-vibrancy="vivid">
				Imported
			</div>
			<div class="wrapper">
				<h4 class="heading icon-and-label-container">
					<!-- <IconAssessment /> -->
					<span class="label-container" data-field="school"></span>
				</h4>
				<div class="details">
					<dl data-fit="compact">
						<div class="detail-container">
							<dt>Reporting Year:</dt>
							<dd data-field="reportingYear"></dd>
						</div>
						<div class="detail-container">
							<dt>Status:</dt>
							<dd data-field="status"></dd>
						</div>
						<div class="detail-container">
							<dt>Date Modified:</dt>
							<dd data-field="dateModified"></dd>
						</div>
						<div class="detail-container">
							<dt>Last Modified By:</dt>
							<dd data-field="lastModifiedBy"></dd>
						</div>
					</dl>
				</div>
			</div>
		</div>
	</div>

	<!-- Success Toast in Open Assessment Dialog -->
	<Toast
		id={"import-conflict-dialog_overwrite-toast_failure"}
		message={`Unable to overwrite assessment. Please reload the page to try again.`}
		colour={"red"}
		type={"failure"}
	>
		<IconWarningSmall slot={"icon"} />
	</Toast>

	<div class="button-group">
		<button
			class="keep close-dialog"
			type="button"
			data-size="large"
			data-style="outline"
			autofocus>Keep Saved</button
		>
		<button
			class="overwrite"
			type="button"
			data-size="large"
			data-style="solid"
			data-toast-success="import-conflict-dialog_overwrite-toast_success"
			data-toast-failure="import-conflict-dialog_overwrite-toast_failure"
			>Overwrite</button
		>
	</div>
</dialog>

<dialog
	id="deletion-confirmation-dialog"
	aria-describedby="deletion-confirmation-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Open Assessment Dialog"><IconXmark /></button
	>

	<h2
		id="deletion-confirmation-dialog_heading"
		class="heading"
		data-default-text="Delete Assessment"
	>
		Delete Assessment
	</h2>

	<p class="instructions">
		Are you sure you want to delete the <strong>
			<span data-field="reportingYear"></span>
		</strong> assessment for <strong
			><span data-field="school"></span></strong
		>? This action cannot be undone.
	</p>

	<Toast
		id={"deletion-confirmation-dialog_delete-toast_failure"}
		message={`Unable to delete assessment. Please reload the page to try again.`}
		colour={"red"}
		type={"failure"}
	/>

	<div class="button-group">
		<button
			class="cancel open-dialog"
			type="button"
			data-size="large"
			data-style="outline"
			data-dialog="open-assessment-dialog">Cancel</button
		>
		<button
			class="delete"
			type="button"
			data-size="large"
			data-style="solid"
			data-toast-success="deletion-confirmation-dialog_delete-toast_success"
			data-toast-failure="deletion-confirmation-dialog_delete-toast_failure"
			>Delete</button
		>
	</div>
</dialog>

<style is:global>
	/* 
	// Open Assessment Dialog
	*/

	#open-assessment-dialog input[type="file"] {
		font-size: 0.75rem;
		overflow: visible !important;
	}

	#open-assessment-dialog input[type="file"]::file-selector-button {
		overflow: visible !important;
	}

	#open-assessment-dialog section.import form {
		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: 1rem;
	}

	#open-assessment-dialog section.import form fieldset.code {
		flex-grow: 1;
	}

	#open-assessment-dialog section.import form fieldset .heading {
		font-size: 1rem;
		font-weight: 500;
		margin: 0 0 0.5rem;
	}

	#open-assessment-dialog section.import form .separator.item {
		--separator-long-edge-dimension: 2rem;
	}

	#open-assessment-dialog section:not(:has(~ :not([hidden]))) {
		margin-bottom: 0 !important;
	}

	#open-assessment-dialog .saved-assessments-list {
		--group-margin: 0;
	}

	#open-assessment-dialog
		.saved-assessments-list
		.card:has(button.delete:is(:hover, :focus-visible)) {
		outline-color: var(--colour-border-accent-bold);
	}

	#open-assessment-dialog .saved-assessments-list .card .heading {
		--icon-colour: var(--colour-ui-neutral-subtle);
	}

	#open-assessment-dialog .saved-assessments-list .card .button-group {
		--group-gap: 0.5rem;
		margin: 0;
	}

	#open-assessment-dialog .saved-assessments-list .card button {
		--icon-size: 1.25rem;
		--label-size: 1rem;
		padding: 0 0.75rem;
	}

	#open-assessment-dialog .saved-assessments-list .card button.delete {
		min-width: 3rem;
	}

	#open-assessment-dialog
		.saved-assessments-list
		.card
		button.delete:is(:hover, :focus-visible) {
		--icon-colour: var(--colour-ui-reverse);
		--button-background-colour: var(--colour-fill-accent-bold);
	}

	#open-assessment-dialog:not([data-context="report"])
		[data-restrict-context="report"] {
		display: none !important;
	}

	@container card (max-width: 300px) {
		#open-assessment-dialog
			.saved-assessments-list
			.card
			.button-group:has(button.open-assessment:not([hidden]))
			button.delete
			.label-container {
			display: none;
			min-width: 3rem;
		}
		#open-assessment-dialog
			.saved-assessments-list
			.card
			.button-group:has(button.open-assessment:not([hidden]))
			button.delete
			.label-container {
			display: none;
			min-width: 3rem;
		}
	}

	/* 
	// Import Conflict Dialog
	*/

	#import-conflict-dialog:has(button.overwrite:is(:hover, :focus-visible))
		.card.imported {
		outline-color: var(--colour-border-neutral-bold);
	}

	#import-conflict-dialog:has(button.overwrite:is(:hover, :focus-visible))
		.card.local {
		opacity: 0.5;
	}

	#import-conflict-dialog:has(button.keep:is(:hover, :focus-visible))
		.card.local {
		outline-color: var(--colour-border-neutral-bold);
	}

	#import-conflict-dialog:has(button.keep:is(:hover, :focus-visible))
		.card.imported {
		opacity: 0.5;
	}

	.conflicting-assessments {
		--group-margin: 2rem 0;
	}

	.highlight-container {
		--icon-size: 1rem;
		--icon-colour: var(--colour-ui-accent, var(--colour-ui-neutral));

		display: flex;
		flex-flow: row nowrap;
		align-items: start;
		gap: 0.5rem;

		color: var(--colour-ui-accent, var(--colour-ui-neutral));
	}
</style>

<script>
	//
	// Imports
	//

	import {
		findIndexByKey,
		findObjectByKey,
		formatDateAsHTML,
		sanitizeHTML,
	} from "src/utilities/helpers";
	import {
		getUserData,
		getAssessmentName,
		getAssessmentDate,
		getStatusColour,
		setState,
		setAssessment,
		setPreferences,
		importAssessment,
		subscribe,
		decompressData,
		updateChangeLog,
	} from "src/stores/userDataStore";
	import { dialogControl } from "src/utilities/dialog";
	import { toastControl } from "src/utilities/toast";
	import {
		getActiveAssessmentData,
		findAssessmentConflicts,
		setImportConflictData,
		getImportConflictData,
		deleteAssessment,
		generateContinuumCompletion,
		deleteImportConflictData,
	} from "src/stores/userDataStore";
	import { eventControl } from "src/utilities/event";

	//
	// Methods
	//

	let createAssessmentCard = (
		assessment: Assessment,
		active = false,
		context = "assessment",
	) => {
		if (!assessment || assessment === undefined) return;
		let { dateCompleted, dateExported, status, id, unexportedChanges } =
			assessment;

		let template = document.querySelector(
			"#open-assessment-dialog .saved-assessments-list template",
		) as HTMLTemplateElement;

		if (!template) return;

		// Clone the template
		let card = template.content.cloneNode(true) as HTMLElement;

		// Set active status
		let li = card.querySelector("li");
		if (active) li.setAttribute("data-active", "");

		// Set banner attributes
		let banner = card.querySelector(".banner");
		if (active) {
			banner.removeAttribute("hidden");
			if (context === "assessment") {
				banner.setAttribute("data-theme", getStatusColour(assessment));
				banner.textContent =
					status === "In Progress" ? "Editing" : "Reviewing";
			} else if (context === "report") {
				banner.setAttribute("data-theme", getStatusColour(assessment));
				banner.textContent = "Viewing";
			}
		}

		// Set title text
		let schoolField = card.querySelector('[data-field="school"]');
		let reportingYearField = card.querySelector(
			'[data-field="reportingYear"]',
		);
		schoolField.textContent = assessment.school;
		reportingYearField.textContent = assessment.reportingYear;

		// Set edit status field
		let editStatusField = card.querySelector('[data-field="editStatus"]');
		editStatusField
			.closest(".field-container")
			.setAttribute("data-theme", getStatusColour(assessment));
		editStatusField.textContent = status;

		// Set export status field
		if (unexportedChanges && context === "assessment") {
			let exportStatusField = card.querySelector(
				'[data-field="exportStatus"]',
			);
			exportStatusField
				.closest(".field-container")
				.removeAttribute("hidden");
		}

		let setAssessmentDate = ({ card, assessment, type }) => {
			let field = card.querySelector(`[data-field="${type}"]`);
			field.innerHTML = getAssessmentDate({ assessment, type });
			field.closest(".detail-container").removeAttribute("hidden");
		};

		// Set dates
		setAssessmentDate({ card, assessment, type: "dateCreated" });

		if (dateCompleted) {
			setAssessmentDate({ card, assessment, type: "dateCompleted" });
		} else if (dateExported) {
			setAssessmentDate({ card, assessment, type: "dateExported" });
		} else {
			setAssessmentDate({ card, assessment, type: "dateModified" });
		}

		// Show open buttons
		if (!active) {
			if (status === "In Progress" && context === "report") {
				let btn = card.querySelector(
					"button.open-assessment.change-status",
				);
				btn.removeAttribute("hidden");
				btn.setAttribute("data-id", String(id));
			} else {
				let btn = card.querySelector(
					"button.open-assessment:not(.change-status)",
				);
				btn.removeAttribute("hidden");
				btn.setAttribute("data-id", String(id));
			}
		}

		let deleteBtn = card.querySelector("button.delete");
		deleteBtn.setAttribute("data-id", `${assessment.id}`);
		deleteBtn.setAttribute("data-dialog-context", `${assessment.id}`);

		return card;
	};

	let handleAssessmentImport = async (importedAssessment) => {
		let userData = getUserData();
		let localAssessments = userData.assessments;

		// Compare imported assessment to saved assessment to identify conflicts
		let { idConflict, schoolYearConflict } = findAssessmentConflicts({
			importedAssessment,
			localAssessments,
		});

		// If there's a school/year conflict, open import conflict dialog
		if (schoolYearConflict) {
			console.log("School/Year Conflict Detected");

			setImportConflictData({
				importedAssessment,
				localAssessment: schoolYearConflict,
			});

			updateImportConflictDialog({
				importedAssessment,
				localAssessment: schoolYearConflict,
			});

			dialogControl.open({
				dialogId: "import-conflict-dialog",
			});

			return false;
		}

		// If there's an id conflict (but no school/year conflict), assign assessment a new id
		if (idConflict) {
			console.log("ID Conflict Detected");
			let ids = localAssessments.map((a) => a.id).filter(Boolean);
			let newId = ids.length ? Math.max(...ids) + 1 : 1;
			importedAssessment.id = newId;
		}

		// Add missing keys and default values
		importedAssessment.activeAssessor = null;
		importedAssessment.unexportedChanges = false;
		if (importedAssessment.continuumCompletion === undefined) {
			importedAssessment.continuumCompletion =
				await generateContinuumCompletion(importedAssessment);
		}

		// Save assessment to user data
		setAssessment(importedAssessment);

		// Clear out the import conflict data cache
		deleteImportConflictData();

		return true;
	};

	//
	// DOM Updates
	//

	/**
	 * Update the open-assessment dialog UI from stored assessment data
	 * @param data
	 */
	let updateOpenAssessmentDialog = (data: UserData, changes) => {
		let dialog = document.querySelector("#open-assessment-dialog");
		if (!dialog) return;

		let stateTriggerKeys = ["activeAssessmentId", "activeReportId"];
		if (
			!changes.initiating &&
			!(
				changes.assessments ||
				(changes.uiState &&
					stateTriggerKeys.some((val) =>
						changes.uiState.includes(val),
					))
			)
		)
			return;

		let context =
			window.location.pathname === "/report" ? "report" : "assessment";
		let savedAssessmentList = dialog?.querySelector(
			"ul.saved-assessments-list",
		);
		let savedAssessmentListItems =
			savedAssessmentList?.querySelectorAll("li");
		let savedAssessmentsSection = savedAssessmentList.closest("section");
		let hr = dialog.querySelector("hr.group");

		if (!savedAssessmentList) return;

		// Clear out the list
		for (let item of savedAssessmentListItems) item.remove();

		if (data.assessments.length > 0) {
			// Create a shallow copy of the array
			let assessments = [...data.assessments];

			if (context === "assessment") {
				// Sort array of assessments by date modified
				assessments.sort((a, b) => b.dateModified - a.dateModified);
			} else if (context === "report") {
				assessments.sort(
					(a, b) => Number(b.reportingYear) - Number(a.reportingYear),
				);
			}

			let activeId =
				context === "assessment"
					? data.uiState.activeAssessmentId
					: data.uiState.activeReportId;

			if (activeId) {
				// Get the index of the active assessment
				let activeIndex = findIndexByKey(assessments, "id", activeId);

				// Move it to the top of the array, if not already
				if (activeIndex > 0) {
					let [activeItem] = assessments.splice(activeIndex, 1);
					assessments.unshift(activeItem);
				}
			}

			// Create cards for the saved assessments and add them to the DOM
			for (let i = 0; i < assessments.length; i++) {
				let assessment = assessments[i];
				let active = false;

				if (assessment !== null) {
					if (activeId && i === 0) active = true;

					let card = createAssessmentCard(
						assessment,
						active,
						context,
					);

					savedAssessmentList.append(card);
				}
			}
			savedAssessmentsSection.removeAttribute("hidden");
			hr.removeAttribute("hidden");
		} else {
			savedAssessmentsSection.setAttribute("hidden", "");
			hr.setAttribute("hidden", "");
		}
	};

	let updateImportConflictDialog = ({
		importedAssessment,
		localAssessment,
	}) => {
		let dialog = document.querySelector(
			"#import-conflict-dialog",
		) as HTMLDialogElement;
		if (!dialog) return;

		if (!importedAssessment || !localAssessment) return;

		let localCard = dialog.querySelector(".conflicting-assessments .local");
		let importedCard = dialog.querySelector(
			".conflicting-assessments .imported",
		);
		let highlightTemplate = dialog.querySelector(
			"template.highlight",
		) as HTMLTemplateElement;

		let metadataKeys = [
			"school",
			"status",
			"reportingYear",
			"dateModified",
			"lastModifiedBy",
		];

		/**
		 * Compare two objects with the same schema and return keys with mismatched values.
		 * Falsy values (null, undefined, '', 0, false) are considered a match.
		 * @param {Object} objA - The first object to compare
		 * @param {Object} objB - The second object to compare
		 * @returns {string[]} Array of keys whose values differ
		 */
		let getMismatchedKeys = (objA, objB) => {
			let mismatches = [];

			for (let key of metadataKeys) {
				let a = objA[key];
				let b = objB[key];

				// Treat all falsy values as equivalent
				if (!a && !b) continue;

				// Compare strings trimmed, else strict equality
				if (typeof a === "string" && typeof b === "string") {
					if (a.trim() !== b.trim()) mismatches.push(key);
				} else if (a !== b) {
					mismatches.push(key);
				}
			}

			return mismatches;
		};

		let updateCard = (card, assessment) => {
			let mismatchedKeys = getMismatchedKeys(
				localAssessment,
				importedAssessment,
			);

			for (let key of metadataKeys) {
				let field = card.querySelector(`[data-field="${key}"]`);
				if (!field) return;
				let value = assessment[key] || "(none)";
				if (value !== "(none)" && key.startsWith("date"))
					value = formatDateAsHTML(value);

				if (card.matches(".imported") && mismatchedKeys.includes(key)) {
					let highlightContainer =
						highlightTemplate.content.cloneNode(
							true,
						) as HTMLElement;
					highlightContainer.querySelector(".value").innerHTML =
						value;
					field.append(highlightContainer);
				} else {
					field.innerHTML = value;
				}
			}
		};

		updateCard(localCard, localAssessment);
		updateCard(importedCard, importedAssessment);
	};

	let updateDeletionConfirmationDialog = (target) => {
		let dialog = document.querySelector("#deletion-confirmation-dialog");
		if (!dialog) return;

		let assessmentId = target.getAttribute("data-id");
		if (!assessmentId) return;

		let assessment = findObjectByKey(
			getUserData().assessments,
			"id",
			Number(assessmentId),
		);
		if (!assessment) return;

		let reportingYearField = dialog.querySelector(
			'[data-field="reportingYear"]',
		);
		let schoolField = dialog.querySelector('[data-field="school"]');

		reportingYearField.textContent = assessment.reportingYear;
		schoolField.textContent = assessment.school;
	};

	//
	// Inits
	//

	subscribe(updateOpenAssessmentDialog);

	//
	// Event Listeners
	//

	let onOpenAssessmentClick = (event) => {
		let target = event.target as HTMLButtonElement;

		let dialog = target.closest("dialog");
		if (!dialog) return;

		if (target.matches("button.open-assessment")) {
			try {
				let context =
					window.location.pathname === "/report"
						? "report"
						: "assessment";

				if (context === "assessment") {
					let assessment = getActiveAssessmentData();
					if (assessment) {
						// Set existing assessment active assessor to null prior to opening new one
						setAssessment({
							activeAssessor: null,
						});
					}

					setState({
						mode: "assessment",
						activeAssessmentId: Number(
							target.getAttribute("data-id"),
						),
					});

					toastControl.show({ target, type: "success" });

					// Open select assessor dialog
					dialogControl.open({
						dialogId: "assessor-dialog",
						headingText: "Select Active Assessor",
						context: "setup",
					});
				} else if (context === "report") {
					if (target.matches("button.change-status")) {
						setAssessment({
							status: "Complete",
							dateCompleted: Date.now(),
							changeLog: updateChangeLog({
								message: `updated assessment status to completed.`,
							}),
						});
					}

					setState({
						activeReportId: Number(target.getAttribute("data-id")),
					});

					setPreferences({
						reportIncludedIndicators: [
							"1",
							"2",
							"3",
							"4",
							"5",
							"6",
							"7",
						],
					});

					toastControl.show({ target, type: "success" });

					dialogControl.close(dialog);
				}
			} catch (error) {
				console.error(error);
				toastControl.show({ target, type: "failure" });
			}
		}

		if (target.matches("button.import-code")) {
			try {
				let codeInput = target
					.closest("fieldset")
					.querySelector("input");

				let importedCode = sanitizeHTML(codeInput.value);

				if (importedCode.length === 0) {
					throw new Error("Import code is empty");
				}

				let importedAssessment = decompressData(importedCode);
				console.log(
					"Imported Assessment (Code)",
					JSON.parse(JSON.stringify(importedAssessment)),
				);

				let importResult = handleAssessmentImport(importedAssessment);

				if (importResult)
					toastControl.show({ target, type: "success" });
			} catch (error) {
				console.error(error);
				toastControl.show({ target, type: "failure" });
			}
		}

		if (target.matches("button.delete")) {
			updateDeletionConfirmationDialog(target);
		}
	};
	eventControl.add({
		selector: "#open-assessment-dialog",
		eventType: "click",
		fn: onOpenAssessmentClick,
	});

	let onOpenAssessmentChange = async (event) => {
		let target = event.target as any;

		let dialog = target.closest("dialog");
		if (!dialog) return;

		if (target.matches('input[type="file"]')) {
			// Get the user uploaded file
			let file = target.files[0];
			if (!file) return;

			try {
				let importedAssessment = await importAssessment(file);
				console.log(
					"Imported Assessment (File)",
					JSON.parse(JSON.stringify(importedAssessment)),
				);

				let importResult = handleAssessmentImport(importedAssessment);

				if (importResult)
					toastControl.show({ target, type: "success" });
			} catch (error) {
				console.error(error);
				toastControl.show({ target, type: "failure" });
			}

			// Clear user uploaded file, so it can be selected again if needed
			target.value = "";
		}
	};
	eventControl.add({
		selector: "#open-assessment-dialog",
		eventType: "change",
		fn: onOpenAssessmentChange,
	});

	let onOpenAssessmentInput = (event) => {
		let target = event.target as any;

		let dialog = target.closest("dialog");
		if (!dialog) return;

		if (target.matches('[type="text"][name="import-code"]')) {
			let importBtn = target
				.closest("fieldset")
				.querySelector("button.import-code");

			if (target.value.length > 0) {
				importBtn.removeAttribute("disabled");
			} else {
				importBtn.setAttribute("disabled", "");
			}
		}
	};
	eventControl.add({
		selector: "#open-assessment-dialog",
		eventType: "input",
		fn: onOpenAssessmentInput,
	});

	let onOpenAssessmentKeydown = (event) => {
		let target = event.target as HTMLInputElement;

		if (target.matches(`input[type="text"]`)) {
			if (event.key === "Enter") event.preventDefault();
		}
	};
	eventControl.add({
		selector: "#open-assessment-dialog",
		eventType: "keydown",
		fn: onOpenAssessmentKeydown,
	});

	let onImportConflictClick = async (event) => {
		let target = event.target as any;

		let dialog = target.closest("dialog");
		if (!dialog) return;

		if (target.matches("button.overwrite")) {
			try {
				let { importedAssessment, localAssessment } =
					getImportConflictData();
				if (!importedAssessment || !localAssessment) return;

				// Make sure the ids match
				importedAssessment.id = localAssessment.id;

				deleteAssessment(localAssessment.id);

				// Add missing keys and default values
				importedAssessment.activeAssessor = null;
				importedAssessment.unexportedChanges = false;
				if (importedAssessment.continuumCompletion === undefined) {
					importedAssessment.continuumCompletion =
						await generateContinuumCompletion(importedAssessment);
				}

				// Save assessment to user data
				setAssessment(importedAssessment);

				// Clear out the import conflict data cache
				deleteImportConflictData();

				toastControl.show({ target, type: "success" });

				dialogControl.open({
					dialogId: "open-assessment-dialog",
				});
			} catch (error) {
				console.error(error);
				toastControl.show({ target, type: "failure" });
			}
		}

		if (target.matches("button.keep")) {
			deleteImportConflictData();
		}
	};
	eventControl.add({
		selector: "#import-conflict-dialog",
		eventType: "click",
		fn: onImportConflictClick,
	});

	let onDeletionConfirmationClick = async (event) => {
		let target = event.target as any;

		let dialog = target.closest("dialog");
		if (!dialog) return;

		if (target.matches("button.delete")) {
			try {
				let assessmentId = Number(dialog.getAttribute("data-context"));

				deleteAssessment(assessmentId);

				toastControl.show({ target, type: "success" });

				dialogControl.open({
					dialogId: "open-assessment-dialog",
				});
			} catch (error) {
				console.error(error);
				toastControl.show({ target, type: "failure" });
			}
		}
	};
	eventControl.add({
		selector: "#deletion-confirmation-dialog",
		eventType: "click",
		fn: onDeletionConfirmationClick,
	});
</script>
