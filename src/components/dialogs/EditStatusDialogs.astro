---
import IconWarningBig from "src/components/icons/IconWarning_24.astro";
import IconXmark from "src/components/icons/IconXmark_20.astro";
import Toast from "src/components/Toast.astro";
import IconCheckmark from "../icons/IconCheckmark_12.astro";
import IconWarningSmall from "../icons/IconWarning_16.astro";
---

<dialog
	id="edit-status-dialog"
	aria-describedby="edit-status-dialog_heading"
	data-context="configure"
>
	<button class="close-dialog" type="button" aria-label="Close Warning Dialog"
		><IconXmark /></button
	>

	<h2
		id="edit-status-dialog_heading"
		class="heading"
		data-default-text="Update Assessment Status"
	>
		Update Assessment Status
	</h2>
	<p id="edit-status-dialog_in-progress-instructions" class="instructions">
		This assessment is marked as <strong>In Progress</strong>. Mark it as <strong
			>Complete</strong
		> to lock editing and make it available on the Report page.
	</p>
	<p
		id="edit-status-dialog_complete-instructions"
		class="instructions"
		hidden
	>
		This assessment is marked as <strong>Complete</strong>. Mark it as <strong
			>In Progress</strong
		> to unlock editing.
	</p>

	<!-- Success Toast located in Assessment Dialogs -->
	<Toast
		id={"edit-status-dialog_change-status-toast_failure"}
		message={`Unable to save. Please reload the page to try again.`}
		colour={"red"}
		type={"failure"}
	>
		<IconWarningSmall slot={"icon"} />
	</Toast>

	<div class="button-group">
		<button
			class="close-dialog"
			type="button"
			data-size="large"
			data-style="outline"
			data-restrict-context="configure"
			autofocus>Cancel</button
		>
		<button
			class="close-dialog"
			type="button"
			data-size="large"
			data-style="outline"
			data-restrict-context="close"
			autofocus>Skip</button
		>
		<button
			class="change-status"
			type="button"
			data-style="solid"
			data-size="large"
			data-toast-success="edit-status-dialog_change-status-toast_success"
			data-toast-failure="edit-status-dialog_change-status-toast_failure"
			aria-describedby="edit-status-dialog_in-progress-instructions"
			>Mark as Complete</button
		>
	</div>
</dialog>

<dialog
	id="status-warning-dialog"
	aria-describedby="status-warning-dialog_heading"
>
	<button class="close-dialog" type="button" aria-label="Close Warning Dialog"
		><IconXmark /></button
	>

	<h2
		id="status-warning-dialog_heading"
		class="heading"
		data-default-text="Reopen Assessment for Editing?"
	>
		Reopen Assessment for Editing?
	</h2>

	<div
		class="callout"
		data-style="solid"
		data-vibrancy="vivid"
		data-fit="compact"
		data-theme="yellow"
	>
		<div class="icon-container">
			<IconWarningBig />
		</div>
		<div class="text-container">
			<p>
				This assessment is marked as <strong>Complete</strong>. To make
				changes, its status will be updated to <strong
					>In Progress</strong
				>.
			</p>
		</div>
	</div>

	<p class="instructions">Do you want to continue?</p>

	<!-- Success Toast located in Assessor Dialogs -->
	<Toast
		id={"status-warning-dialog_change-status-toast_failure"}
		message={`Unable to change status. Please reload the page to try again.`}
		colour={"red"}
		type={"failure"}
	>
		<IconWarningSmall slot={"icon"} />
	</Toast>

	<div class="button-group">
		<button
			class="close-dialog"
			type="button"
			data-size="large"
			data-style="outline"
			autofocus>Cancel</button
		>
		<button
			class="change-status"
			type="button"
			data-style="solid"
			data-size="large"
			data-toast-success="status-warning-dialog_change-status-toast_success"
			data-toast-failure="status-warning-dialog_change-status-toast_failure"
			>Edit Assessment</button
		>
	</div>
</dialog>

<script>
	//
	// Imports
	//

	import {
		getActiveAssessmentData,
		setState,
		setAssessment,
		subscribe,
		updateChangeLog,
	} from "src/stores/userDataStore";
	import { dialogControl } from "src/utilities/dialog";
	import { eventControl } from "src/utilities/event";
	import { toastControl } from "src/utilities/toast";

	//
	// DOM Updates
	//

	let updateEditStatusDialog = (data: UserData, changes) => {
		let dialog = document.querySelector(
			"#edit-status-dialog",
		) as HTMLDialogElement;
		if (!dialog) return;

		let stateTriggerKeys = ["activeAssessmentId"];
		let assessmentTriggerKeys = ["status"];
		if (
			!changes.initiating &&
			!(
				(changes.assessments &&
					assessmentTriggerKeys.some((val) =>
						changes.assessments.includes(val),
					)) ||
				(changes.uiState &&
					stateTriggerKeys.some((val) =>
						changes.uiState.includes(val),
					))
			)
		)
			return;

		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		// console.log("Updating Dialog (status)");

		let isComplete = assessment.status === "Complete";

		let completeInstructions = dialog.querySelector(
			"#edit-status-dialog_complete-instructions",
		);
		let inProgressInstructions = dialog.querySelector(
			"#edit-status-dialog_in-progress-instructions",
		);
		completeInstructions.toggleAttribute("hidden", !isComplete);
		inProgressInstructions.toggleAttribute("hidden", isComplete);

		let btn = dialog.querySelector("button.change-status");

		btn.textContent = isComplete
			? "Mark as In Progress"
			: "Mark as Complete";
		btn.setAttribute(
			"aria-describedby",
			isComplete
				? "edit-status-dialog_complete-instructions"
				: "edit-status-dialog_in-progress-instructions",
		);
	};

	//
	// Inits
	//

	subscribe(updateEditStatusDialog);

	//
	// Event Listeners
	//

	let onEditStatusClick = (event) => {
		let target = event.target as HTMLButtonElement;
		let dialog = target.closest("dialog") as HTMLDialogElement;

		if (target.matches("button.change-status")) {
			try {
				let assessment = getActiveAssessmentData();

				let { status } = assessment;
				let newStatus =
					status === "In Progress" ? "Complete" : "In Progress";

				setAssessment({
					status: newStatus,
					dateCompleted:
						newStatus === "In Progress" ? null : Date.now(),
					changeLog: updateChangeLog({
						message: `updated assessment status to ${newStatus.toLowerCase()}.`,
					}),
				});

				if (newStatus === "In Progress") {
					setState({
						activeReportId: null,
					});
				}

				if (dialog.getAttribute("data-context") === "close") {
					if (assessment.unexportedChanges) {
						toastControl.show({
							target,
							type: "success",
							selector:
								"edit-status-dialog_change-status-and-warn-toast_success",
						});
						dialogControl.open({
							dialogId: "export-warning-dialog",
						});
					} else {
						try {
							setAssessment({
								activeAssessor: null,
							});
							setState({
								mode: "reading",
								activeAssessmentId: null,
							});

							toastControl.show({
								target,
								type: "success",
								selector:
									"edit-status-dialog_change-status-and-close-toast_success",
							});
							dialog.close();
						} catch (error) {
							console.error(error);
							toastControl.show({ target, type: "failure" });
						}
					}
				} else {
					toastControl.show({ target, type: "success" });
					dialog.close();
				}
			} catch (error) {
				console.error(error);
				toastControl.show({ target, type: "failure" });
			}
		}

		if (target.matches("button.close-dialog")) {
			if (dialog.getAttribute("data-context") === "close") {
				let activeAssessment = getActiveAssessmentData();
				if (activeAssessment.unexportedChanges) {
					dialogControl.open({
						dialogId: "export-warning-dialog",
						context: "close",
					});
				} else {
					setAssessment({
						activeAssessor: null,
					});
					setState({
						mode: "reading",
						activeAssessmentId: null,
					});
					toastControl.show({
						target,
						type: "success",
						selector: "edit-status-dialog_close-toast_success",
					});
					dialog.close();
				}
			}
		}
	};
	eventControl.add({
		selector: "#edit-status-dialog",
		eventType: "click",
		fn: onEditStatusClick,
	});

	let onStatusWarningClick = (event) => {
		let target = event.target as HTMLButtonElement;

		if (target.matches("button.change-status")) {
			try {
				setAssessment({
					status: "In Progress",
					dateCompleted: null,
					changeLog: updateChangeLog({
						message: `updated assessment status to in progress.`,
					}),
				});

				toastControl.show({ target, type: "success" });

				setState({
					mode: "assessment",
					activeReportId: null,
				});

				dialogControl.open({
					dialogId: "assessor-dialog",
					headingText: "Select Active Assessor",
					context: "setup",
				});
			} catch (error) {
				console.error(error);
				toastControl.show({ target, type: "failure" });
			}
		}
	};
	eventControl.add({
		selector: "#status-warning-dialog",
		eventType: "click",
		fn: onStatusWarningClick,
	});
</script>
