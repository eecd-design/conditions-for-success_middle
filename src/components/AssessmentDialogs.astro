---
import IconCross from "./icons/IconCross_16.astro";
import IconWarningBig from "./icons/IconWarning_24.astro";
import IconCaretDown from "./icons/IconCaretDown_14.astro";
import IconCopy from "./icons/IconCopy_20.astro";
import IconXmark from "./icons/IconXmark_20.astro";
import IconWarningSmall from "./icons/IconWarning_16.astro";

let schoolList = {
	east: [
		"Alternative Pathways to Graduation",
		"Arnold H. McLeod School",
		"Beaverbrook School",
		"Bernice MacNaughton High School",
		"Bessborough School",
		"Birchmount School",
		"Caledonia Regional High School",
		"Claude D. Taylor School",
		"Dorchester Consolidated School",
		"Edith Cavell School",
		"Evergreen Park School",
		"Forest Glen School",
		"Frank L. Bowser School",
		"Harrison Trimble High School",
		"Havelock School",
		"Hillsborough Elementary School",
		"Lewisville Middle School",
		"Lou MacNarin School",
		"Magnetic Hill School",
		"Maplehurst Middle School",
		"Marshview Middle School",
		"Moncton High School",
		"Mountain View School",
		"Northrop Frye School",
		"Petitcodiac Regional School",
		"Port Elgin Regional School",
		"Queen Elizabeth School",
		"Riverside Consolidated School",
		"Riverview East School",
		"Riverview High School",
		"Riverview Middle School",
		"Salem Elementary School",
		"Salisbury Elementary School",
		"Salisbury Regional School",
		"Shediac Cape School",
		"Sunny Brae Middle School",
		"Tantramar Regional High School",
		"Wabanaki School",
		"West Riverview School",
	],
	north: [
		"Bathurst High School",
		"Bathurst Transition Center",
		"Bengals II",
		"Blackville School",
		"Bonar Law Memorial School",
		"Campbellton Learning Center",
		"Campbellton Middle School",
		"Dalhousie Learning Center",
		"Dalhousie Regional High School",
		"Dr. Losier Middle School",
		"Eleanor W. Graham Middle School",
		"Gretna Green School",
		"Harcourt School",
		"Jacquet River School",
		"James M. Hill Memorial High School",
		"Janeville Elementary School",
		"King Street Elementary School",
		"L.E. Reinsborough School",
		"Lord Beaverbrook School",
		"Max Aitken Academy",
		"Millerton Elementary & Junior High School",
		"Miramichi Rural School",
		"Miramichi Valley High School",
		"Napan Elementary School",
		"Nelson Rural School",
		"North & South Esk Elementary School",
		"North & South Esk Regional High School",
		"Parkwood Heights Elementary School",
		"Pulamoo II",
		"Rexton Elementary School",
		"Sugarloaf Senior High School",
		"Superior Middle School",
		"Tabusintac Community School",
		"Terry Fox Elementary School",
		"Tommies II",
	],
	south: [
		"Apohaqui Elementary School",
		"Back Bay Elementary School",
		"Barnhill Memorial School",
		"Bayside Middle School",
		"Bayview School",
		"Beaconsfield Middle School",
		"Belleisle Elementary School",
		"Belleisle Regional High School",
		"Blacks Harbour School",
		"Campobello Island Consolidated School",
		"Centennial School",
		"Champlain Heights School",
		"Chris Saunders Memorial Elementary School",
		"Compass Education Support Program-Saint John",
		"Compass Education Support Program-Sussex",
		"Deer Island Community School",
		"Dr. A. T. Leatherbarrow Primary School",
		"Fairvale Elementary School",
		"Forest Hills School",
		"Fundy Middle and High School",
		"Fundy Shores School",
		"Glen Falls School",
		"Grand Bay Primary School",
		"Grand Manan Community School",
		"Hammond River Valley Elementary School",
		"Hampton Elementary School",
		"Hampton High School",
		"Hampton Middle School",
		"Harbour View High School",
		"Harry Miller Middle School",
		"Hazen-White-St. Francis School",
		"Inglewood School",
		"Island View School",
		"Kennebecasis Park Elementary School",
		"Kennebecasis Valley High School",
		"Lakefield Elementary School",
		"Lakewood Heights School",
		"Lawrence Station Elementary School",
		"Loch Lomond School",
		"M. Gerald Teed Memorial School",
		"Macdonald Consolidated School",
		"Millidgeville North School",
		"Milltown Elementary School",
		"Norton Elementary School",
		"Prince Charles School",
		"Princess Elizabeth School",
		"Quispamsis Elementary School",
		"Quispamsis Middle School",
		"River Valley Middle School",
		"Rothesay Elementary School",
		"Rothesay High School",
		"Rothesay Park School",
		"Saint John High School",
		"Saint Rose School",
		"Seaside Park Elementary School",
		"Simonds High School",
		"Sir James Dunn Academy",
		"St. George Elementary School",
		"St. John the Baptist/King Edward School",
		"St. Malachy's Memorial High School",
		"St. Martins School",
		"St. Stephen Elementary School",
		"St. Stephen High School",
		"St. Stephen Middle School",
		"Sussex Corner Elementary School",
		"Sussex Elementary School",
		"Sussex Middle School",
		"Sussex Regional High School",
		"Vincent Massey Elementary School",
		"Westfield School",
		"White Head Elementary School",
	],
	west: [
		"Andover Elementary School",
		"Assiniboine Avenue Elementary School",
		"Barkers Point Elementary School",
		"Bath Community School",
		"Bliss Carman Middle School",
		"Bristol Elementary School",
		"Burton Elementary School",
		"Cambridge-Narrows Community School",
		"Canterbury High School",
		"Carleton North High School",
		"Central New Brunswick Academy",
		"Centreville Community School",
		"Chipman Elementary School",
		"Chipman Forest Avenue School",
		"Connaught Street School",
		"Cuffman Street Elementary",
		"Devon Middle School",
		"Doaktown Elementary School",
		"Donald Fraser Memorial School",
		"Florenceville Elementary School",
		"Florenceville Middle School",
		"Forest Hill Elementary School",
		"Fredericton Education Centre (Enterprise Centre)",
		"Fredericton High School",
		"Gagetown School",
		"Garden Creek School",
		"Geary Elementary Community School",
		"George Street Middle School",
		"Gesner Street Elementary School",
		"Gibson-Neill Memorial Elementary School",
		"Hanwell Park Academy",
		"Harold Peterson Middle School",
		"Hartland Community School",
		"Harvey Elementary School",
		"Harvey High School",
		"Hubbard Elementary School",
		"John Caldwell School",
		"Keswick Ridge School",
		"Keswick Valley Memorial School",
		"Kingsclear Community School",
		"Leo Hayes High School",
		"Lincoln Elementary Community School",
		"Liverpool Street Elementary School",
		"McAdam Elementary School",
		"McAdam High School",
		"Meduxnekeag Consolidated School",
		"Minto Elementary Middle School",
		"Minto Memorial High School",
		"Montgomery Street Elementary School",
		"Nackawic Elementary School",
		"Nackawic Middle School",
		"Nackawic Senior High School",
		"Nashwaak Valley School",
		"Nashwaaksis Middle School",
		"New Maryland Elementary School",
		"Oromocto High School",
		"Park Street Elementary School",
		"Perth-Andover Middle School",
		"Priestman Street Elementary School",
		"Ridgeview Middle School",
		"Royal Road Elementary School",
		"Saint Mary's Academy",
		"Southern Victoria High School",
		"Stanley Consolidated School",
		"Summerhill Street Elementary School",
		"Sunbury West School",
		"Sunset Acres Elementary School",
		"Tobique Valley High School",
		"Townsview School",
		"Upper Miramichi Elementary School",
		"Woodstock High School",
	],
};
---

<dialog
	id="create-assessment-dialog"
	aria-labelledby="create-assessment-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Create Assessment Dialog"><IconXmark /></button
	>

	<h2 id="create-assessment-dialog_heading" class="heading">
		Create New Assessment
	</h2>

	<div
		class="callout"
		data-style="shading"
		data-vibrancy="vivid"
		data-fit="compact"
		data-theme="yellow"
	>
		<div class="icon-container">
			<IconWarningBig />
		</div>

		<div class="text-container">
			<p>
				All information collected below is used exclusively for report
				generation and is not stored on a central server.
			</p>
		</div>
	</div>

	<form data-clear-lists>
		<fieldset>
			<label for="create-assessment-dialog_district-select"
				>School District</label
			>
			<div class="select-container">
				<select
					id="create-assessment-dialog_district-select"
					name="district"
					aria-describedby="create-assessment-dialog_district-select_error"
					required
				>
					<option value="">Select a district...</option>
					<option value="ASD-W">ASD-W</option>
					<option value="ASD-N">ASD-N</option>
					<option value="ASD-E">ASD-E</option>
					<option value="ASD-S">ASD-S</option>
				</select>
				<IconCaretDown />
			</div>
			<p id="create-assessment-dialog_district-select_error" class="error-status" role="status" hidden>
				<IconWarningSmall />
				<span>Please select a school district from the list.</span
				>
			</p>
		</fieldset>

		<fieldset>
			<label for="create-assessment-dialog_school-select">School</label>
			<div class="select-container">
				<select
					id="create-assessment-dialog_school-select"
					name="school"
					required
					disabled
				>
					<option value="">Select a school...</option>
					<optgroup
						label="ASD-W Schools"
						class="asd-w-schools"
						hidden
					>
						{
							schoolList.west.map((school) => (
								<option value={school}>{school}</option>
							))
						}
					</optgroup>
					<optgroup
						label="ASD-N Schools"
						class="asd-n-schools"
						hidden
					>
						{
							schoolList.north.map((school) => (
								<option value={school}>{school}</option>
							))
						}
					</optgroup>
					<optgroup
						label="ASD-E Schools"
						class="asd-e-schools"
						hidden
					>
						{
							schoolList.east.map((school) => (
								<option value={school}>{school}</option>
							))
						}
					</optgroup>
					<optgroup
						label="ASD-S Schools"
						class="asd-s-schools"
						hidden
					>
						{
							schoolList.south.map((school) => (
								<option value={school}>{school}</option>
							))
						}
					</optgroup>
				</select>
				<IconCaretDown />
			</div>
			<p id="create-assessment-dialog_school-select_error" class="error-status" role="status" hidden>
				<IconWarningSmall />
				<span>Please select a school from the list.</span
				>
			</p>
		</fieldset>

		<fieldset>
			<label for="create-assessment-dialog_reporting-year-input"
				>Reporting Year</label
			>
			<p
				id="create-assessment-dialog_reporting-year-input_help"
				class="instructions"
			>
				Enter a 4-digit year (e.g., 2025).
			</p>
			<div class="input-container">
				<input
					id="create-assessment-dialog_reporting-year-input"
					name="reportingYear"
					type="text"
					required
					placeholder="Enter a year..."
					pattern="\\d{4}"
					aria-describedby="create-assessment-dialog_reporting-year-input_help, create-assessment-dialog_reporting-year-input_error"
				/>
			</div>
			<p id="create-assessment-dialog_reporting-year-input_error" class="error-status" role="status" hidden>
				<IconWarningSmall />
				<span>Please enter a valid year.</span
				>
			</p>
		</fieldset>

		<fieldset>
			<label for="create-assessment-dialog_assessor-input"
				>Assessor(s)</label
			>
			<div class="input-container">
				<input
					id="create-assessment-dialog_assessor-input"
					class="assessor"
					type="text"
					placeholder="Enter a name..."
				/>
				<button class="add-assessor" type="button">
					<span class="icon-and-label-container">
						<IconCross />
						<span class="label-container">
							<span class="label"> Add </span>
						</span>
					</span>
				</button>
			</div>
			<ul class="assessor-list" data-field="assessors" hidden></ul>
		</fieldset>

		<div class="button-group">
			<button
				class="close-dialog"
				type="button"
				data-size="large"
				data-style="outline">Cancel</button
			>
			<button
				class="create-assessment"
				type="button"
				data-size="large"
				data-style="bold">Create and Start Editing</button
			>
		</div>
	</form>
</dialog>

<dialog
	id="select-assessor-dialog"
	aria-describedby="select-assessor-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Select Assessor Dialog"><IconXmark /></button
	>

	<h2 id="select-assessor-dialog_heading" class="heading">
		Select Active Assessor
	</h2>
	<p class="instructions">
		Choose the person currently making changes to this assessment.
	</p>
	<p class="instructions">
		This helps maintain clear version history and makes it easier to
		understand who last updated the data when it's shared with others.
	</p>

	<div
		class="callout"
		data-style="shading"
		data-vibrancy="vivid"
		data-fit="compact"
		data-theme="yellow"
	>
		<div class="icon-container">
			<IconWarningBig />
		</div>
		<div class="text-container">
			<p>
				This step is optional, but recommended for collaborative
				workflows.
			</p>
		</div>
	</div>

	<form>
		<fieldset>
			<legend>Active Assessor</legend>
			<div class="radio-group assessor-radio-group"></div>
		</fieldset>

		<div class="button-group">
			<button
				class="close-dialog"
				type="button"
				data-size="large"
				data-style="outline">Skip</button
			>
			<button
				class="update-assessor"
				type="button"
				data-size="large"
				data-style="bold">Save</button
			>
		</div>
	</form>
</dialog>

<dialog
	id="change-assessor-dialog"
	aria-describedby="change-assessor-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Change Assessor Dialog"><IconXmark /></button
	>

	<h2 id="change-assessor-dialog_heading" class="heading">
		Change Active Assessor
	</h2>
	<p class="instructions">
		Choose the person currently making changes to this assessment.
	</p>
	<p class="instructions">
		This helps maintain clear version history and makes it easier to
		understand who last updated the data when it's shared with others.
	</p>

	<form>
		<fieldset>
			<legend>Active Assessor</legend>
			<div class="radio-group assessor-radio-group"></div>
		</fieldset>

		<button
			class="update-assessor"
			type="button"
			data-size="large"
			data-style="bold">Save</button
		>
	</form>
</dialog>

<dialog
	id="info-assessment-dialog"
	aria-describedby="info-assessment-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Assessment Information Dialog"><IconXmark /></button
	>

	<h2 id="info-assessment-dialog_heading" class="heading">
		Assessment Information
	</h2>

	<div
		class="callout"
		data-style="shading"
		data-vibrancy="vivid"
		data-fit="compact"
	>
		<div class="label-group">
			<div class="edit-status label-container field-container" data-style="shading">
				<span class="label" data-field="status"></span>
			</div>
			<div class="export-status label-container" hidden>
				<span class="label">*Unexported Changes</span>
			</div>
		</div>
		<dl data-fit="compact">
			<div class="detail-container field-container">
				<dt>Date Created:</dt>
				<dd data-field="dateCreated"></dd>
			</div>

			<div class="detail-container field-container">
				<dt>Date Modified:</dt>
				<dd data-field="dateModified"></dd>
			</div>

			<div class="detail-container field-container" hidden>
				<dt>Date Exported:</dt>
				<dd data-field="dateExported"></dd>
			</div>

			<div class="detail-container field-container" data-restrict-assessor="true">
				<dt>Active Assessor:</dt>
				<dd data-field="activeAssessor"></dd>
			</div>
		</dl>
	</div>

	<dl>
		<div class="detail-container">
			<dt>School District:</dt>
			<dd data-field="district"></dd>
		</div>
		<div class="detail-container">
			<dt>School:</dt>
			<dd data-field="school"></dd>
		</div>
		<div class="detail-container">
			<dt>Reporting Year:</dt>
			<dd data-field="reportingYear"></dd>
		</div>
		<div class="detail-container">
			<dt>Assessor(s):</dt>
			<dd data-field="assessors"></dd>
		</div>
	</dl>

	<button
		class="open-dialog"
		data-dialog="update-assessment-dialog"
		type="button"
		data-size="large"
		data-style="bold">Update Information</button
	>
</dialog>

<dialog
	id="update-assessment-dialog"
	aria-describedby="update-assessment-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Update Assessment Information Dialog"
		><IconXmark /></button
	>

	<h2 id="update-assessment-dialog_heading" class="heading">
		Update Information
	</h2>

	<form>
		<fieldset>
			<legend>Status</legend>
			<div class="radio-group">
				<div class="radio-container">
					<input
						type="radio"
						name="status"
						id="update-assessment-dialog_status-radio_in-progress"
						value="In Progress"
						checked
					/>
					<label
						for="update-assessment-dialog_status-radio_in-progress"
						>In Progress</label
					>
				</div>
				<div class="radio-container">
					<input
						type="radio"
						name="status"
						id="update-assessment-dialog_status-radio_complete"
						value="Complete"
					/>
					<label for="update-assessment-dialog_status-radio_complete"
						>Complete</label
					>
				</div>
			</div>
		</fieldset>

		<fieldset>
			<label for="update-assessment-dialog_district-select"
				>School District</label
			>
			<div class="select-container">
				<select
					name="district"
					id="update-assessment-dialog_district-select"
				>
					<option value="">Select a district...</option>
					<option value="ASD-W">ASD-W</option>
					<option value="ASD-N">ASD-N</option>
					<option value="ASD-E">ASD-E</option>
					<option value="ASD-S">ASD-S</option>
				</select>
				<IconCaretDown />
			</div>
			<p id="update-assessment-dialog_district-select_error" class="error-status" role="status" hidden>
				<IconWarningSmall />
				<span>Please select a school district from the list.</span
				>
			</p>
		</fieldset>

		<fieldset>
			<label for="update-assessment-dialog_school-select">School</label>
			<div class="select-container">
				<select
					name="school"
					id="update-assessment-dialog_school-select"
				>
					<option value="">Select a school...</option>
					<optgroup
						label="ASD-W Schools"
						class="asd-w-schools"
						hidden
					>
						{
							schoolList.west.map((school) => (
								<option value={school}>{school}</option>
							))
						}
					</optgroup>
					<optgroup
						label="ASD-N Schools"
						class="asd-n-schools"
						hidden
					>
						{
							schoolList.north.map((school) => (
								<option value={school}>{school}</option>
							))
						}
					</optgroup>
					<optgroup
						label="ASD-E Schools"
						class="asd-e-schools"
						hidden
					>
						{
							schoolList.east.map((school) => (
								<option value={school}>{school}</option>
							))
						}
					</optgroup>
					<optgroup
						label="ASD-S Schools"
						class="asd-s-schools"
						hidden
					>
						{
							schoolList.south.map((school) => (
								<option value={school}>{school}</option>
							))
						}
					</optgroup>
				</select>
				<IconCaretDown />
			</div>
			<p id="update-assessment-dialog_school-select_error" class="error-status" role="status" hidden>
				<IconWarningSmall />
				<span>Please select a school from the list.</span
				>
			</p>
		</fieldset>

		<fieldset>
			<label for="update-assessment-dialog_reporting-year-input"
				>Reporting Year</label
			>
			<p class="instructions">Year must be 4 characters in length.</p>
			<div class="input-container">
				<input
					id="update-assessment-dialog_reporting-year-input"
					name="reportingYear"
					type="text"
					required
					placeholder="Enter a year..."
					pattern="\\d{4}"
				/>
			</div>
			<p id="update-assessment-dialog_reporting-year-input_error" class="error-status" role="status" hidden>
				<IconWarningSmall />
				<span>Please enter a valid year.</span
				>
			</p>
		</fieldset>

		<fieldset>
			<label for="update-assessment-dialog_assessor-input"
				>Assessor(s)</label
			>
			<div class="input-container">
				<input
					id="update-assessment-dialog_assessor-input"
					class="assessor"
					type="text"
					placeholder="Enter a name..."
				/>
				<button class="add-assessor" type="button">
					<span class="icon-and-label-container">
						<IconCross />
						<span class="label-container">
							<span class="label"> Add </span>
						</span>
					</span>
				</button>
			</div>
			<ul class="assessor-list" data-field="assessors" hidden></ul>
		</fieldset>

		<div class="button-group">
			<button
				class="close-dialog"
				type="button"
				data-size="large"
				data-style="outline">Cancel</button
			>
			<button
				class="update-assessment"
				type="button"
				data-size="large"
				data-style="bold">Save</button
			>
		</div>
	</form>
</dialog>

<dialog
	id="open-assessment-dialog"
	aria-describedby="open-assessment-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Open Assessment Dialog"><IconXmark /></button
	>

	<h2 id="open-assessment-dialog_heading" class="heading">Open Assessment</h2>

	<section>
		<h3>Import</h3>
		<div class="button-group">
			<button
				class="import-file"
				type="button"
				data-size="large"
				data-style="bold"
				disabled>Upload .csv</button
			>
			<button
				id="import-url"
				type="button"
				data-size="large"
				data-style="bold"
				disabled>Paste URL</button
			>
		</div>
	</section>

	<section>
		<h3>Saved Assessments</h3>
		<ul class="saved-assessments card-group"></ul>
	</section>
</dialog>

<dialog
	id="status-warning-dialog"
	aria-describedby="status-warning-dialog_heading"
>
	<button class="close-dialog" type="button" aria-label="Close Warning Dialog"
		><IconXmark /></button
	>

	<h2 id="status-warning-dialog_heading" class="heading">
		Reopen Assessment for Editing?
	</h2>

	<div
		class="callout"
		data-style="shading"
		data-vibrancy="vivid"
		data-fit="compact"
		data-theme="yellow"
	>
		<div class="icon-container">
			<IconWarningBig />
		</div>
		<div class="text-container">
			<p>
				This assessment is currently marked as <strong>Complete</strong
				>. To make changes, its status will be updated to <strong
					>In Progress</strong
				>.
			</p>
			<!-- <p>Do you want to continue?</p> -->
		</div>
	</div>

	<p class="instructions">Do you want to continue?</p>

	<div class="button-group">
		<button
			class="close-dialog"
			type="button"
			data-size="large"
			data-style="outline">Cancel</button
		>
		<button
			class="open-dialog"
			data-dialog="select-assessor-dialog"
			type="button"
			data-size="large"
			data-style="bold">Edit Assessment</button
		>
	</div>
</dialog>

<!-- TODO: Import export date and fix margin for p when alone -->

<dialog
	id="export-warning-dialog"
	aria-describedby="export-warning-dialog_heading"
>
	<button class="close-dialog" type="button" aria-label="Close Warning Dialog"
		><IconXmark /></button
	>

	<h2 id="export-warning-dialog_heading" class="heading">
		Unexported Changes
	</h2>

	<div
		class="callout"
		data-style="shading"
		data-vibrancy="vivid"
		data-fit="compact"
		data-theme="yellow"
	>
		<div class="icon-container">
			<IconWarningBig />
		</div>
		<div class="text-container">
			<p>You've made changes that haven't been exported.</p>
			<dl data-fit="compact" hidden>
				<dt>Last Export:</dt>
				<dd data-field="dateExported"></dd>
			</dl>
		</div>
	</div>

	<p class="instructions">
		Make sure to export a backup if you want to keep your edits.
	</p>

	<div class="button-group">
		<button
			class="close-dialog"
			type="button"
			data-size="large"
			data-style="outline">Continue Without Exporting</button
		>
		<button
			class="open-dialog"
			data-dialog="export-assessment-dialog"
			type="button"
			data-size="large"
			data-style="bold">Export Changes</button
		>
	</div>
</dialog>

<dialog
	id="export-assessment-dialog"
	aria-describedby="export-assessment-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Export Assessment Dialog"><IconXmark /></button
	>

	<h2 id="export-assessment-dialog_heading" class="heading">
		Export Assessment(s)
	</h2>

	<section>
		<h3>Update Status</h3>
		<!-- TODO: Should this update status, be more along the line of a single button - Mark Assessment Complete. If so, would we omit this section if the status is set to complete, or would users expect to find it here?  -->
		<form>
			<fieldset>
				<!-- <legend>Status</legend> -->
				<div class="radio-group">
					<div class="radio-container" data-theme="blue">
						<input
							type="radio"
							name="status"
							id="export-assessment-dialog_status-radio_in-progress"
							value="In Progress"
							checked
						/>
						<label for="export-assessment-dialog_status-radio_in-progress">In Progress</label>
					</div>
					<div class="radio-container" data-theme="green">
						<input
							type="radio"
							name="status"
							id="export-assessment-dialog_status-radio_complete"
							value="Complete"
						/>
						<label for="export-assessment-dialog_status-radio_complete">Complete</label>
					</div>
				</div>
			</fieldset>
			<button
				class="update-assessment"
				type="button"
				data-size="large"
				data-style="bold">Save</button
			>
		</form>
	</section>

	<section>
		<h3>Collaboration URL</h3>
		<p class="instructions">
			This personalized url lets you access your assessment from any
			device or share it with another assessor for collaboration.
		</p>
		<!-- Does this specifically need to be a url container? I guess it's to be able to locate and update. Investigate whether we can avoid css for it -->
		<div class="url-container" data-style-as="input-container">
			<div class="url" data-style-as="input">
				<span
					>https://middle.nbed.ca/conditions-for-success/#assessment=N4IgZglhg7ggkrughg8togghghtyggg0</span
				>
			</div>
			<button class="copy-url export-assessment" type="button" disabled>
				<span class="icon-and-label-container">
					<IconCopy />
					<span class="label-container">
						<span class="label"> Copy </span>
					</span>
				</span>
			</button>
		</div>
	</section>

	<section>
		<h3>Export File</h3>
		<div
			class="callout"
			data-style="shading"
			data-vibrancy="vivid"
			data-fit="compact"
			data-theme="yellow"
		>
			<div class="icon-container">
				<IconWarningBig />
			</div>
			<div class="text-container">
				<p>
					To prevent data loss, please download a .csv copy of your
					assessments regularly, as your data is not stored on a
					central server.
				</p>
			</div>
		</div>
		<button
			class="download-file export-assessment"
			data-style="bold"
			type="button"
			data-size="large"
			disabled>Download .csv</button
		>
	</section>
</dialog>

<script>
	//
	// Imports
	//

	import {
		findIndexByKey,
		htmlToElement,
		isEqual,
		joinWithAnd,
		sanitizeHTML,
	} from "src/utilities/helpers.js";
	import {
		updateChangeLog,
		getActiveAssessmentData,
		getAssessmentDate,
		getAssessmentName,
		getActiveAssessor,
		getExportStatus,
		getStatusColour,
		getUserData,
		subscribe,
		setState,
		setAssessment,
		createAssessment,
	} from "src/stores/userDataStore.js";
	import { dialogControl } from "src/utilities/dialog";

	//
	// Variables
	//

	let createAssessmentDialog = document.querySelector(
		"#create-assessment-dialog",
	);
	let selectAssessorDialog = document.querySelector(
		"#select-assessor-dialog",
	);
	let changeAssessorDialog = document.querySelector(
		"#change-assessor-dialog",
	);
	let infoAssessmentDialog = document.querySelector(
		"#info-assessment-dialog",
	);
	let changeAssessmentInfoDialog = document.querySelector(
		"#update-assessment-dialog",
	);
	let openAssessmentDialog = document.querySelector(
		"#open-assessment-dialog",
	);
	let exportAssessmentDialog = document.querySelector(
		"#export-assessment-dialog",
	);

	//
	// Type Definitions
	//

	type State = {
		activeAssessmentId: number;
		activeAssessor: string;
		changeHistory: [];
		lastModifiedPage: string;
		lastVisitedPage: string;
		mode: string;
		onboardingCompleted: boolean;
	};

	type Assessment = {
		id: number;
		status: string;
		continuumVersion: string;
		dateCreated: number;
		dateExported: number;
		dateModified: number;
		lastModifiedBy: string;
		reportingYear: string;
		district: string;
		school: string;
		assessors: [];
		considerationsEstablished: [];
		componentPhase: {};
		unexportedChanges: boolean;
	};

	//
	// Methods
	//

	let resetForm = ({form, clearLists = true}) => {
		// Clear inputs
		form.reset();

		if (clearLists) {

			// Clear custom list fields
			let formLists = form.querySelectorAll("ul[data-field]");
			for (let list of formLists) {
				list.innerHTML = "";
			}

		}

		// Reset touched fields
		touchedFormFields.clear();

		// Hide all error statuses
		let errorsStatuses = form.querySelectorAll(".error-status");
		for (let status of errorsStatuses) {
			status.setAttribute("hidden", "");
		}

		// Reset all aria-invalid
		let inputs = form.querySelectorAll("input, select");
		for (let input of inputs) {
			input.removeAttribute("aria-invalid");
		}
	};

	let createAssessorListItem = (name) => {
		if (!name || name === undefined) return;
		let template = `
			<li>
				<button class="remove-assessor" type="button">
					<span class="icon-and-label-container">
						<span class="label-container">
							<span class="label" data-field-value>${sanitizeHTML(name).trim()}</span>
						</span>
						<svg class="icon xmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
							<path d="m9.41 8 4.24-4.24a.996.996 0 1 0-1.41-1.41L8 6.59 3.76 2.34a.996.996 0 1 0-1.41 1.41l4.24 4.24-4.24 4.24a.996.996 0 0 0 .71 1.7c.26 0 .51-.1.71-.29L8.01 9.4l4.24 4.24c.2.2.45.29.71.29s.51-.1.71-.29a.996.996 0 0 0 0-1.41L9.43 7.99Z"/>
						</svg>
					</span>
				</button>
			</li>
		`;
		return htmlToElement(template);
	};

	let addAssessorToList = (target: HTMLButtonElement | HTMLInputElement) => {
		let input = target.closest(".input-container").querySelector("input");
		let item = createAssessorListItem(input.value);
		if (!item) return;
		let list = target.closest("form").querySelector(".assessor-list");
		list.append(item);
		list.removeAttribute("hidden");
		input.value = "";
	};

	let removeAssessorFromList = (target: HTMLButtonElement) => {
		let item = target.closest("li");
		item.remove();
	};

	let createAssessmentCard = (
		assessment: Assessment,
		active: boolean = false,
	) => {
		if (!assessment || assessment === undefined) return;
		let { dateExported, status, id, unexportedChanges } = assessment;

		let template = `
			<li class="card" ${active ? "data-active" : ""}>
				${active ? `<div class="banner" data-theme="${getStatusColour()}">${status === "In Progress" ? `Editing` : `Reviewing`}</div>` : ""}
				<div class="wrapper">
					<h4 class="heading icon-and-label-container">
						<svg class="icon assessment" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
							<path d="M19.36 13.06c.86-.86.86-2.25 0-3.11l-1.3-1.3c-.83-.83-2.28-.83-3.11 0l-5.26 5.26c-.38.39-.66.87-.79 1.39l-.87 3.46c-.09.34.01.7.26.95.19.19.45.29.71.29.08 0 .16 0 .24-.03l3.46-.87c.53-.13 1.01-.41 1.39-.79l5.26-5.26Zm-2.86-3.05c.05 0 .11.02.14.05l1.3 1.3c.08.08.08.21 0 .28l-.94.94-1.59-1.59.94-.94s.09-.05.14-.05Zm-3.82 6.89c-.13.13-.29.22-.46.26l-1.85.46.46-1.85c.04-.17.13-.34.26-.46l2.9-2.9L15.58 14l-2.9 2.9ZM6 19c0 .55-.45 1-1 1H3c-1.65 0-3-1.35-3-3V3c0-1.65 1.35-3 3-3h14c1.65 0 3 1.35 3 3v2c0 .55-.45 1-1 1s-1-.45-1-1V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14c0 .55.45 1 1 1h2c.55 0 1 .45 1 1Zm9-15c.55 0 1 .45 1 1s-.45 1-1 1h-5c-.55 0-1-.45-1-1s.45-1 1-1h5Zm-7 6c0-.55.45-1 1-1h1.5c.55 0 1 .45 1 1s-.45 1-1 1H9c-.55 0-1-.45-1-1Zm-.29-5.29-2 2c-.2.2-.45.29-.71.29s-.51-.1-.71-.29l-1-1A.996.996 0 1 1 4.7 4.3l.29.29L6.28 3.3a.996.996 0 1 1 1.41 1.41ZM6.5 10c0 .83-.67 1.5-1.5 1.5s-1.5-.67-1.5-1.5.67-1.5 1.5-1.5 1.5.67 1.5 1.5Zm0 5c0 .83-.67 1.5-1.5 1.5s-1.5-.67-1.5-1.5.67-1.5 1.5-1.5 1.5.67 1.5 1.5ZM20 17c0 1.65-1.35 3-3 3-.55 0-1-.45-1-1s.45-1 1-1 1-.45 1-1 .45-1 1-1 1 .45 1 1Z"/>
						</svg>
						<span class="label-container">${getAssessmentName(assessment)}</span>
					</h4>
					<div class="details">
						<span class="label-group">
							<div class="edit-status label-container field-container" data-theme="${getStatusColour(assessment)}" data-style="shading">
								<span class="label">${status}</span>
							</div>
							${unexportedChanges ? `
							<div class="export-status label-container">
								<span class="label">*Unexported Changes</span>
							</div>
							` : ""}
						</span>
						<dl data-fit="compact">
							<div class="detail-container">
								<dt class="date-created">Date Created:</dt>
								<dd>${getAssessmentDate({ assessment: assessment, type: "dateCreated" })}</dd>
							</div>
							${
								dateExported
									? `
							<div class="detail-container">
								<dt class="date-exported">Date Exported:</dt>
								<dd>${getAssessmentDate({ assessment: assessment, type: "dateExported" })}</dd>
							</div>
							`
									: `
							<div class="detail-container">
								<dt class="date-modified">Date Modified:</dt>
								<dd>${getAssessmentDate({ assessment: assessment, type: "dateModified" })}</dd>
							</div>
							`
							}
						</dl>
					</div>
					
					${
						active
							? ""
							: `
					
					<button class="open-assessment" type="button" data-size="large" data-id="${id}">Open</button>
					
					`
					}
				</div>
			</li>
		`;
		return htmlToElement(template);
	};

	let createAssessorRadioInput = ({ dialog, assessor }) => {
		if (!dialog || !assessor || assessor === undefined) return;

		let id = `${dialog.id}_assessor-radio_${assessor.split(" ").join("-").toLowerCase()}`;

		let template = `
			<div class="radio-container">
				<input
					type="radio"
					name="activeAssessor"
					id="${id}"
					value="${assessor}"
				/>
				<label for="${id}">${assessor}</label>
			</div>
		`;

		return htmlToElement(template);
	};

	let revealSchoolOptionGroup = (districtSelect) => {

		let schoolSelect = districtSelect
			.closest("form")
			.querySelector(`select[name="school"]`) as HTMLSelectElement;
		let schoolOptionGroups = schoolSelect?.querySelectorAll("optgroup");

		if (districtSelect.value !== "") {
			schoolSelect.removeAttribute("disabled");
			schoolSelect
				.querySelector(`.${districtSelect.value.toLowerCase()}-schools`)
				.removeAttribute("hidden");
		} else {
			schoolSelect.value = "";
			schoolSelect.setAttribute("disabled", "");
			for (let group of schoolOptionGroups) {
				group.setAttribute("hidden", "");
			}
		}

	}

	let getFormValues = (form: HTMLFormElement) => {

		let result = {};

		// Handle input and select elements
		let fields = form.querySelectorAll(
			"select[name], input[name]",
		) as NodeListOf<HTMLInputElement | HTMLSelectElement>;

		for (let field of fields) {
			let { name, type } = field;

			// Skip fields with no name
			if (!name) continue;

			if (type === "radio") {
				// Only capture checked radio once
				if ((field as HTMLInputElement).checked) {
					result[name] = field.value;
				}
			} else if (type === "checkbox") {
				if (!result[name]) result[name] = [];

				if ((field as HTMLInputElement).checked) {
					result[name].push(field.value);
				}
			} else {
				result[name] = field.value;
			}
		}

		// Handle custom <ul data-field> lists
		let lists = form.querySelectorAll("ul[data-field]");
		for (let list of lists) {
			let items = [];
			for (let item of list.querySelectorAll("[data-field-value]")) {
				items.push(item.textContent.trim());
			}
			let field = list.getAttribute("data-field");
			if (field) result[field] = items;
		}

		return result;

	};

	/**
	 * Validate a single non-radio input
	 * @param {HTMLInputElement} input
	 */
	let validateInput = (input) => {
		input.setCustomValidity("");

		let errorStatus = document.getElementById(`${input.id}_error`);
		if (!errorStatus) return;

		let message = "";

		if (!input.validity.valid) {
			if (input.validity.valueMissing) {
				message = "This field is required.";
			} else if (
				input.name === "reportingYear" &&
				input.validity.patternMismatch
			) {
				message = "Year must be 4 digits.";
			}
			input.setCustomValidity(message);
		}

		if (message && touchedFormFields.has(input)) {
			errorStatus.querySelector('span').textContent = message;
			errorStatus.removeAttribute("hidden");
			input.setAttribute("aria-invalid", "true");
		} else {
			errorStatus.querySelector('span').textContent = "";
			errorStatus.setAttribute("hidden", "");
			input.removeAttribute("aria-invalid");
		}
	};

	let validateForm = (form: HTMLFormElement) => {
		let firstInvalid = null;

		let inputs = form.querySelectorAll(
			"input[required], select[required]",
		) as NodeListOf<HTMLInputElement | HTMLSelectElement>;

		for (let input of inputs) {
			touchedFormFields.add(input);
			validateInput(input);
			if (!input.validity.valid && !firstInvalid) {
				firstInvalid = input;
			}
		}

		if (firstInvalid) {
			firstInvalid.focus();
			return false;
		}

		return true;
	};

	let updateAssessmentFields = ({
		assessment,
		dialog,
	}: {
		assessment: Assessment;
		dialog: HTMLDialogElement;
	}) => {
		let form = dialog.querySelector("form");

		for (let [key, value] of Object.entries(assessment)) {
			// Update form element by name
			let input = form?.elements?.[key];

			if (input) {
				if (input instanceof RadioNodeList) {
					// Handle radio group
					input.value = String(value);
					let radios = Array.from(input) as HTMLInputElement[];
					for (let radio of radios) {
						let isMatch = radio.value === String(value);
						radio.checked = isMatch;
						if (isMatch) {
							radio.setAttribute("checked", "");
						} else {
							radio.removeAttribute("checked");
						}
					}
				} else if (input.type === "checkbox") {
					input.checked = !!value;
					input.setAttribute("checked", !!value);
				} else if (input.type === "text") {
					input.value = String(value ?? "");
					input.setAttribute("value", String(value ?? ""));
				} else if (input.type === "select-one") {
					input.value = String(value ?? "");
					let option = input.querySelector(
						`option[value="${String(value ?? "")}"]`,
					);
					option.setAttribute("selected", "");
				}
			}

			// Update static detail by name (dd, div, span, etc.)
			let staticEl = dialog.querySelector(`[data-field="${key}"]`);

			if (staticEl) {
				if (Array.isArray(value)) {
					staticEl.textContent = value.join(", ");
				} else if (
					key.startsWith("date") &&
					typeof value === "number"
				) {
					staticEl.innerHTML = getAssessmentDate({ type: key });
				} else {
					staticEl.textContent = String(value ?? "");

					// Update special case: status theme
					if (key === "status") {
						staticEl.setAttribute("data-theme", getStatusColour());
					}
				}
			}

			// Update special case: assessor list
			if (key === "assessors" && Array.isArray(value)) {
				let ul = dialog.querySelector(".assessor-list");
				if (ul) {
					ul.innerHTML = ""; // Clear previous
					for (let name of value) {
						let li = createAssessorListItem(name);
						if (li) ul.appendChild(li);
					}
					ul.toggleAttribute("hidden", ul.children.length === 0);
				}
			}
		}
	};

	let updateStateFields = ({
		state,
		dialog,
	}: {
		state: State;
		dialog: HTMLDialogElement;
	}) => {
		for (let [key, value] of Object.entries(state)) {
			let field = dialog.querySelector(`[data-field="${key}"]`);

			if (field) {
				if (Array.isArray(value)) {
					field.textContent = value.join(", ");
				} else if (
					key.startsWith("date") &&
					typeof value === "number"
				) {
					field.innerHTML = getAssessmentDate({ type: key });
				} else {
					field.textContent = String(value ?? "");
				}
			}
		}
	};

	let updateAssessorRadioGroup = ({
		dialog,
		assessment = getActiveAssessmentData(),
		activeAssessor = null,
	}) => {
		let assessorRadioGroup = dialog?.querySelector(".assessor-radio-group");

		if (!dialog || !assessorRadioGroup) return;

		// Clear out the radio group
		assessorRadioGroup.innerHTML = "";

		// Create the reset input and add it to the group
		let resetInput = htmlToElement(`
				<div class="radio-container">
					<input
						type="radio"
						name="activeAssessor"
						id="${dialog.id}_assessor-radio_none"
						value=""
						${activeAssessor ? "" : "checked"}
					/>
					<label for="${dialog.id}_assessor-radio_none">None</label>
				</div>
			`);
		assessorRadioGroup.append(resetInput);

		// Generate the inputs and add them to the group
		for (let assessor of assessment.assessors) {
			let input = createAssessorRadioInput({
				dialog: dialog,
				assessor: assessor,
			});
			assessorRadioGroup.append(input);

			// If there is an active assessor, set it to checked
			if (activeAssessor && assessor === activeAssessor) {
				input.querySelector("input").checked = true;
				input.querySelector("input").setAttribute("checked", "");
			}
		}
	};

	/**
	 * Update the select-assessor dialog UI from stored assessment data
	 * @param data
	 */
	let updateSelectAssessorDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		let dialog = selectAssessorDialog as HTMLDialogElement;

		updateAssessorRadioGroup({
			dialog: dialog,
		});
	};

	/**
	 * Update the select-assessor dialog UI from stored assessment data
	 * @param data
	 */
	let updateChangeAssessorDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		let dialog = changeAssessorDialog as HTMLDialogElement;

		updateAssessorRadioGroup({
			dialog: dialog,
			activeAssessor: data.uiState.activeAssessor,
		});
	};

	/**
	 * Update the info-assessment dialog UI from stored assessment data
	 * @param data
	 */
	let updateInfoAssessmentDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		let dialog = infoAssessmentDialog as HTMLDialogElement;

		updateAssessmentFields({
			assessment: assessment,
			dialog: dialog,
		});

		updateStateFields({
			state: data.uiState,
			dialog: dialog,
		});

		let callout = dialog.querySelector(".callout");
		let colour = assessment.status === "In Progress" ? "blue" : "green";
		callout.setAttribute("data-theme", colour);

		let dateExportedField = dialog.querySelector(
			'.field-container:has([data-field="dateExported"])',
		);
		let dateModifiedField = dialog.querySelector(
			'.field-container:has([data-field="dateModified"])',
		);
		let exportStatus = dialog.querySelector(".export-status");

		if (assessment.dateExported) {
			dateExportedField.removeAttribute("hidden");
			dateModifiedField.setAttribute("hidden", "");
		} else {
			dateExportedField.setAttribute("hidden", "");
			dateModifiedField.removeAttribute("hidden");
		}

		if (assessment.unexportedChanges) {
			exportStatus.removeAttribute("hidden");
		} else {
			exportStatus.setAttribute("hidden", "");
		}
	};

	/**
	 * Update the update-assessment dialog UI from stored assessment data
	 * @param data
	 */
	let updateChangeAssessmentInfoDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		let dialog = changeAssessmentInfoDialog as HTMLDialogElement;

		updateAssessmentFields({
			assessment: assessment,
			dialog: dialog,
		});

		let districtSelect = dialog.querySelector('select[name="district"]');

		revealSchoolOptionGroup(districtSelect);

	};

	/**
	 * Update the open-assessment dialog UI from stored assessment data
	 * @param data
	 */
	let updateOpenAssessmentDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let dialog = openAssessmentDialog;
		let savedAssessmentList = dialog?.querySelector("ul.saved-assessments");

		if (!dialog || !savedAssessmentList) return;

		// Clear out the list
		savedAssessmentList.innerHTML = "";

		// Create a shallow copy of the array
		let assessments = [...data.assessments];

		// Sort array of assessments by date modified
		assessments.sort((a, b) => b.dateModified - a.dateModified);

		let activeAssessmentId = data.uiState.activeAssessmentId;

		if (activeAssessmentId) {
			// Get the index of the active assessment
			let activeIndex = findIndexByKey(
				assessments,
				"id",
				activeAssessmentId,
			);

			// Move it to the top of the array, if not already
			if (activeIndex > 0) {
				let [activeItem] = assessments.splice(activeIndex, 1);
				assessments.unshift(activeItem);
			}
		}

		// Generate the HTML cards and add them to the DOM
		for (let i = 0; i < assessments.length; i++) {
			let assessment = assessments[i];
			let active = false;

			if (typeof assessment === "object" && assessment !== null) {
				if (activeAssessmentId && i === 0) active = true;

				let card = createAssessmentCard(assessment, active);
				savedAssessmentList.append(card);
			}
		}
	};

	/**
	 * Update the open-assessment dialog UI from stored assessment data
	 * @param data
	 */
	let updateExportAssessmentDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		let dialog = exportAssessmentDialog as HTMLDialogElement;

		updateAssessmentFields({
			assessment: assessment,
			dialog: dialog,
		});

		// TODO: Generate collaboration url and update it in the dialog;
	};

	//
	// Inits & Event Listeners
	//

	subscribe(updateSelectAssessorDialog);
	subscribe(updateChangeAssessorDialog);
	subscribe(updateInfoAssessmentDialog);
	subscribe(updateChangeAssessmentInfoDialog);
	subscribe(updateOpenAssessmentDialog);
	subscribe(updateExportAssessmentDialog);

	let touchedFormFields = new Set();

	document.addEventListener("click", (event) => {
		let target = event.target as HTMLButtonElement;

		if (target.matches("button.create-assessment")) {
			let dialog = target.closest("dialog");
			let form = target.closest("form");
			let formValidity = validateForm(form);

			let values: {};

			if (!formValidity) return;

			// Get the form values and create the assessment
			values = getFormValues(form);
			createAssessment(values);

			// Clear the form
			form.reset();
			let formLists = form.querySelectorAll("ul[data-field]");
			for (let list of formLists) {
				list.innerHTML = "";
			}

			// Reset the form
			let forms = dialog.querySelectorAll("form");
			for (let form of forms) {
				resetForm({form:form});
			}

			// Open select assessor dialog
			dialogControl.open("select-assessor-dialog");
		}

		if (target.matches("button.update-assessor")) {
			let dialog = target.closest("dialog");
			let form = target.closest("form");
			let formValidity = validateForm(form);

			let values: {};

			if (!formValidity) return;

			// Get the form values and update the active assessor
			values = getFormValues(form);
			setState(values);

			// Close the dialog
			dialog.close();
		}

		if (target.matches("button.update-assessment")) {
			let dialog = target.closest("dialog");
			let form = target.closest("form");
			let formValidity = validateForm(form);

			let values = {} as any;

			if (!formValidity) return;
			
			let assessment = getActiveAssessmentData();

			// Get the form values
			values = getFormValues(form);

			let changedValues = {};
			let updatedKeys = [];

			for (let [key, value] of Object.entries(values)) {
				if (isEqual(value, assessment[key])) continue;
				updatedKeys.push(key);
				changedValues[key] = value;
			}

			if (Object.keys(changedValues).length !== 0) {

				values = changedValues;
		
				values.unexportedChanges = true;
				
				let formattedKeys = updatedKeys.map((value) => {
					return value.replace(/([a-z])([A-Z])/g, '$1 $2').toLowerCase();
				});
				
				values.changeLog = updateChangeLog({
					message: `Updated ${joinWithAnd(formattedKeys)}.`,
				});
				
				setAssessment(values);
				
				let activeAssessor = getActiveAssessor();
	
				if (activeAssessor !== null && (!Array.isArray(values.assessors) || !values.assessors.includes(activeAssessor))) {

					setState({
						activeAssessor: null,
					})

				}

			}

			// Close the dialog
			dialog.close();

			// Reset the form
			let forms = dialog.querySelectorAll("form");
			for (let form of forms) {
				resetForm({
					form: form,
					clearLists: false,
				});
			}
		}

		// TODO: If there are no assessors identified, the select assessor dialog doesn't make sense. Maybe it should include add assessor?

		if (target.matches("button.open-assessment")) {
			setState({
				mode: "assessment",
				activeAssessmentId: Number(target.getAttribute("data-id")),
				activeAssessor: null,
			});

			// Open select assessor dialog
			dialogControl.open("select-assessor-dialog");
		}

		if (target.matches("button.import-file")) {
		}

		if (target.matches("button.import-url")) {
		}

		if (target.matches("button.export-assessment")) {
			setAssessment({
				unexportedChanges: false,
				dateExported: Date.now(),
			});
		}

		if (target.matches("button.open-dialog")) {
			let targetDialog = target.getAttribute("data-dialog");
			dialogControl.open(targetDialog);
		}

		if (target.matches("button.close-dialog")) {
			let targetDialog = target.closest("dialog");
			let forms = targetDialog.querySelectorAll("form");
			for (let form of forms) {
				let clearLists = form.hasAttribute('data-clear-lists');
				resetForm({
					form:form,
					clearLists: clearLists,
				});
			}
		}

		if (target.matches("button.add-assessor")) {
			addAssessorToList(target);
		}

		if (target.matches("button.remove-assessor")) {
			removeAssessorFromList(target);
		}

		if (target.matches("button.stop-editing")) {
			let activeAssessment = getActiveAssessmentData();

			if (activeAssessment.unexportedChanges) {
				dialogControl.open("export-warning-dialog");
			} else {
				setState({
					mode: "reading",
					activeAssessmentId: null,
					activeAssessor: null,
				});
			}
		}

		if (target.matches("#export-warning-dialog button.close-dialog")) {
			setState({
				mode: "reading",
				activeAssessmentId: null,
				activeAssessor: null,
			});
		}

		if (
			target.matches(
				'#status-warning-dialog button.open-dialog[data-dialog="select-assessor-dialog"]',
			)
		) {
			setAssessment({
				status: "In Progress",
			});

			setState({
				mode: "assessment",
			});
		}
	});

	document.addEventListener("input", (event) => {
		let target = event.target as HTMLInputElement | HTMLSelectElement;

		if (target.matches(`select[name="district"]`)) {

			revealSchoolOptionGroup(target);

		}
	});

	document.addEventListener("keydown", (event) => {
		if (event.key === "Enter") {
			let target = event.target as HTMLInputElement;

			if (target.matches(`input.assessor`)) {
				addAssessorToList(target);
				// TODO: Not working
			}
		}
	});

	document.addEventListener("focusout", (event) => {
		let target = event.target as any;

		if (target.matches("select[required], input[required]")) {
			touchedFormFields.add(target);
			validateInput(target);
		}
	});

	document.addEventListener("change", (event) => {
		let target = event.target as any;

		if (target.matches("select[required], input[required]")) {
			touchedFormFields.add(target);
			validateInput(target);
		}
	});
</script>