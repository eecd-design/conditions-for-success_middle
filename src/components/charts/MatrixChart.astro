---
import IconTrowel24 from "src/components/icons/IconTrowel_24.astro";
import IconSeed24 from "src/components/icons/IconSeed_24.astro";
import IconSapling24 from "src/components/icons/IconSapling_24.astro";
import IconWateringCan24 from "src/components/icons/IconWateringCan_24.astro";

let { entries } = Astro.props;
---

<table class="chart-container matrix">
	<colgroup>
		<col style="width: 25%" />
		<col style="width: 18.75%" />
		<col style="width: 18.75%" />
		<col style="width: 18.75%" />
		<col style="width: 18.75%" />
	</colgroup>
	<thead>
		<tr>
			<th></th>
			<th>
				<div>
					<IconTrowel24 />
					<span>Initiating</span>
				</div>
			</th>
			<th>
				<div>
					<IconSeed24 />
					<span>Implementing</span>
				</div>
			</th>
			<th>
				<div>
					<IconSapling24 />
					<span>Developing</span>
				</div>
			</th>
			<th>
				<div>
					<IconWateringCan24 />
					<span>Sustaining</span>
				</div>
			</th>
		</tr>
	</thead>
	<tbody>
		{
			entries.map((entry) => (
				<tr data-phase="initiating" data-tag={entry.data.tag} data-theme={entry.data.colour ?? null} data-vibrancy="vivid">
					<th scope="row">
						<span class="tag">
							{entry.data.tag}
						</span>
						{entry.data.title}
					</th>
					<td />
					<td />
					<td />
					<td />
				</tr>
			))
		}
	</tbody>
</table>

<!-- TODO: Accessible version of the table with two columns (indicator/component | phase achieved) -->

<style is:global>
	/* 
	// Matrix Chart
	*/

	.chart-container.matrix {
		width: 100%;
		table-layout: fixed;
		border-collapse: collapse;
		margin: 0;
	}

	/* Cell Defaults */

	.chart-container.matrix :is(th, td) {
		height: 4.5rem;
		padding: 0 1rem;
		position: relative;
		text-align: center;
		vertical-align: middle;
	}

	.chart-container.matrix th {
		font-weight: 500;
	}

	.chart-container.matrix th .tag {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		height: 1.125rem;
		min-width: 1.125rem;
		padding: 0 0.25rem;
		margin: 0 0.375rem 0 0;
		float: left;
		background-color: var(--colour-fill-accent-subtle);
		border-radius: var(--border-radius-small);
		font-size: 0.75rem;
		font-weight: 500;
		line-height: 1;
		color: var(--colour-ui-accent);
	}

	/* Table Head */

	.chart-container.matrix thead th {
		--icon-colour: var(
			--colour-ui-accent-subtle,
			var(--colour-ui-neutral-subtle)
		);
		--icon-size: 1.75rem;
		border-bottom: 1px solid var(--colour-border-neutral-bold);
	}

	.chart-container.matrix thead th:first-of-type {
		border: none;
	}

	.chart-container.matrix thead th:last-of-type {
		border-right: none;
	}

	.chart-container.matrix thead th div {
		display: inline-flex;
		flex-flow: column;
		align-items: center;
		gap: 0.5rem;
	}

	/* Table Body */

	.chart-container.matrix tbody th {
		border-right: 1px solid var(--colour-border-neutral-bold);
		border-bottom: 1px solid var(--colour-border-neutral-subtle);
		padding: 1rem 1rem 1rem 0;
		text-align: left;
		vertical-align: bottom;
		position: relative;
		line-height: 1.3;
	}

	.chart-container.matrix tbody td {
		border-right: 1px dashed var(--colour-border-neutral-subtle);
		border-bottom: 1px solid var(--colour-border-neutral-subtle);
		line-height: 1;
	}

	.chart-container.matrix tbody tr td:last-of-type {
		border-right: 1px solid var(--colour-border-neutral-bold);
	}

	.chart-container.matrix tbody tr:last-of-type td {
		border-bottom: 1px solid var(--colour-border-neutral-bold);
	}

	/* Position Dot */

	.chart-container.matrix td::after {
		content: "";
		display: none;
		flex-shrink: 0;
		border-radius: 10rem;
		height: 1.5rem;
		width: 1.5rem;
		background-color: var(
			--colour-fill-accent-bold,
			var(--colour-fill-neutral-mid)
		);
		position: absolute;
		top: calc(50% - 0.75rem);
		left: calc(50% - 0.75rem);
		z-index: 2;
	}

	.chart-container.matrix
		tr[data-phase="initiating"]
		td:nth-of-type(1)::after,
	.chart-container.matrix
		tr[data-phase="implementing"]
		td:nth-of-type(2)::after,
	.chart-container.matrix
		tr[data-phase="developing"]
		td:nth-of-type(3)::after,
	.chart-container.matrix
		tr[data-phase="sustaining"]
		td:nth-of-type(4)::after {
		display: inline-block;
	}

	/* Position Line */

	.chart-container.matrix td::before {
		content: "";
		display: none;
		border-radius: 10rem;
		height: 1.5rem;
		background-color: var(
			--colour-fill-accent-subtle,
			var(--colour-fill-neutral-subtle)
		);
		position: absolute;
		top: calc(50% - 0.75rem);
		z-index: 1;
	}

	/* Center to Right Margin */
	.chart-container.matrix
		tr:is(
			[data-phase="implementing"],
			[data-phase="developing"],
			[data-phase="sustaining"]
		)
		td:nth-of-type(1)::before {
		display: inline-block;
		left: calc(50% - 0.75rem);
		border-radius: 10rem 0 0 10rem;
		width: calc(50% + 0.75rem + 2px);
	}

	/* Left Margin to Right Margin */
	.chart-container.matrix
		tr:is([data-phase="developing"], [data-phase="sustaining"])
		td:nth-of-type(2)::before,
	.chart-container.matrix
		tr:is([data-phase="sustaining"])
		td:nth-of-type(3)::before {
		display: inline-block;
		left: -2px;
		border-radius: 0;
		width: calc(100% + 4px);
	}

	/* Left Margin to Center */
	.chart-container.matrix
		tr:is([data-phase="implementing"])
		td:nth-of-type(2)::before,
	.chart-container.matrix
		tr:is([data-phase="developing"])
		td:nth-of-type(3)::before,
	.chart-container.matrix
		tr:is([data-phase="sustaining"])
		td:nth-of-type(4)::before {
		display: inline-block;
		left: -2px;
		border-radius: 0 10rem 10rem 0;
		width: calc(50% + 0.75rem + 2px);
	}
</style>
