---

import ResourceIcons from "./icons/ResourceIcons.astro";
import PhaseIcons from "./icons/PhaseIcons.astro";
import IconCross from "./icons/IconCross_24.astro";
import IconFocus from "./icons/IconTarget_20.astro";
import IconCompass from "./icons/IconCompass_14.astro";
import IconFilter from "./icons/IconFilter_16.astro";
import IconArrow from "./icons/IconArrowRight_16.astro";
import IconCheckmark from "./icons/IconCheckmark_20.astro";
import IconDownload from "./icons/IconDownload_16.astro";
import IconExternal from "./icons/IconExternal_16.astro";

const { title, componentData } = Astro.props;

const { focus, considerations, resources } = componentData;

console.log(resources);

---

<h3 class="accordion">

	<span class="label">
		<PhaseIcons phase={title} />
		<span class="text">{title}</span>
	</span>

	{ componentData && (
		<span class="meta">2 / 3 Established</span>
	)}

	<IconCross />

</h3>

{ componentData ? (

	<div>

        {
            focus && focus.rawContent().trim().length > 0 && (
                <div class="focus">
                    <h4 class="label">
                        <IconFocus />
                        <span>Focus</span>
                    </h4>
                    <div class="statement">
                        <focus.Content />
                    </div>
                </div>
            )
        }

        {
            considerations && considerations.length > 0 && (

				<div class="considerations">
					<ul>
						{
							considerations.map((consideration) => {

								return (
									<li>
										<form>
											<label>

												<input type="checkbox" value={consideration.tag}/>

												<IconCheckmark/>

												<span class="tag">{consideration.tag}</span>

												{consideration.compass && (
													<IconCompass />
												)}

											</label>
										</form>

										<span class="description">
											<p>{consideration.description}</p>
											<a href={`#${componentData.id}_${title.toLowerCase()}-resources&filter=${consideration.tag}`}>
												<span class="icon-container"><IconArrow /></span>
												<span>View relevant resources</span>
											</a>
										</span>

										

									</li>
								)
							})
						}
					</ul>
				</div>

        	)
		}

        {
            resources && (

                <div class="resources" id={`${componentData.id}_${title.toLowerCase()}-resources`}>

                    <div class="list-header">
                        <h4 class="heading">Resources</h4>
                        <div class="filters">
                            <span class="label">
								<IconFilter />
								<span>Filters:</span>
							</span>
                            <div class="button-group">
                                <button type="button" data-size="small">Clear All</button>
                                {
									considerations.map((consideration) => (
										<button type="button" data-size="small" value={consideration.tag}>{consideration.tag}</button>
									))
								}
                            </div>
                        </div>
                    </div>

                    <ul class="list">

                        { 
							resources.map((resource) => {

								let category = resource.data.category;

								return (

									<li>
										<a href={resource.data.source.filePath ? resource.data.source.filePath : resource.data.source.url} data-indicators={resource.data.linkedIndicators} data-components={resource.data.linkedComponents} data-considerations={resource.data.linkedConsiderations}>
											<ResourceIcons category={category} />
											<div class="text-container">
												<span class="text">{resource.data.title}</span>
												<div class="icon-group">
													{category === 'document'
														|| category === 'presentation'
														? <IconDownload/> : ''}
													{category === 'audio'
														|| category === 'video'
														|| category === 'website'
														? <IconExternal/> : ''}
												</div>
											</div>
										</a>
									</li>

								)

							}
						)}

                    </ul>

                </div>
            )
        }

	</div>

) : (

<div>
	<slot />
</div>

)}

<style is:global>

	/*
	** INDICATOR PAGES
	------------------------------*/

	.accordion-group {
		margin: 2.5rem 0;
	}

	.accordion {
		margin: 0.5rem 0 0;
	}

	.accordion button {
		--button-background-colour: var(--colour-fill-accent-subtle-muted);
		--button-background-colour-hover: transparent;
		--button-border-radius: var(--border-radius-normal);
		--button-ui-colour: var(--colour-ui-neutral);
		--button-ui-colour-hover: var(--button-ui-colour);
		--icon-colour: var(--colour-ui-accent);
		--icon-size: 1.5rem;

		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: 1rem;
		height: auto;
		width: 100%;
		padding: 0.75rem 1rem;
		font-size: 1.5rem;
		font-weight: 600;
		outline-color: transparent;
		transition: 
			background-color var(--transition-linear-fast),
			outline-color var(--transition-linear-fast);
	}

	.accordion button:not([aria-expanded="true"]):hover {
		outline: 2px solid var(--colour-border-accent-subtle-muted);
		outline-offset: -1px;
	}

	.accordion button[aria-expanded="true"] {
		--button-background-colour: var(--colour-fill-accent-bold-muted);
		--button-ui-colour: var(--colour-ui-reverse);
		--icon-colour: var(--colour-ui-reverse);
		border-radius: var(--border-radius-normal) var(--border-radius-normal) 0 0;
	}

	.accordion button .label {
		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: 0.5rem;
		flex-grow: 1;
	}
	
	.accordion button .meta {
		font-size: 0.875rem;
		color: var(--colour-ui-accent-subtle);
	}

	.accordion button:is(:hover, :focus-visible) .meta {
		color: var(--colour-ui-accent-subtle);
	}

	.accordion button[aria-expanded="true"] .meta {
		color: var(--colour-ui-reverse);
		opacity: 0.8;
	}

	.accordion button > .icon.cross path {
		transition: rotate 0.2s ease;
		transform-origin: center;
	}

	.accordion button[aria-expanded="true"] > .icon.cross path:last-of-type {
		rotate: -90deg;
	}

	.accordion + * {
		border: 2px solid var(--colour-border-accent-bold-muted);
		border-radius: 0 0 var(--border-radius-normal) var(--border-radius-normal);
	}

	.accordion + * > .focus {
		display: flex;
		flex-flow: row nowrap;
		gap: 1rem;
		align-items: center;
		padding: 0.75rem 1.25rem;
		background-color: var(--colour-fill-neutral-subtle-muted);
		border-bottom: 1px solid var(--colour-border-neutral-subtle-muted);
	}

	.accordion + * > .focus .label {
		--icon-colour: var(--colour-ui-neutral-subtle);
		--icon-size: 1.25rem;
		display: flex;
		flex-flow: row nowrap;
		gap: 0.5rem;
		align-items: center;
		margin: 0;
		padding: 0;
		font-size: 1rem;
		line-height: 1;
		height: 100%;
	}

	.accordion + * > .focus .statement  {
		border-left: 1px solid var(--colour-border-neutral-subtle-muted);
		padding: 0 0 0 1rem;
	}

	.considerations {
		padding: 1.25rem;
	}

	.considerations ul {
		display: grid;
		gap: 2rem;
		padding: 0;
		list-style-type: none;
	}

	.considerations ul li {
		display: flex;
		flex-flow: row nowrap;
		gap: 1rem;
		align-items: start;
	}

	.considerations form {
		min-width: 5rem;
	}

	.considerations form label {
		display: inline-grid;
		grid-auto-flow: column;
		align-items: center;
		height: 1.25rem;
		padding: 0 0.375rem 0 0;
		background-color: var(--colour-fill-accent-subtle-muted);
		border-radius: var(--border-radius-small);
		cursor: pointer;
		user-select: none;
		transition: background-color var(--transition-linear-fast);	
	}

	.considerations form label:has(input[type="checkbox"]:is(:hover, :focus-visible)) {
		background-color: var(--colour-fill-accent-subtle-muted-highlight);
	}

	.considerations form label:has(input[type="checkbox"]:checked) {
		background-color: var(--colour-fill-accent-bold-muted);
	}

	.considerations form label input {
		height: 1.25rem;
		width: 1.25rem;
		opacity: 0;
		cursor: pointer;
		z-index: 0;
	}

	.considerations form label::before {
		content: "";
		position: absolute;
		height: 1.25rem;
		width: 1.25rem;
		background-color: var(--colour-background);
		border: 2px solid var(--colour-border-accent-mid-muted);
		border-radius: var(--border-radius-small);
		pointer-events: none;
		z-index: 1;
		transition: border-color var(--transition-linear-fast);
	}

	.considerations form label:has(input[type="checkbox"]:is(:hover, :focus-visible, :checked))::before {
		border-color: var(--colour-border-accent-bold-muted);
	}

	.considerations form label .tag {
		margin: 0 0 0 0.375rem;
		font-size: 0.875rem;
		font-weight: 700;
		line-height: 1;
		color: var(--colour-ui-accent);
		transition: color var(--transition-linear-fast);
	}

	.considerations form label:has(input[type="checkbox"]:is(:hover, :focus-visible)) .tag {
		color: var(--colour-ui-accent-bold);
	}

	.considerations form label:has(input[type="checkbox"]:checked) .tag {
		--icon-colour: var(--colour-ui-reverse);
		color: var(--colour-ui-reverse);
	}
	
	.considerations form label .icon.checkmark {
		--icon-colour: var(--colour-ui-accent);
		--icon-size: 1.25rem;
		position: absolute;
		z-index: 2;
		opacity: 0;
		transition: opacity var(--transition-linear-fast);
	}
	
	.considerations form label:has(input[type="checkbox"]:is(:hover, :focus-visible, :checked)) .icon.checkmark {
		opacity: 1;
	}
	
	.considerations form label .icon.compass {
		--icon-colour: var(--colour-ui-accent);
		--icon-size: 0.875rem;
		margin: 0 0 0 0.25rem;
	}
	
	.accordion + * :where(p, li, a) {
		font-size: 1rem;
		line-height: 1.2;
	}

	.resources {
		padding: 1.25rem;
	}

	.resources .list-header {
		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		justify-content: space-between;
		gap: 1.5rem;
		margin: 0 0 1.5rem;
	}

	.resources .list-header .heading {
		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: 1.5rem;
		flex-grow: 1;
		margin: 0;
		font-size: 1rem;
		text-transform: uppercase;
	}

	.resources .list-header .heading::after {
		content: "";
		display: inline-block;
		height: 2px;
		width: 100%;
		background-color: var(--colour-border-neutral-subtle-muted);
	}

	.resources .list-header .filters {
		display: flex;
		flex-flow: row wrap;
		align-items: center;
		gap: 0.75rem;
	}

	.resources .list-header .filters .label {
		--icon-colour: var(--colour-ui-neutral-subtle);
		--icon-size: 1rem;
		display: flex;
		flex-flow: row wrap;
		align-items: center;
		gap: 0.25rem;
		font-size: 0.875rem;
		font-weight: 700;
	}

	.resources .list {
		display: grid;
		gap: 0.5rem;
		padding: 0;
		margin: 0;
		list-style-type: none;
	}

	.resources .list a {
		--icon-colour: var(--colour-ui-accent);
		--background-colour: var(--colour-fill-accent-subtle-muted);

		display: flex;
		flex-flow: row nowrap;
		gap: 0.375rem;
		align-items: center;
		cursor: pointer;
		text-decoration: none;
	}

	.resources .list a:is(:hover, :focus-visible) {
		--icon-colour: var(--colour-ui-accent-bold);
		--label-colour: var(--colour-ui-accent-bold);
		--background-colour: var(--colour-fill-accent-subtle-muted-highlight);
	}

	.resources .list a .icon-and-label-container {
		--container-background-colour: var(--colour-fill-accent-subtle-muted);
		--container-border-radius: var(--border-radius-normal);
		--container-padding: 0.5rem;
	}

	.resources .list a:is(:hover, :focus-visible) .icon-and-label-container {
		--icon-colour: var(--colour-ui-accent-bold);
		--container-background-colour: var(--colour-fill-accent-subtle-muted-highlight);
	}

	.resources .list a .text-container {
		display: flex;
		align-items: center;
		flex-flow: row nowrap;
		flex-grow: 1;
		background-color: var(--colour-fill-accent-subtle-muted);
		border-radius: var(--border-radius-normal);
		height: 2.5rem;
		padding: 0 0.75rem;
		outline-color: transparent;
		transition: 
			outline-color var(--transition-linear-fast),
			text-decoration-color var(--transition-linear-fast);
	}

	.resources .list a:is(:hover, :focus-visible) .text-container {
		outline: 2px solid var(--colour-border-accent-subtle-muted);
		outline-offset: -1px;
		background-color: transparent;
	}

	.resources .list a .text-container .text {
		flex-grow: 1;
	}

	.resources .list a .text-container .icon-group {
		--icon-size: 1rem;
	}


</style>

<script>

    //
    // HELPER METHODS
    //

	/**
	 * Stop all actively playing videos within a container element
	 * @param  {Event} elem The container element
	 */
	let stopVideo = (elem) => {
		let iframe = elem.matches('iframe') ? elem : elem.querySelector('iframe');
		let video = elem.matches('video') ? elem : elem.querySelector('video');
		if (iframe) {
			let iframeSrc = iframe.src;
			iframe.src = iframeSrc;
		}
		if (video) {
			video.pause();
		}
	};

	/**
	 * Scroll an element into view
	 * @param  {Node} elem The elem to show
	 */
	let scrollIntoView = (elem, options:{block?:string} = {}) => {

		let { block = 'start' } = options; 

		let rect = elem.getBoundingClientRect();
		let fullyInView = (
			rect.top >= 0 &&
			rect.left >= 0 &&
			rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
			rect.right <= (window.innerWidth || document.documentElement.clientWidth)
		);

		if (!fullyInView) {

			elem.scrollIntoView({
				behavior: 'auto',
				block: block,
			});

		}

	}

	/**
	 * Checks if an element is in the viewport.
	 * @param {HTMLElement} elem - The element to check.
	 * @param {Object} [options] - Options for visibility.
	 * @param {boolean} [options.fully=false] - Whether the element must be fully in view.
	 * @returns {boolean} True if element is in view (fully or partially).
	 */
	let isInViewport = (elem, options:{fully?:boolean} = {}) => {

		let { fully = false } = options
		let rect = elem.getBoundingClientRect()

		let viewHeight = window.innerHeight || document.documentElement.clientHeight
		let viewWidth = window.innerWidth || document.documentElement.clientWidth

		if (fully) {
			return (
				rect.top >= 0 &&
				rect.left >= 0 &&
				rect.bottom <= viewHeight &&
				rect.right <= viewWidth
			)
		}

		return (
			rect.bottom > 0 &&
			rect.right > 0 &&
			rect.top < viewHeight &&
			rect.left < viewWidth
		)

	}


    //
	// DOM SETUP
	//

	/**
	* Add buttons and hide content on page load
	*/
	let setupAccordionDOM = () => {

		// Get all accordion headings
		let headings = document.querySelectorAll('.accordion');

		// Wrap heading content in a button
		for (let heading of headings) {

			// Create a button
			let btn = document.createElement('button');

			// Add heading nodes to the button
			while (heading.firstChild) {
				btn.append(heading.firstChild);
			}

			// Remove duplicate heading content and replace it with the button
			heading.innerHTML = '';
			heading.append(btn);

			// Hide the content
			heading.nextElementSibling.setAttribute('hidden', '');

			// Change button type
			btn.setAttribute('type', 'button');

			// Add ARIA
			btn.setAttribute('aria-expanded', 'false');

		}

	}


	//
	//	EVENT HANDLERS
	//

	/**
	 * Show content on click events
	 * @param  {Event} event The event object
	 */
	let accordionClickHandler = (event) => {

		// Only run on accordion buttons
		let targetAccordion = event.target.closest('.accordion');
		if (!targetAccordion) return;

		// Toggle accordion visibility
		toggleAccordion(targetAccordion);

	}



    //
    // METHODS
    //


	/**
	 * Toggle accordion visibility
	 * @param  {Node} targetAccordion The accordion to show
	 */
	let toggleAccordion = (targetAccordion) => {

		// Get the accordion group, if there is one
		let accordionGroup = targetAccordion.closest('.accordion-group');
		
		// If there is an accordion group, check whether it allows multiple open panels, default to false
		let allowMultiple = accordionGroup ? accordionGroup.hasAttribute('data-allow-multiple') : false;

		// Get the target accordion toggle button
		let targetToggle = targetAccordion.querySelector('button');

		// Get the target accordion panel
		let targetPanel = targetAccordion.nextElementSibling;

		// Check if the target panel is expanded
		let isExpanded = targetToggle.getAttribute('aria-expanded') == 'true';
		
		// Get the active toggle button
		let activeToggle = accordionGroup ? accordionGroup.querySelector('[aria-expanded="true"]') : null;

		// Get the active panel
		let activePanel = activeToggle ? activeToggle.closest('.accordion').nextElementSibling : null;

		// If the active panel contains a video, pause it
		if (activePanel && (activePanel.matches('video, .embed') || activePanel.querySelector('video, .embed'))) {
			stopVideo(activePanel);
		}

		// If accordion group does not allows multiple open panels and the target toggle is not the active toggle 
		if (!allowMultiple && activeToggle && activeToggle !== targetToggle) {

			// Reset the active toggle
			activeToggle.setAttribute('aria-expanded', 'false');
			
			// Hide the active panel
			activePanel.setAttribute('hidden', '');

		}

		// If the target is collapsed, expand it
		if (!isExpanded) {

			// Set the toggle to expanded
			targetToggle.setAttribute('aria-expanded', 'true');

			// Show the target panel
			targetPanel.removeAttribute('hidden');

		}

		// If the target is expanded, collapse it
		else if (isExpanded) {

			// Set the expanded state on the triggering element
			targetToggle.setAttribute('aria-expanded', 'false');

			// Hide the target panel
			targetPanel.setAttribute('hidden', '');

		}

        // Get the transition length and convert it to a number
        let transitionLength = Number(getComputedStyle(targetAccordion).getPropertyValue('transition-duration').replace(/[^0-9\.]/g, ''));

        setTimeout(() => {

            // If the target toggle is not in view after the transition
            if (!isInViewport(targetToggle)) {

                // Scroll it into view
                scrollIntoView(targetToggle);

            }

        }, transitionLength * 1000);

    }


    //
    // INITS
    //

    let initAccordion = function() {

		setupAccordionDOM();

		document.addEventListener('click', accordionClickHandler);

        document.addEventListener('astro:before-swap', () => {

            document.removeEventListener('click', accordionClickHandler);

        })

    }

    // Initialize the component
    initAccordion();

    // Re-initialize the component after swapping pages
    document.addEventListener('astro:after-swap', initAccordion);

</script>


