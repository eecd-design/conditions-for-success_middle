---
import IconCaretSmall from "./icons/IconCaretDown_14.astro";
import IconCaretMedium from "./icons/IconCaretDown_16.astro";
import IconCaretLarge from "./icons/IconCaretDown_20.astro";

import { toKebabCase } from "../utilities/helpers";

const {
	title,
	id,
	dataset,
	crossIconSize = "large",
	wrapper = true,
} = Astro.props;

let datasetAttrs = {};
if (dataset) {
	for (let data of dataset) {
		datasetAttrs[`data-${data.key}`] = data.value;
	}
}

const crossIcons = {
	small: IconCaretSmall,
	medium: IconCaretMedium,
	large: IconCaretLarge,
};

let IconCross = crossIcons[crossIconSize];
---

<div class="accordion" {...datasetAttrs}>
	<h3 id={id ? id : toKebabCase(title)} class="heading">
		<span class="icon-and-label-container">
			<slot name="button-icon" />
			<span class="label-container">
				<span class="label">{title}</span>
			</span>
		</span>

		<slot name="button-meta" />

		<IconCross />
	</h3>

	<div class="panel">
		{
			wrapper ? (
				<div class="content">
					<slot />
				</div>
			) : (
				<slot />
			)
		}
	</div>
</div>

<style is:global>
	.accordion-group {
		display: flex;
		flex-flow: column;
		gap: var(--space-2xs);
		margin: var(--space-2xl) 0;
	}

	.accordion {
		container: accordion / inline-size;
		scroll-margin-top: 2rem;
	}

	@container main (width >=880px) {
		main.big-seven[data-mode="assessment"] .accordion {
			scroll-margin-top: 6.5rem;
		}
	}

	.accordion .heading {
		margin: 0;
	}

	.accordion .heading button {
		--button-background-colour: var(
			--colour-fill-accent-subtle,
			var(--colour-fill-neutral-subtle)
		);
		--button-border-radius: var(--border-radius-normal);
		--button-ui-colour: var(--colour-ui-neutral);
		--icon-colour: var(--colour-ui-accent, var(--colour-ui-neutral));

		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: var(--space-sm);
		height: auto;
		min-height: 3.5rem;
		width: 100%;
		padding: var(--space-xs) var(--space-base) var(--space-xs)
			var(--space-sm);
		box-shadow: inset 0 0 0 var(--button-boxshadow-width, 2px)
			var(--button-boxshadow-colour, transparent);
		transition: background-color var(--transition-linear-fast);
	}

	.accordion .heading button:is(:hover, :focus-visible) {
		--button-background-colour: transparent;
		--button-ui-colour: var(--button-ui-colour);
	}

	.accordion
		.heading
		button:not([aria-expanded="true"]):is(:hover, :focus-visible) {
		--button-boxshadow-colour: var(
			--colour-border-accent-subtle,
			var(--colour-border-neutral-subtle)
		);
	}

	.accordion .heading button[aria-expanded="true"] {
		--button-background-colour: var(
			--colour-fill-accent-bold,
			var(--colour-fill-neutral-mid)
		);
		--icon-colour: var(--colour-ui-reverse);
		border-radius: var(--border-radius-normal) var(--border-radius-normal) 0
			0;
	}

	.accordion .heading button .icon-and-label-container {
		--container-gap: var(--space-xs);
		--label-size: var(--font-size-lg);
		--icon-size: 1.5rem;
		flex: 1;
		text-align: left;
	}

	.accordion .heading button[aria-expanded="true"] .icon-and-label-container {
		--label-colour: var(--colour-ui-reverse);
	}

	.accordion .heading button > .icon.caret {
		--icon-size: 1rem;
		transition: rotate var(--transition-ease-medium);
		transform-origin: center;
	}

	.accordion .heading button[aria-expanded="true"] > .icon.caret {
		rotate: x 180deg;
	}

	.accordion .heading button .tag {
		font-size: var(--font-size-lg);
		font-weight: 500;
		color: var(--colour-ui-accent-subtle, var(--colour-ui-neutral-subtle));
		line-height: 1.2;
		text-align: center;
		min-width: 1rem;
	}

	.accordion .heading button[aria-expanded="true"] .tag {
		color: var(--colour-ui-reverse);
	}

	.accordion .panel {
		border: 1px solid
			var(--colour-fill-accent-bold, var(--colour-fill-neutral-mid));
		border-radius: 0 0 var(--border-radius-normal)
			var(--border-radius-normal);
	}

	.accordion .panel :where(p, li, a) {
		font-size: var(--font-size-xs);
		line-height: 1.2;
	}

	.accordion .panel > .content {
		padding: var(--space-lg);
		font-size: var(--font-size-base);
	}

	.accordion .panel > .content :where(p, li, a) {
		font-size: inherit;
		line-height: 1.6;
	}
</style>

<script>
	//
	// Imports
	//

	import { eventControl } from "src/utilities/event";
	import {
		isInViewport,
		scrollIntoView,
		stopVideo,
	} from "../utilities/helpers";

	//
	// Module
	//

	let accordion = (() => {
		//
		// DOM Setup
		//

		let setupDOM = (heading) => {
			// Create a button
			let btn = document.createElement("button");

			// Add heading nodes to the button
			while (heading.firstChild) {
				btn.append(heading.firstChild);
			}

			// Remove duplicate heading content and replace it with the button
			heading.innerHTML = "";
			heading.append(btn);

			// Hide the content
			heading.nextElementSibling.setAttribute("hidden", "");

			// Change button type
			btn.setAttribute("type", "button");

			// Add ARIA
			btn.setAttribute("aria-expanded", "false");

			// Flag heading as initialized
			heading.setAttribute("data-initialized", "");
		};

		//
		// Methods
		//

		/**
		 * Toggle accordion visibility
		 * @param  {Node} targetAccordion The accordion to show
		 */
		let toggleAccordion = (targetAccordion) => {
			// Get the accordion group, if there is one
			let accordionGroup = targetAccordion.closest(".accordion-group");

			// If there is an accordion group, check whether it allows multiple open panels, default to false
			let allowMultiple = accordionGroup
				? accordionGroup.hasAttribute("data-allow-multiple")
				: false;

			// Get the target accordion toggle button
			let targetToggle = targetAccordion.querySelector(
				".accordion .heading button",
			);

			// Get the target accordion panel
			let targetPanel =
				targetAccordion.querySelector(".accordion .panel");

			// Check if the target panel is expanded
			let isExpanded =
				targetToggle.getAttribute("aria-expanded") == "true";

			// Get the active toggle button
			let activeToggle = accordionGroup
				? accordionGroup.querySelector('[aria-expanded="true"]')
				: null;

			// Get the active panel
			let activePanel = activeToggle
				? activeToggle.closest(".accordion").querySelector(".panel")
				: null;

			// If the active panel contains a video, pause it
			if (
				activePanel &&
				(activePanel.matches("video, .embed") ||
					activePanel.querySelector("video, .embed"))
			) {
				stopVideo(activePanel);
			}

			// If accordion group does not allows multiple open panels and the target toggle is not the active toggle
			if (
				!allowMultiple &&
				activeToggle &&
				activeToggle !== targetToggle
			) {
				// Reset the active toggle
				activeToggle.setAttribute("aria-expanded", "false");

				// Hide the active panel
				activePanel.setAttribute("hidden", "");
			}

			// If the target is collapsed, expand it
			if (!isExpanded) {
				// Set the toggle to expanded
				targetToggle.setAttribute("aria-expanded", "true");

				// Show the target panel
				targetPanel.removeAttribute("hidden");
			}

			// If the target is expanded, collapse it
			else if (isExpanded) {
				// Set the expanded state on the triggering element
				targetToggle.setAttribute("aria-expanded", "false");

				// Hide the target panel
				targetPanel.setAttribute("hidden", "");
			}

			// Get the transition length and convert it to a number
			let transitionLength = Number(
				getComputedStyle(targetAccordion)
					.getPropertyValue("transition-duration")
					.replace(/[^0-9\.]/g, ""),
			);

			setTimeout(() => {
				// If the target toggle is not in view after the transition
				if (!isInViewport(targetToggle)) {
					// Scroll it into view
					scrollIntoView(targetToggle);
				}
			}, transitionLength * 1000);
		};

		//
		// Event Handlers
		//

		let onClick = (event) => {
			if (!event.target.matches(".accordion .heading button")) return;
			let targetAccordion = event.target.closest(".accordion");
			toggleAccordion(targetAccordion);
		};

		//
		// Init and Destroy
		//

		let init = () => {
			// Get all accordion headings
			let headings = document.querySelectorAll(
				".accordion .heading:not([data-initialized])",
			);
			for (let heading of headings) {
				setupDOM(heading);
			}
			eventControl.add({
				selector: ".accordion",
				eventType: "click",
				fn: onClick,
			});
		};

		return { init };
	})();

	//
	// Inits
	//

	accordion.init();
	eventControl.add({
		elem: document,
		eventType: "astro:after-swap",
		fn: accordion.init,
	});
</script>
