---

import IconCaretSmall from "./icons/IconCaretDown_14.astro";
import IconCaretMedium from "./icons/IconCaretDown_16.astro";
import IconCaretLarge from "./icons/IconCaretDown_20.astro";

import { toKebabCase } from "../utilities/helpers";

const { title, id, dataset, crossIconSize = 'large' } = Astro.props;

let datasetAttrs = {};
if (dataset) {
	for (let data of dataset) {
		datasetAttrs[`data-${data.key}`] = data.value;
	}
}

const crossIcons = {
	small: IconCaretSmall,
	medium: IconCaretMedium,
	large: IconCaretLarge,
}

let IconCross = crossIcons[crossIconSize];

---

<h3 id={id ? id : toKebabCase(title)} class="accordion" {...datasetAttrs}>

	<span class="icon-and-label-container">
		<slot name="button-icon"/>
		<span class="label-container">
			<span class="label">{title}</span>
		</span>
	</span>

	<slot name="button-meta"/>

	<IconCross />

</h3>

<div>
	<slot />
</div>

<style is:global>

	.accordion-group {
		margin: 2.5rem 0;
	}

	.accordion {
		margin: 0.5rem 0 0;
		scroll-margin-top: 2rem;
	}

	[data-mode="assessment"] .accordion {
		scroll-margin-top: 5.75rem;
	}

	.accordion button {
		--button-background-colour: var(--colour-fill-accent-subtle-muted);
		--button-border-radius: var(--border-radius-normal);
		--button-ui-colour: var(--colour-ui-neutral);
		--icon-colour: var(--colour-ui-accent);
		--icon-size: 1.25rem;

		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: 1rem;
		height: auto;
		width: 100%;
		padding: 0.75rem 1.25rem 0.75rem 1rem;
		outline-color: transparent;
		transition: 
			background-color var(--transition-linear-fast),
			outline-color var(--transition-linear-fast);
	}

	.accordion button:is(:hover, :focus-visible) {
		--button-background-colour: transparent;
		--button-ui-colour: var(--button-ui-colour);
	}

	.accordion button:not([aria-expanded="true"]):is(:hover, :focus-visible) {
		outline: 2px solid var(--colour-border-accent-subtle-muted);
		outline-offset: -1px;
	}

	.accordion button[aria-expanded="true"] {
		--button-background-colour: var(--colour-fill-accent-bold-muted);
		--icon-colour: var(--colour-ui-reverse);
		border-radius: var(--border-radius-normal) var(--border-radius-normal) 0 0;
	}

	.accordion button .icon-and-label-container {
		--container-gap: 0.75rem;
		--label-size: 1.5rem;
		flex-grow: 1;
	}

	.accordion button[aria-expanded="true"] .icon-and-label-container {
		--label-colour: var(--colour-ui-reverse);
	}

	.accordion button > .icon.caret {
		transition: rotate 0.2s ease;
		transform-origin: center;
	}

	.accordion button[aria-expanded="true"] > .icon.caret {
		rotate: x 180deg;
	}

	.accordion button .considerations-status {
		--label-colour: var(--colour-ui-accent-subtle);
	}

	.accordion button[aria-expanded="true"] .considerations-status {
		--label-colour: var(--colour-ui-reverse);
	}

	.accordion + * {
		border: 1px solid var(--colour-border-accent-bold-muted);
		border-radius: 0 0 var(--border-radius-normal) var(--border-radius-normal);
	}
	
	.accordion + * :where(p, li, a) {
		font-size: 1rem;
		line-height: 1.2;
	}

</style>

<script>

    //
    // HELPER METHODS
    //

	/**
	 * Stop all actively playing videos within a container element
	 * @param  {Event} elem The container element
	 */
	let stopVideo = (elem) => {
		let iframe = elem.matches('iframe') ? elem : elem.querySelector('iframe');
		let video = elem.matches('video') ? elem : elem.querySelector('video');
		if (iframe) {
			let iframeSrc = iframe.src;
			iframe.src = iframeSrc;
		}
		if (video) {
			video.pause();
		}
	};

	/**
	 * Scroll an element into view
	 * @param  {Node} elem The elem to show
	 */
	let scrollIntoView = (elem, options:{block?:string} = {}) => {

		let { block = 'start' } = options; 

		let rect = elem.getBoundingClientRect();
		let fullyInView = (
			rect.top >= 0 &&
			rect.left >= 0 &&
			rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
			rect.right <= (window.innerWidth || document.documentElement.clientWidth)
		);

		if (!fullyInView) {

			elem.scrollIntoView({
				behavior: 'auto',
				block: block,
			});

		}

	}

	/**
	 * Checks if an element is in the viewport.
	 * @param {HTMLElement} elem - The element to check.
	 * @param {Object} [options] - Options for visibility.
	 * @param {boolean} [options.fully=false] - Whether the element must be fully in view.
	 * @returns {boolean} True if element is in view (fully or partially).
	 */
	let isInViewport = (elem, options:{fully?:boolean} = {}) => {

		let { fully = false } = options
		let rect = elem.getBoundingClientRect()

		let viewHeight = window.innerHeight || document.documentElement.clientHeight
		let viewWidth = window.innerWidth || document.documentElement.clientWidth

		if (fully) {
			return (
				rect.top >= 0 &&
				rect.left >= 0 &&
				rect.bottom <= viewHeight &&
				rect.right <= viewWidth
			)
		}

		return (
			rect.bottom > 0 &&
			rect.right > 0 &&
			rect.top < viewHeight &&
			rect.left < viewWidth
		)

	}


    //
	// DOM SETUP
	//

	/**
	* Add buttons and hide content on page load
	*/
	let setupAccordionDOM = () => {

		// Get all accordion headings
		let headings = document.querySelectorAll('.accordion');

		// Wrap heading content in a button
		for (let heading of headings) {

			// Create a button
			let btn = document.createElement('button');

			// Add heading nodes to the button
			while (heading.firstChild) {
				btn.append(heading.firstChild);
			}

			// Remove duplicate heading content and replace it with the button
			heading.innerHTML = '';
			heading.append(btn);

			// Hide the content
			heading.nextElementSibling.setAttribute('hidden', '');

			// Change button type
			btn.setAttribute('type', 'button');

			// Add ARIA
			btn.setAttribute('aria-expanded', 'false');

		}

	}


	//
	//	EVENT HANDLERS
	//

	/**
	 * Show content on click events
	 * @param  {Event} event The event object
	 */
	let accordionClickHandler = (event) => {

		// Only run on accordion buttons
		let targetAccordion = event.target.closest('.accordion');
		if (!targetAccordion) return;

		// Toggle accordion visibility
		toggleAccordion(targetAccordion);

	}



    //
    // METHODS
    //


	/**
	 * Toggle accordion visibility
	 * @param  {Node} targetAccordion The accordion to show
	 */
	let toggleAccordion = (targetAccordion) => {

		// Get the accordion group, if there is one
		let accordionGroup = targetAccordion.closest('.accordion-group');
		
		// If there is an accordion group, check whether it allows multiple open panels, default to false
		let allowMultiple = accordionGroup ? accordionGroup.hasAttribute('data-allow-multiple') : false;

		// Get the target accordion toggle button
		let targetToggle = targetAccordion.querySelector('button');

		// Get the target accordion panel
		let targetPanel = targetAccordion.nextElementSibling;

		// Check if the target panel is expanded
		let isExpanded = targetToggle.getAttribute('aria-expanded') == 'true';
		
		// Get the active toggle button
		let activeToggle = accordionGroup ? accordionGroup.querySelector('[aria-expanded="true"]') : null;

		// Get the active panel
		let activePanel = activeToggle ? activeToggle.closest('.accordion').nextElementSibling : null;

		// If the active panel contains a video, pause it
		if (activePanel && (activePanel.matches('video, .embed') || activePanel.querySelector('video, .embed'))) {
			stopVideo(activePanel);
		}

		// If accordion group does not allows multiple open panels and the target toggle is not the active toggle 
		if (!allowMultiple && activeToggle && activeToggle !== targetToggle) {

			// Reset the active toggle
			activeToggle.setAttribute('aria-expanded', 'false');
			
			// Hide the active panel
			activePanel.setAttribute('hidden', '');

		}

		// If the target is collapsed, expand it
		if (!isExpanded) {

			// Set the toggle to expanded
			targetToggle.setAttribute('aria-expanded', 'true');

			// Show the target panel
			targetPanel.removeAttribute('hidden');

		}

		// If the target is expanded, collapse it
		else if (isExpanded) {

			// Set the expanded state on the triggering element
			targetToggle.setAttribute('aria-expanded', 'false');

			// Hide the target panel
			targetPanel.setAttribute('hidden', '');

		}

        // Get the transition length and convert it to a number
        let transitionLength = Number(getComputedStyle(targetAccordion).getPropertyValue('transition-duration').replace(/[^0-9\.]/g, ''));

        setTimeout(() => {

            // If the target toggle is not in view after the transition
            if (!isInViewport(targetToggle)) {

                // Scroll it into view
                scrollIntoView(targetToggle);

            }

        }, transitionLength * 1000);

    }


    //
    // INITS
    //

    let initAccordion = function() {

		setupAccordionDOM();

		document.addEventListener('click', accordionClickHandler);

        document.addEventListener('astro:before-swap', () => {

            document.removeEventListener('click', accordionClickHandler);

        })

    }

    // Initialize the component
    initAccordion();

    // Re-initialize the component after swapping pages
    document.addEventListener('astro:after-swap', initAccordion);

	// TODO: Update the accordion init based on the search init/destroy 

</script>


