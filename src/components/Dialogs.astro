---
import IconCross from "./icons/IconCross_16.astro";
import IconWarning from "./icons/IconWarning_24.astro";
import IconCaretDown from "./icons/IconCaretDown_20.astro";
import IconCopy from "./icons/IconCopy_20.astro";
import IconXmark from "./icons/IconXmark_20.astro";

let schoolList = {
	east: [
		"Alternative Pathways to Graduation",
		"Arnold H. McLeod School",
		"Beaverbrook School",
		"Bernice MacNaughton High School",
		"Bessborough School",
		"Birchmount School",
		"Caledonia Regional High School",
		"Claude D. Taylor School",
		"Dorchester Consolidated School",
		"Edith Cavell School",
		"Evergreen Park School",
		"Forest Glen School",
		"Frank L. Bowser School",
		"Harrison Trimble High School",
		"Havelock School",
		"Hillsborough Elementary School",
		"Lewisville Middle School",
		"Lou MacNarin School",
		"Magnetic Hill School",
		"Maplehurst Middle School",
		"Marshview Middle School",
		"Moncton High School",
		"Mountain View School",
		"Northrop Frye School",
		"Petitcodiac Regional School",
		"Port Elgin Regional School",
		"Queen Elizabeth School",
		"Riverside Consolidated School",
		"Riverview East School",
		"Riverview High School",
		"Riverview Middle School",
		"Salem Elementary School",
		"Salisbury Elementary School",
		"Salisbury Regional School",
		"Shediac Cape School",
		"Sunny Brae Middle School",
		"Tantramar Regional High School",
		"Wabanaki School",
		"West Riverview School",
	],
	north: [
		"Bathurst High School",
		"Bathurst Transition Center",
		"Bengals II",
		"Blackville School",
		"Bonar Law Memorial School",
		"Campbellton Learning Center",
		"Campbellton Middle School",
		"Dalhousie Learning Center",
		"Dalhousie Regional High School",
		"Dr. Losier Middle School",
		"Eleanor W. Graham Middle School",
		"Gretna Green School",
		"Harcourt School",
		"Jacquet River School",
		"James M. Hill Memorial High School",
		"Janeville Elementary School",
		"King Street Elementary School",
		"L.E. Reinsborough School",
		"Lord Beaverbrook School",
		"Max Aitken Academy",
		"Millerton Elementary & Junior High School",
		"Miramichi Rural School",
		"Miramichi Valley High School",
		"Napan Elementary School",
		"Nelson Rural School",
		"North & South Esk Elementary School",
		"North & South Esk Regional High School",
		"Parkwood Heights Elementary School",
		"Pulamoo II",
		"Rexton Elementary School",
		"Sugarloaf Senior High School",
		"Superior Middle School",
		"Tabusintac Community School",
		"Terry Fox Elementary School",
		"Tommies II",
	],
	south: [
		"Apohaqui Elementary School",
		"Back Bay Elementary School",
		"Barnhill Memorial School",
		"Bayside Middle School",
		"Bayview School",
		"Beaconsfield Middle School",
		"Belleisle Elementary School",
		"Belleisle Regional High School",
		"Blacks Harbour School",
		"Campobello Island Consolidated School",
		"Centennial School",
		"Champlain Heights School",
		"Chris Saunders Memorial Elementary School",
		"Compass Education Support Program-Saint John",
		"Compass Education Support Program-Sussex",
		"Deer Island Community School",
		"Dr. A. T. Leatherbarrow Primary School",
		"Fairvale Elementary School",
		"Forest Hills School",
		"Fundy Middle and High School",
		"Fundy Shores School",
		"Glen Falls School",
		"Grand Bay Primary School",
		"Grand Manan Community School",
		"Hammond River Valley Elementary School",
		"Hampton Elementary School",
		"Hampton High School",
		"Hampton Middle School",
		"Harbour View High School",
		"Harry Miller Middle School",
		"Hazen-White-St. Francis School",
		"Inglewood School",
		"Island View School",
		"Kennebecasis Park Elementary School",
		"Kennebecasis Valley High School",
		"Lakefield Elementary School",
		"Lakewood Heights School",
		"Lawrence Station Elementary School",
		"Loch Lomond School",
		"M. Gerald Teed Memorial School",
		"Macdonald Consolidated School",
		"Millidgeville North School",
		"Milltown Elementary School",
		"Norton Elementary School",
		"Prince Charles School",
		"Princess Elizabeth School",
		"Quispamsis Elementary School",
		"Quispamsis Middle School",
		"River Valley Middle School",
		"Rothesay Elementary School",
		"Rothesay High School",
		"Rothesay Park School",
		"Saint John High School",
		"Saint Rose School",
		"Seaside Park Elementary School",
		"Simonds High School",
		"Sir James Dunn Academy",
		"St. George Elementary School",
		"St. John the Baptist/King Edward School",
		"St. Malachy's Memorial High School",
		"St. Martins School",
		"St. Stephen Elementary School",
		"St. Stephen High School",
		"St. Stephen Middle School",
		"Sussex Corner Elementary School",
		"Sussex Elementary School",
		"Sussex Middle School",
		"Sussex Regional High School",
		"Vincent Massey Elementary School",
		"Westfield School",
		"White Head Elementary School",
	],
	west: [
		"Andover Elementary School",
		"Assiniboine Avenue Elementary School",
		"Barkers Point Elementary School",
		"Bath Community School",
		"Bliss Carman Middle School",
		"Bristol Elementary School",
		"Burton Elementary School",
		"Cambridge-Narrows Community School",
		"Canterbury High School",
		"Carleton North High School",
		"Central New Brunswick Academy",
		"Centreville Community School",
		"Chipman Elementary School",
		"Chipman Forest Avenue School",
		"Connaught Street School",
		"Cuffman Street Elementary",
		"Devon Middle School",
		"Doaktown Elementary School",
		"Donald Fraser Memorial School",
		"Florenceville Elementary School",
		"Florenceville Middle School",
		"Forest Hill Elementary School",
		"Fredericton Education Centre (Enterprise Centre)",
		"Fredericton High School",
		"Gagetown School",
		"Garden Creek School",
		"Geary Elementary Community School",
		"George Street Middle School",
		"Gesner Street Elementary School",
		"Gibson-Neill Memorial Elementary School",
		"Hanwell Park Academy",
		"Harold Peterson Middle School",
		"Hartland Community School",
		"Harvey Elementary School",
		"Harvey High School",
		"Hubbard Elementary School",
		"John Caldwell School",
		"Keswick Ridge School",
		"Keswick Valley Memorial School",
		"Kingsclear Community School",
		"Leo Hayes High School",
		"Lincoln Elementary Community School",
		"Liverpool Street Elementary School",
		"McAdam Elementary School",
		"McAdam High School",
		"Meduxnekeag Consolidated School",
		"Minto Elementary Middle School",
		"Minto Memorial High School",
		"Montgomery Street Elementary School",
		"Nackawic Elementary School",
		"Nackawic Middle School",
		"Nackawic Senior High School",
		"Nashwaak Valley School",
		"Nashwaaksis Middle School",
		"New Maryland Elementary School",
		"Oromocto High School",
		"Park Street Elementary School",
		"Perth-Andover Middle School",
		"Priestman Street Elementary School",
		"Ridgeview Middle School",
		"Royal Road Elementary School",
		"Saint Mary's Academy",
		"Southern Victoria High School",
		"Stanley Consolidated School",
		"Summerhill Street Elementary School",
		"Sunbury West School",
		"Sunset Acres Elementary School",
		"Tobique Valley High School",
		"Townsview School",
		"Upper Miramichi Elementary School",
		"Woodstock High School",
	],
};
---

<dialog id="create-assessment" aria-labelledby="create-assessment-heading">
	<!-- TODO: Link dialog to heading with aria-labelledby="#heading-id" so that screen readers will announce the heading when the dialog is opened -->
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Create Assessment Dialog"><IconXmark /></button
	>

	<h2 id="create-assessment-heading" class="heading">Create New Assessment</h2>

	<div
		class="callout"
		data-style="shaded"
		data-vibrancy="vivid"
		data-fit="compact"
		data-theme="yellow"
	>
		<div class="icon-container">
			<IconWarning />
		</div>

		<div class="text-container">
			<p>
				All information collected below is used exclusively for report
				generation and is not stored on a central server.
			</p>
		</div>
	</div>

	<form id="create-assessment-form">
		<label for="create-district-select">School District</label>
		<div class="select-container">
			<select id="create-district-select" name="district" required>
				<option value="">Select a district...</option>
				<option value="ASD-W">ASD-W</option>
				<option value="ASD-N">ASD-N</option>
				<option value="ASD-E">ASD-E</option>
				<option value="ASD-S">ASD-S</option>
			</select>
			<IconCaretDown />
		</div>

		<label for="create-school-select">School</label>
		<div class="select-container">
			<select id="create-school-select" name="school" required disabled>
				<option value="">Select a school...</option>
				<optgroup label="ASD-W Schools" class="asd-w-schools" hidden>
					{
						schoolList.west.map((school) => (
							<option value={school}>{school}</option>
						))
					}
				</optgroup>
				<optgroup label="ASD-N Schools" class="asd-n-schools" hidden>
					{
						schoolList.north.map((school) => (
							<option value={school}>{school}</option>
						))
					}
				</optgroup>
				<optgroup label="ASD-E Schools" class="asd-e-schools" hidden>
					{
						schoolList.east.map((school) => (
							<option value={school}>{school}</option>
						))
					}
				</optgroup>
				<optgroup label="ASD-S Schools" class="asd-s-schools" hidden>
					{
						schoolList.south.map((school) => (
							<option value={school}>{school}</option>
						))
					}
				</optgroup>
			</select>
			<IconCaretDown />
		</div>

		<label for="create-reporting-year-input">Reporting Year</label>
		<p class="instructions">Year must be 4 characters in length.</p>
		<div class="input-container">
			<input
				id="create-reporting-year-input"
				name="reportingYear"
				type="text"
				required
				placeholder="Enter a year..."
				pattern="\\d{4}"
			/>
		</div>

		<label for="create-assessor-input">Assessor(s)</label>
		<div class="input-container">
			<input
				id="create-assessor-input"
				type="text"
				placeholder="Enter a name..."
			/>
			<button class="add-assessor" type="button">
				<span class="icon-and-label-container">
					<IconCross />
					<span class="label-container">
						<span class="label"> Add </span>
					</span>
				</span>
			</button>
		</div>
		<ul class="assessor-list" data-field="assessors" hidden></ul>

		<button
			id="create-assessment-submit"
			type="button"
			data-size="large"
			data-style="bold">Create and Start Editing</button
		>
	</form>
</dialog>

<dialog id="select-assessor">
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Assessment Details Dialog"><IconXmark /></button
	>
	<!-- TODO: Update dialog close button with proper labels -->

	<h2 class="heading">Select Active Assessor</h2>
	<p class="instructions">
		Choose the person currently making changes to this assessment.
	</p>
	<p class="instructions">
		This helps maintain clear version history and makes it easier to
		understand who last updated the data when it's shared with others.
	</p>

	<div
		class="callout"
		data-style="shaded"
		data-vibrancy="vivid"
		data-fit="compact"
		data-theme="yellow"
	>
		<div class="icon-container">
			<IconWarning />
		</div>
		<div class="text-container">
			<p>
				This step is optional, but recommended for collaborative
				workflows.
			</p>
		</div>
	</div>

	<form>
		<fieldset>
			<legend>Active Assessor</legend>
			<div class="radio-group assessor-radio-group"></div>
		</fieldset>

		<div class="button-group">
			<button
				class="close-dialog"
				type="button"
				data-size="large"
				data-style="outline">Skip</button
			>
			<button
				class="update-assessor"
				type="button"
				data-size="large"
				data-style="bold">Save</button
			>
		</div>
	</form>
</dialog>

<dialog id="change-assessor">
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Assessment Details Dialog"><IconXmark /></button
	>
	<!-- TODO: Update dialog close button with proper labels -->

	<h2 class="heading">Update Active Assessor</h2>
	<p class="instructions">
		Choose the person currently making changes to this assessment.
	</p>
	<p class="instructions">
		This helps maintain clear version history and makes it easier to
		understand who last updated the data when it's shared with others.
	</p>

	<form>
		<fieldset>
			<legend>Active Assessor</legend>
			<div class="radio-group assessor-radio-group"></div>
		</fieldset>

		<!-- Todo: Need a way to set to no active assessor -->

		<button
			class="update-assessor"
			type="button"
			data-size="large"
			data-style="bold">Save</button
		>
	</form>
</dialog>

<dialog id="info-assessment">
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Assessment Details Dialog"><IconXmark /></button
	>

	<h2 class="heading">Assessment Information</h2>

	<div
		class="callout meta"
		data-style="shaded"
		data-vibrancy="vivid"
		data-fit="compact"
	>
		<span class="status" data-field="status"></span>
		<span>Date Created: <span data-field="dateCreated"></span></span>
		<span>Date Last Modified: <span data-field="dateModified"></span></span>
		<span data-restrict-assessor="true">Active Assessor: <span data-field="activeAssessor"></span></span>
	</div>

	<dl>
		<div class="detail-container">
			<dt>School District:</dt>
			<dd data-field="district"></dd>
		</div>
		<div class="detail-container">
			<dt>School:</dt>
			<dd data-field="school"></dd>
		</div>
		<div class="detail-container">
			<dt>Reporting Year:</dt>
			<dd data-field="reportingYear"></dd>
		</div>
		<div class="detail-container">
			<dt>Assessor(s):</dt>
			<dd data-field="assessors"></dd>
		</div>
	</dl>

	<button
		class="open-dialog"
		data-dialog="update-assessment"
		type="button"
		data-size="large"
		data-style="bold">Update Information</button
	>
</dialog>

<dialog id="update-assessment">
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Assessment Details Dialog"><IconXmark /></button
	>

	<h2 class="heading">Update Information</h2>

	<form id="update-assessment-form">
		<fieldset>
			<legend>Status</legend>
			<div class="radio-group">
				<div class="radio-container">
					<input
						type="radio"
						name="status"
						id="update-status-in-progress"
						value="In Progress"
						checked
					/>
					<label for="update-status-in-progress">In Progress</label>
				</div>
				<div class="radio-container">
					<input
						type="radio"
						name="status"
						id="update-status-complete"
						value="Complete"
					/>
					<label for="update-status-complete">Complete</label>
				</div>
			</div>
		</fieldset>

		<label for="update-district-select">School District</label>
		<div class="select-container">
			<select name="district" id="update-district-select">
				<option value="">Select a district...</option>
				<option value="ASD-W">ASD-W</option>
				<option value="ASD-N">ASD-N</option>
				<option value="ASD-E">ASD-E</option>
				<option value="ASD-S">ASD-S</option>
			</select>
			<IconCaretDown />
		</div>

		<label for="update-school-select">School</label>
		<div class="select-container">
			<select name="school" id="update-school-select">
				<option value="">Select a school...</option>
				<optgroup label="ASD-W Schools" class="asd-w-schools" hidden>
					{
						schoolList.west.map((school) => (
							<option value={school}>{school}</option>
						))
					}
				</optgroup>
				<optgroup label="ASD-N Schools" class="asd-n-schools" hidden>
					{
						schoolList.north.map((school) => (
							<option value={school}>{school}</option>
						))
					}
				</optgroup>
				<optgroup label="ASD-E Schools" class="asd-e-schools" hidden>
					{
						schoolList.east.map((school) => (
							<option value={school}>{school}</option>
						))
					}
				</optgroup>
				<optgroup label="ASD-S Schools" class="asd-s-schools" hidden>
					{
						schoolList.south.map((school) => (
							<option value={school}>{school}</option>
						))
					}
				</optgroup>
			</select>
			<IconCaretDown />
		</div>

		<label for="update-reporting-year-input">Reporting Year</label>
		<p class="instructions">Year must be 4 characters in length.</p>
		<div class="input-container">
			<input
				id="update-reporting-year-input"
				name="reportingYear"
				type="text"
				required
				placeholder="Enter a year..."
				pattern="\\d{4}"
			/>
		</div>

		<label for="update-assessor-input">Assessor(s)</label>
		<div class="input-container">
			<input
				id="update-assessor-input"
				name="assessor"
				type="text"
				placeholder="Enter a name..."
			/>
			<button class="add-assessor" type="button">
				<span class="icon-and-label-container">
					<IconCross />
					<span class="label-container">
						<span class="label"> Add </span>
					</span>
				</span>
			</button>
		</div>
		<ul class="assessor-list" data-field="assessors" hidden></ul>

		<div class="button-group">
			<button
				class="close-dialog"
				type="button"
				data-size="large"
				data-style="outline">Cancel</button
			>
			<button
				class="update-assessment"
				type="button"
				data-size="large"
				data-style="bold">Save</button
			>
		</div>
	</form>
</dialog>

<dialog id="open-assessment">
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Open Assessment Dialog"><IconXmark /></button
	>

	<h2 class="heading">Open Assessment</h2>

	<section>
		<h3>Import</h3>
		<div class="button-group">
			<button
				id="upload-csv-button"
				type="button"
				data-size="large"
				data-style="bold">Upload .csv</button
			>
			<button
				id="paste-url-button"
				type="button"
				data-size="large"
				data-style="bold">Paste URL</button
			>
		</div>
	</section>

	<section>
		<h3>Saved Assessments</h3>
		<ul id="saved-assessment-list" class="card-group"></ul>
	</section>
</dialog>

<dialog id="status-warning">
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Open Assessment Dialog"><IconXmark /></button
	>

	<h2 class="heading">Reopen Assessment for Editing?</h2>

	<div
		class="callout"
		data-style="shaded"
		data-vibrancy="vivid"
		data-fit="compact"
		data-theme="yellow"
	>
		<div class="icon-container">
			<IconWarning />
		</div>
		<div class="text-container">
			<p>This assessment is currently marked as <strong>Complete</strong>. To make changes, its status will be updated to <strong>In Progress</strong>.</p>
			<!-- <p>Do you want to continue?</p> -->
		</div>
	</div>

	<p class="instructions">Do you want to continue?</p>


	<div class="button-group">
		<button
			id="upload-csv-button"
			type="button"
			data-size="large"
			data-style="outline">Cancel</button
		>
		<button
			id="paste-url-button"
			type="button"
			data-size="large"
			data-style="bold">Edit Assessment</button
		>
	</div>

</dialog>

<dialog id="export-warning" open>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Open Assessment Dialog"><IconXmark /></button
	>

	<h2 class="heading">Unsaved Changes</h2>

	<div
		class="callout"
		data-style="shaded"
		data-vibrancy="vivid"
		data-fit="compact"
		data-theme="yellow"
	>
		<div class="icon-container">
			<IconWarning />
		</div>
		<div class="text-container">
			<p>You've made changes that haven't been exported.</p>
			<p data-field="lastSavedAt"></p>
			
		</div>
	</div>

	<p class="instructions">Make sure to export a backup if you want to keep your edits.</p>

	<div class="button-group">
		<button
		class="close-dialog"
		type="button"
		data-size="large"
		data-style="outline">Continue Without Exporting</button
		>
		<button
			class="open-dialog"
			data-dialog="save-assessment"
			type="button"
			data-size="large"
			data-style="bold">Export Changes</button
		>
	</div>

</dialog>

<dialog id="save-assessment">
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Save Assessment Dialog"><IconXmark /></button
	>

	<h2 class="heading">Save Assessment(s)</h2>

	<form>
		<h3>Update Status</h3>
		<fieldset>
			<!-- <legend>Status</legend> -->
			<div class="radio-group">
				<div class="radio-container">
					<input
						type="radio"
						name="status"
						id="save-status-in-progress"
						value="In Progress"
						checked
					/>
					<label for="save-status-in-progress">In Progress</label>
				</div>
				<div class="radio-container">
					<input
						type="radio"
						name="status"
						id="save-status-complete"
						value="Complete"
					/>
					<label for="save-status-complete">Complete</label>
				</div>
			</div>
		</fieldset>
		<button
			class="update-assessment"
			type="button"
			data-size="large"
			data-style="bold">Save Status</button
		>
	</form>

	<section>
		<h3>Save/Share Link</h3>
		<p class="instructions">
			This personalized link lets you access your assessment(s) from any
			device or share them with another assessor for collaboration.
		</p>
		<div class="url-container" data-style-as="input-container">
			<div id="save-url" class="url" data-style-as="input">
				<span
					>https://middle.nbed.ca/conditions-for-success/#save=N4IgZglhg7ggkrughg8togghghtyggg0</span
				>
			</div>
			<button
				id="copy-save-url-button"
				class="save-assessment"
				type="button"
			>
				<span class="icon-and-label-container">
					<IconCopy />
					<span class="label-container">
						<span class="label"> Copy </span>
					</span>
				</span>
			</button>
		</div>
	</section>

	<section>
		<h3>Save File</h3>
		<div
			class="callout"
			data-style="shaded"
			data-vibrancy="vivid"
			data-fit="compact"
			data-theme="yellow"
		>
			<div class="icon-container">
				<IconWarning />
			</div>
			<div class="text-container">
				<p>
					To prevent data loss, please download a .csv copy of your
					assessments regularly, as your data is not stored on a
					central server.
				</p>
			</div>
		</div>
		<button
			id="save-download-file"
			class="save-assessment"
			data-style="bold"
			type="button"
			data-size="large">Download .csv</button
		>
	</section>
</dialog>

<style is:global>
	dialog {
		background-color: var(--colour-background);
		border-radius: var(--border-radius-normal);
		border: none;
		padding: 3rem;
		width: min(100%, 636px);
		max-height: calc(100% - 3rem);
	}

	dialog:focus {
		outline: none;
		caret-color: transparent;
	}

	dialog::backdrop {
		background-color: var(--colour-fill-neutral-bold-muted);
		opacity: 0.8;
	}

	dialog button.close-dialog:has(.icon:only-child) {
		--button-background-colour: transparent;
		--button-background-colour-hover: var(
			--colour-fill-neutral-subtle-muted
		);
		--icon-size: 1.25rem;
		float: right;
		margin: 0 0 1rem 1.5rem;
	}

	dialog section {
		margin: 1.5rem 0;
	}

	dialog > .heading {
		margin: 0 0 1.5rem;
		padding: 0 0 1rem;
		border-bottom: 2px solid var(--colour-border-neutral-subtle-muted);
	}

	dialog section > h3 {
		margin: 1rem 0;
	}

	dialog .instructions {
		font-size: 1rem;
		line-height: 1.4;
		margin: 0 0 0.75rem;
		color: var(--colour-ui-neutral-subtle);
	}

	dialog .callout {
		margin: 1.5rem 0;
	}

	dialog section:has(.card-group:empty) {
		display: none;
	}

	/* TODO: Remove bottom margin of previous to last section when the other is display:none */

	form fieldset {
		margin: 0;
		padding: 0;
		border: none;
	}

	form .radio-group {
		display: flex;
		flex-flow: row;
		align-items: center;
		gap: 1rem;
		margin: 0.5rem 0;
	}

	form .radio-container {
		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: 0.5rem;
	}

	form .radio-container label {
		font-size: 1rem;
		font-weight: 400;
		line-height: 1;
		margin: 0;
	}

	form :is(label, legend) {
		display: block;
		font-size: 1.25rem;
		font-weight: 600;
		margin: 1.25rem 0 0.5rem;
	}

	.input-container,
	.select-container,
	[data-style-as="input-container"] {
		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		position: relative;
		border-radius: var(--border-radius-normal);
		border: 2px solid var(--colour-border-neutral-subtle-muted);
		width: 100%;
		height: 3rem;
		padding: 0;
		margin: 0;
	}

	input[type="text"],
	select,
	[data-style-as="input"] {
		display: flex;
		align-items: center;
		appearance: none;
		border: none;
		background: none;
		height: 100%;
		min-width: 0; /* Fixed text-overflow inside flex item */
		padding: 0 1rem;
		margin: 0;
		flex-grow: 1;
		font-size: 1rem;
		line-height: 1.2;
	}

	input[type="text"]::placeholder {
		color: var(--colour-ui-neutral-subtle);
	}

	.url-container {
		color: var(--colour-ui-neutral-subtle);
	}

	.url-container .url span {
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
	}

	.select-container .icon {
		width: 1.25rem;
		position: absolute;
		top: 0.75rem;
		right: 0.75rem;
	}

	:is(.input-container, .url-container) button {
		--icon-size: 1rem;
		margin-right: 0.25rem;
	}

	:is(.input-container, .url-container) button:is(:hover, :focus-visible) {
		--icon-colour: var(--colour-ui-reverse);
		--label-colour: var(--colour-ui-reverse);
	}

	form > :is(.button-group, button):last-of-type {
		margin: 1.75rem 0;
	}

	form .assessor-list {
		display: flex;
		flex-flow: row wrap;
		align-items: center;
		gap: 0.5rem;
		padding: 0;
		margin: 0.5rem 0;
		list-style-type: none;
	}

	form .assessor-list button {
		--icon-size: 1rem;
	}

	form .assessor-list button:is(:hover, :focus-visible) {
		--icon-colour: var(--colour-ui-reverse);
		--label-colour: var(--colour-ui-reverse);
	}

	dl {
		display: flex;
		flex-flow: column;
		gap: 1rem;
		margin: 0 0 1.75rem;
	}

	.detail-container {
		display: flex;
		flex-flow: row;
		align-items: center;
		gap: 0.5rem;
	}

	.detail-container :is(dt, dd) {
		font-size: 1rem;
	}

	.detail-container dt {
		font-weight: 600;
	}

	.detail-container dd {
		margin: 0;
		color: var(--colour-ui-neutral-subtle);
	}

	.meta {
		display: flex;
		flex-flow: column;
		align-items: start;
		gap: 0.25rem;
		margin: 0 0 1.5rem;
	}

	.meta * {
		font-size: 0.875rem;
		color: var(--colour-ui-neutral-subtle);
	}

	.callout[data-style="shaded"].meta * {
		color: var(--colour-ui-accent-bold, var(--colour-ui-neutral));
	}

	.meta .status {
		display: flex;
		align-items: center;
		height: 1.75rem;
		padding: 0 0.375rem;
		margin: 0 0 0.25rem;
		background-color: var(--colour-fill-accent-subtle-vivid);
		border-radius: var(--border-radius-small);
		color: var(--colour-ui-accent);
		font-weight: 600;
	}

	.callout[data-style="shaded"].meta .status {
		background-color: var(--colour-fill-accent-bold-vivid);
		color: var(--colour-ui-reverse);
	}
</style>

<script>
	//
	// Imports
	//

	import {
		findIndexByKey,
		findObjectByKey,
		htmlToElement,
		kebabToCamel,
		sanitizeHTML,
	} from "src/utilities/helpers.js";
	import {
		getActiveAssessmentData,
		getAssessmentDate,
		getAssessmentName,
		getSaveStatus,
		getStatusColour,
		getUserData,
		subscribe,
		setState,
		setAssessment,
		createAssessment,
	} from "src/stores/userDataStore.js";

	//
	// Variables
	//

	let createAssessmentDialog = document.querySelector("#create-assessment");
	let selectAssessorDialog = document.querySelector("#select-assessor");
	let changeAssessorDialog = document.querySelector("#change-assessor");
	let infoAssessmentDialog = document.querySelector("#info-assessment");
	let updateAssessmentDialog = document.querySelector("#update-assessment");
	let openAssessmentDialog = document.querySelector("#open-assessment");
	let saveAssessmentDialog = document.querySelector("#save-assessment");

	//
	// Type Definitions
	//

	type State = {
		activeAssessmentId: number;
		activeAssessor: string;
		changeHistory: [];
		lastModifiedPage: string;
		lastSavedAt: number;
		lastVisitedPage: string;
		mode: string;
		onboardingCompleted: boolean;
		unsavedChanges: boolean;
	};

	type Assessment = {
		id: number;
		status: string;
		continuumVersion: string;
		dateCreated: number;
		dateModified: number;
		lastModifiedBy: string;
		reportingYear: string;
		district: string;
		school: string;
		assessors: [];
		considerationsEstablished: [];
		componentPhase: {};
	};

	//
	// Methods
	//

	let openDialog = (selector: String) => {
		let openDialog = document.querySelector(
			"dialog[open]",
		) as HTMLDialogElement;
		if (openDialog) openDialog.close();
		let dialog = document.querySelector(
			`#${selector}`,
		) as HTMLDialogElement;
		if (dialog) dialog.showModal();
	};

	let closeDialog = (dialog: HTMLDialogElement) => {
		if (dialog) dialog.close();
		// TODO: Reset
	};

	let createAssessorListItem = (name) => {
		if (!name || name === undefined) return;
		let template = `
			<li>
				<button class="remove-assessor" type="button">
					<span class="icon-and-label-container">
						<span class="label-container">
							<span class="label" data-field-value>${sanitizeHTML(name).trim()}</span>
						</span>
						<svg class="icon xmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
							<path d="m9.41 8 4.24-4.24a.996.996 0 1 0-1.41-1.41L8 6.59 3.76 2.34a.996.996 0 1 0-1.41 1.41l4.24 4.24-4.24 4.24a.996.996 0 0 0 .71 1.7c.26 0 .51-.1.71-.29L8.01 9.4l4.24 4.24c.2.2.45.29.71.29s.51-.1.71-.29a.996.996 0 0 0 0-1.41L9.43 7.99Z"/>
						</svg>
					</span>
				</button>
			</li>
		`;
		return htmlToElement(template);
	};

	let addAssessorToList = (target: HTMLButtonElement | HTMLInputElement) => {
		let input = target.closest(".input-container").querySelector("input");
		let item = createAssessorListItem(input.value);
		if (!item) return;
		let list = target.closest("form").querySelector(".assessor-list");
		list.append(item);
		list.removeAttribute("hidden");
		input.value = "";
	};

	let removeAssessorFromList = (target: HTMLButtonElement) => {
		let item = target.closest("li");
		item.remove();
	};

	let createAssessmentCard = (
		assessment: Assessment,
		active: boolean = false,
	) => {
		if (!assessment || assessment === undefined) return;
		let {
			status,
			id,
		} = assessment;
		// TODO: Fix design of heading
		// TODO: Fix design of active assessment label
		let template = `
			<li class="card" ${active ? "data-active" : ""}>
				${active ? `<div class="banner" data-theme="${getStatusColour()}">${status === "In Progress" ? `Editing` : `Reviewing`}</div>` : ''}
				<div class="wrapper">
					<h4 class="heading icon-and-label-container">
						<svg class="icon assessment" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
							<path d="M19.36 13.06c.86-.86.86-2.25 0-3.11l-1.3-1.3c-.83-.83-2.28-.83-3.11 0l-5.26 5.26c-.38.39-.66.87-.79 1.39l-.87 3.46c-.09.34.01.7.26.95.19.19.45.29.71.29.08 0 .16 0 .24-.03l3.46-.87c.53-.13 1.01-.41 1.39-.79l5.26-5.26Zm-2.86-3.05c.05 0 .11.02.14.05l1.3 1.3c.08.08.08.21 0 .28l-.94.94-1.59-1.59.94-.94s.09-.05.14-.05Zm-3.82 6.89c-.13.13-.29.22-.46.26l-1.85.46.46-1.85c.04-.17.13-.34.26-.46l2.9-2.9L15.58 14l-2.9 2.9ZM6 19c0 .55-.45 1-1 1H3c-1.65 0-3-1.35-3-3V3c0-1.65 1.35-3 3-3h14c1.65 0 3 1.35 3 3v2c0 .55-.45 1-1 1s-1-.45-1-1V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14c0 .55.45 1 1 1h2c.55 0 1 .45 1 1Zm9-15c.55 0 1 .45 1 1s-.45 1-1 1h-5c-.55 0-1-.45-1-1s.45-1 1-1h5Zm-7 6c0-.55.45-1 1-1h1.5c.55 0 1 .45 1 1s-.45 1-1 1H9c-.55 0-1-.45-1-1Zm-.29-5.29-2 2c-.2.2-.45.29-.71.29s-.51-.1-.71-.29l-1-1A.996.996 0 1 1 4.7 4.3l.29.29L6.28 3.3a.996.996 0 1 1 1.41 1.41ZM6.5 10c0 .83-.67 1.5-1.5 1.5s-1.5-.67-1.5-1.5.67-1.5 1.5-1.5 1.5.67 1.5 1.5Zm0 5c0 .83-.67 1.5-1.5 1.5s-1.5-.67-1.5-1.5.67-1.5 1.5-1.5 1.5.67 1.5 1.5ZM20 17c0 1.65-1.35 3-3 3-.55 0-1-.45-1-1s.45-1 1-1 1-.45 1-1 .45-1 1-1 1 .45 1 1Z"/>
						</svg>
						<span class="label-container">${getAssessmentName()}</span>
					</h4>
					<div class="details">
						<div class="meta">
							<span class="status" data-theme="${getStatusColour()}">${status}</span>
							<span class="date-created">
								Date Created: ${getAssessmentDate('dateCreated')}
							</span>
							<span class="date-modified">
								Date Modified: ${getAssessmentDate('dateModified')}
							</span>
						</div>
					</div>
					
					${
						active ? '' : `
					
					<button class="open-assessment" type="button" data-size="large" data-id="${id}">Open</button>
					
					`
					}
				</div>
			</li>
		`;
		return htmlToElement(template);
	};

	let createAssessorRadioInput = (assessor: string) => {
		if (!assessor || assessor === undefined) return;

		let id = `assessor-${assessor.split(" ").join("-").toLowerCase()}`;

		let template = `
			<div class="radio-container">
				<input
					type="radio"
					name="activeAssessor"
					id="${id}"
					value="${assessor}"
				/>
				<label for="${id}">${assessor}</label>
			</div>
		`;

		return htmlToElement(template);
	};

	let getFormValues = (form: HTMLFormElement) => {
		let result = {};

		// Handle input and select elements
		let fields = form.querySelectorAll(
			"select[name], input[name]",
		) as NodeListOf<HTMLInputElement | HTMLSelectElement>;

		for (let field of fields) {
			let { name, type } = field;

			// Skip fields with no name
			if (!name) continue;

			if (type === "radio") {
				// Only capture checked radio once
				if ((field as HTMLInputElement).checked) {
					result[name] = field.value;
				}
			} else if (type === "checkbox") {
				if (!result[name]) result[name] = [];

				if ((field as HTMLInputElement).checked) {
					result[name].push(field.value);
				}
			} else {
				result[name] = field.value;
			}
		}

		// Handle custom <ul data-field> lists
		let lists = form.querySelectorAll("ul[data-field]");
		for (let list of lists) {
			let items = [];
			for (let item of list.querySelectorAll("[data-field-value]")) {
				items.push(item.textContent.trim());
			}
			let field = list.getAttribute("data-field");
			if (field) result[field] = items;
		}

		return result;
	};

	let updateAssessmentFields = ({
		assessment,
		dialog,
	}: {
		assessment: Assessment;
		dialog: HTMLDialogElement;
	}) => {
		let form = dialog.querySelector("form");

		for (let [key, value] of Object.entries(assessment)) {
			// Update form element by name
			let input = form?.elements?.[key];

			if (input) {
				if (input instanceof RadioNodeList) {
					// Handle radio group
					input.value = String(value);
				} else if (input.type === "checkbox") {
					// Handle checkbox
					input.checked = !!value;
				} else {
					// Handle text/select/etc.
					input.value = String(value ?? "");
				}
			}

			// Update static detail by name (dd, div, span, etc.)
			let staticEl = dialog.querySelector(`[data-field="${key}"]`);

			if (staticEl) {
				if (Array.isArray(value)) {
					staticEl.textContent = value.join(", ");
				} else if (
					key.startsWith("date") &&
					typeof value === "number"
				) {
					staticEl.innerHTML = getAssessmentDate(key);
				} else {
					staticEl.textContent = String(value ?? "");

					// Update special case: status theme
					if (key === "status") {
						staticEl.setAttribute("data-theme", getStatusColour());
					}
				}
			}

			// Update special case: assessor list
			if (key === "assessors" && Array.isArray(value)) {
				let ul = dialog.querySelector(".assessor-list");
				if (ul) {
					ul.innerHTML = ""; // Clear previous
					for (let name of value) {
						let li = createAssessorListItem(name);
						if (li) ul.appendChild(li);
					}
					ul.toggleAttribute("hidden", ul.children.length === 0);
				}
			}
		}
	};

	let updateStateFields = ({
		state,
		dialog,
	}: {
		state: State;
		dialog: HTMLDialogElement;
	}) => {
		for (let [key, value] of Object.entries(state)) {
			console.log(key, value);
			let field = dialog.querySelector(`[data-field="${key}"]`);
			console.log('State field', field);

			if (field) {
				if (Array.isArray(value)) {
					field.textContent = value.join(", ");
				} else if (
					key.startsWith("date") &&
					typeof value === "number"
				) {
					field.innerHTML = getAssessmentDate(key);
				} else {
					field.textContent = String(value ?? "");
				}
			}
		}
	};

	/**
	 * Update the select-assessor dialog UI from stored assessment data
	 * @param data
	 */
	let updateSelectAssessorDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		let dialog = selectAssessorDialog as HTMLDialogElement;

		let assessorRadioGroup = dialog?.querySelector(".assessor-radio-group");

		if (!dialog || !assessorRadioGroup) return;

		assessorRadioGroup.innerHTML = "";

		// Generate the HTML cards and add them to the DOM
		for (let assessor of assessment.assessors) {
			let input = createAssessorRadioInput(assessor);
			assessorRadioGroup.append(input);
		}
	};

	/**
	 * Update the select-assessor dialog UI from stored assessment data
	 * @param data
	 */
	let updateChangeAssessorDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		let dialog = changeAssessorDialog as HTMLDialogElement;

		let assessorRadioGroup = dialog?.querySelector(".assessor-radio-group");

		if (!dialog || !assessorRadioGroup) return;

		assessorRadioGroup.innerHTML = "";

		// Generate the HTML cards and add them to the DOM
		for (let assessor of assessment.assessors) {
			let input = createAssessorRadioInput(assessor);
			assessorRadioGroup.append(input);

			if (assessor === data.uiState.activeAssessor) {
				input.querySelector("input").checked = true;
			}
		}
	};

	/**
	 * Update the info-assessment dialog UI from stored assessment data
	 * @param data
	 */
	let updateInfoAssessmentDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		let dialog = infoAssessmentDialog as HTMLDialogElement;

		updateAssessmentFields({
			assessment: assessment,
			dialog: dialog,
		});

		updateStateFields({
			state: data.uiState,
			dialog: dialog,
		});

		let callout = dialog.querySelector(".callout");

		let colour = assessment.status === "In Progress" ? "blue" : "green";

		callout.setAttribute("data-theme", colour);
	};

	/**
	 * Update the update-assessment dialog UI from stored assessment data
	 * @param data
	 */
	let updateUpdateAssessmentDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		let dialog = updateAssessmentDialog as HTMLDialogElement;

		updateAssessmentFields({
			assessment: assessment,
			dialog: dialog,
		});

	};

	/**
	 * Update the open-assessment dialog UI from stored assessment data
	 * @param data
	 */
	let updateOpenAssessmentDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let dialog = openAssessmentDialog;

		let savedAssessmentList = dialog?.querySelector(
			"#saved-assessment-list",
		);

		if (!dialog || !savedAssessmentList) return;

		savedAssessmentList.innerHTML = "";

		// Sort array of assessments by date modified
		data.assessments.sort((a, b) => b.dateModified - a.dateModified);

		// Get the index of the active assessment
		let activeIndex = findIndexByKey(
			data.assessments,
			"id",
			data.uiState.activeAssessmentId,
		);

		// Move it to the top of the array, if not already
		if (activeIndex > 0) {
			let [activeItem] = data.assessments.splice(activeIndex, 1);
			data.assessments.unshift(activeItem);
		}

		// Generate the HTML cards and add them to the DOM
		for (let i = 0; i < data.assessments.length; i++) {
			let assessment = data.assessments[i];
			let active = false;

			if (typeof assessment === "object" && assessment !== null) {
				if (i === 0) active = true;

				let card = createAssessmentCard(assessment, active);
				savedAssessmentList.append(card);
			}
		}

		//TODO: Sort cards by recently modified
	};

	/**
	 * Update the open-assessment dialog UI from stored assessment data
	 * @param data
	 */
	let updateSaveAssessmentDialog = (data: {
		uiState: State;
		assessments: Assessment[];
	}) => {
		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		let dialog = saveAssessmentDialog as HTMLDialogElement;

		updateAssessmentFields({
			assessment: assessment,
			dialog: dialog,
		});

		// TODO: Extract update form method from view so that it can be used here as well to update Status

		// let url = generateSaveUrl();
	};

	//
	// Inits & Event Listeners
	//

	subscribe(updateSelectAssessorDialog);
	subscribe(updateChangeAssessorDialog);
	subscribe(updateInfoAssessmentDialog);
	subscribe(updateUpdateAssessmentDialog);
	subscribe(updateOpenAssessmentDialog);
	subscribe(updateSaveAssessmentDialog);

	document.addEventListener("click", (event) => {
		let target = event.target as HTMLButtonElement;

		// TODO: Refactor the following two if statements to reduce code
		if (target.matches("#create-assessment-submit")) {
			let form = target.closest("form");
			let values: {};

			if (form.reportValidity()) {
				values = getFormValues(form);

				createAssessment(values);

				// Clear form
				form.reset();
				let formLists = form.querySelectorAll("ul[data-field]");
				for (let list of formLists) {
					list.innerHTML = "";
				}

				// Open select assessor dialog
				openDialog("select-assessor");
			} else {
				console.warn("Form is incomplete");
				// TODO: Display warning that form is incomplete
			}
		}

		if (target.matches("button.update-assessor")) {
			let dialog = target.closest("dialog");
			console.log("Dialog", dialog);

			let form = target.closest("form");

			let values: {};

			if (form.reportValidity()) {
				values = getFormValues(form);
				console.log("Value", values);

				setState(values);

				// Close the dialog
				dialog.close();
			} else {
				console.warn("Form is incomplete");
				// TODO: Display warning that form is incomplete
			}
		}

		if (target.matches("button.update-assessment")) {
			let dialog = target.closest("dialog");
			console.log("Dialog", dialog);

			let form = target.closest("form");

			let values: {};

			if (form.reportValidity()) {
				values = getFormValues(form);
				console.log("Value", values);

				setAssessment(values);

				setState({
					unsavedChanges: true,
				});

				// Close the dialog
				dialog.close();
			} else {
				console.warn("Form is incomplete");
				// TODO: Display warning that form is incomplete
			}
		}

		if (target.matches("button.open-assessment")) {

			setState({
				mode: "assessment",
				activeAssessmentId: Number(target.getAttribute("data-id")),
				activeAssessor: null,
			});

			// Open select assessor dialog
			openDialog("select-assessor");
		}

		if (target.matches("#upload-csv-button")) {
		}

		if (target.matches("#paste-url-button")) {
		}

		if (target.matches("button.save-assessment")) {

			setState({
				unsavedChanges: false,
				lastSavedAt: Date.now(),
			})

		}

		if (target.matches("button.open-dialog")) {
			let targetDialog = target.getAttribute("data-dialog");
			openDialog(targetDialog);
		}

		if (target.matches("button.close-dialog")) {
			closeDialog(target.closest("dialog"));
		}

		if (target.matches("button.add-assessor")) {
			addAssessorToList(target);
		}

		if (target.matches("button.remove-assessor")) {
			removeAssessorFromList(target);
		}

		if (target.matches("button.stop-editing")) {

			let userData = getUserData();

			if (userData.uiState.unsavedChanges) {
				openDialog('save-warning');
			} else {
				setState({
					mode: "reading",
					activeAssessment: null,
				});	
			}		

			//Todo: Ensure that open assessment cards remove banner
		}

		if (target.matches("#save-warning button.close-dialog")) {

			setState({
				mode: "reading",
				activeAssessment: null,
			});

		}

	});

	document.addEventListener("input", (event) => {
		let target = event.target as HTMLInputElement | HTMLSelectElement;

		if (target.matches(`select[name="district"]`)) {
			let schoolSelect = target
				.closest("form")
				.querySelector(`select[name="school"]`) as HTMLSelectElement;
			let schoolOptionGroups = schoolSelect?.querySelectorAll("optgroup");

			if (target.value !== "") {
				schoolSelect.removeAttribute("disabled");
				schoolSelect
					.querySelector(`.${target.value.toLowerCase()}-schools`)
					.removeAttribute("hidden");
			} else {
				schoolSelect.value = "";
				schoolSelect.setAttribute("disabled", "");
				for (let group of schoolOptionGroups) {
					group.setAttribute("hidden", "");
				}
			}
		}
	});

	document.addEventListener("keydown", (event) => {
		if (event.key === "Enter") {
			let target = event.target as HTMLInputElement;

			if (target.matches(`input[name="assessor"]`)) {
				addAssessorToList(target);
				// FIX: Not working
			}
		}
	});
</script>
