---
import IconCross from "./icons/IconCross_20.astro";
import IconInfo from "./icons/IconInfo_20.astro";
import IconFolder from "./icons/IconFolder_20.astro";
import IconSave from "./icons/IconSave_20.astro";
import IconEdit from "./icons/IconEdit_20.astro";
import IconEditSmall from "./icons/IconEdit_14.astro";
import IconEditStop from "./icons/IconEditStop_20.astro";
import IconAssessor from "./icons/IconAssessor_20.astro";
import IconAssessment from "./icons/IconAssessment_20.astro";
import IconXmark from "./icons/IconXmark_20.astro";
import IconWarningSmall from "src/components/icons/IconWarning_16.astro";
import IconCheckmark from "src/components/icons/IconCheckmark_12.astro";
import Toast from "./Toast.astro";
import IconWarning16 from "src/components/icons/IconWarning_16.astro";
---

<section
	id="assessment-controls"
	aria-label="Assessment Controls Toolbar"
	role="toolbar"
>
	<div
		class="notice"
		data-theme="yellow"
		data-vibrancy="vivid"
		data-restrict-device-max="small"
	>
		<IconWarning16 />
		<div>
			<p>
				The assessment feature isn't available on small screens. Please
				use a tablet or desktop device to access it.
			</p>
		</div>
	</div>

	<div class="wrapper" data-restrict-device-min="medium">
		<div class="info-group button-group" data-restrict-mode="assessment">
			<!-- Assessment Title -->
			<div class="field-container icon-and-label-container">
				<IconAssessment />
				<span class="label-container" data-restrict-length>
					<span class="label" data-field="activeAssessmentName"
					></span>
				</span>
			</div>
			<!-- Edit Status -->
			<button
				type="button"
				class="open-dialog field-container icon-and-label-container"
				data-dialog="edit-status-dialog"
				data-dialog-context="configure"
				aria-label="Update Assessment Status"
				data-size="small"
				data-style="solid-outline"
				data-vibrancy="vivid"
				data-collapsible="icon"
			>
				<div class="label-container">
					<span class="label" data-field="status"></span>
				</div>
				<div class="icon-container">
					<IconEditSmall />
				</div>
			</button>
			<div
				class="separator item"
				data-orientation="vertical"
				aria-hidden="true"
			>
			</div>
			<!-- Assessment Properties Button -->
			<button
				class="open-dialog"
				data-dialog="view-assessment-properties-dialog"
				type="button"
				aria-label="View Assessment Properties"
			>
				<div class="icon-and-label-container">
					<IconInfo />
					<span class="label-container">
						<span class="label">Properties</span>
					</span>
				</div>
			</button>
		</div>
		<div
			class="separator group"
			data-orientation="vertical"
			data-restrict-mode="assessment"
			aria-hidden="true"
		>
		</div>
		<div class="file-group button-group">
			<!-- Create Assessment Button -->
			<button
				class="open-dialog"
				data-dialog="edit-assessment-properties-dialog"
				data-dialog-context="setup"
				aria-label="Create New Assessment"
				type="button"
			>
				<div class="icon-and-label-container">
					<IconCross />
					<span class="label-container">
						<span class="label">New</span>
					</span>
				</div>
			</button>
			<div
				class="separator item"
				data-orientation="vertical"
				aria-hidden="true"
			>
			</div>
			<!-- Open/Import Assessment Button -->
			<button
				class="open-dialog"
				data-dialog="open-assessment-dialog"
				data-dialog-context="assessment"
				aria-label="Open or Import Assessment"
				type="button"
			>
				<div class="icon-and-label-container">
					<IconFolder />
					<span class="label-container">
						<span class="label">Open</span>
					</span>
				</div>
			</button>
		</div>
		<div
			class="separator group"
			data-orientation="vertical"
			data-restrict-mode="assessment"
			aria-hidden="true"
		>
		</div>
		<div class="export-group button-group" data-restrict-mode="assessment">
			<!-- Export Assessment Button -->
			<button
				class="open-dialog"
				data-dialog="export-assessment-dialog"
				type="button"
				aria-label="Export"
			>
				<div class="icon-and-label-container">
					<IconSave />
					<span class="label-container">
						<span class="label">Export</span>
					</span>
				</div>
			</button>
			<div
				class="separator item"
				data-orientation="vertical"
				data-restrict-status="in-progress"
				aria-hidden="true"
			>
			</div>
			<!-- Export Status -->
			<div
				class="field-container label-container"
				data-restrict-status="in-progress"
			>
				<span class="label" data-field="exportStatus"></span>
			</div>
		</div>
		<div
			class="separator group"
			data-orientation="vertical"
			data-restrict-mode="assessment"
			data-restrict-status="in-progress"
			aria-hidden="true"
		>
		</div>
		<div
			class="user-group button-group"
			data-restrict-mode="assessment"
			data-restrict-status="in-progress"
		>
			<!-- Edit Assessors Button -->
			<button
				class="open-dialog"
				data-dialog="assessor-dialog"
				data-dialog-heading="Edit Assessors"
				data-dialog-context="configure"
				type="button"
				aria-label="Assign Assessors"
			>
				<div class="icon-and-label-container">
					<IconAssessor />
					<span class="label-container">
						<span class="label">Assessors</span>
					</span>
				</div>
			</button>
			<div
				class="separator item"
				data-orientation="vertical"
				data-restrict-assessor="true"
				aria-hidden="true"
			>
			</div>
			<!-- Active Assessor -->
			<button
				type="button"
				class="open-dialog field-container icon-and-label-container"
				data-dialog="assessor-dialog"
				aria-label="Change Active Assessor"
				data-style="solid-outline"
				data-vibrancy="vivid"
				data-collapsible="icon"
				data-theme="purple"
				data-restrict-assessor="true"
			>
				<div class="label-container" data-restrict-length="short">
					<span class="label" data-field="activeAssessor"></span>
				</div>
				<div class="icon-container">
					<IconEditSmall />
				</div>
			</button>
		</div>
		<div
			class="separator group"
			data-orientation="vertical"
			data-restrict-mode="assessment"
			aria-hidden="true"
		>
		</div>
		<div class="mode-group button-group" data-restrict-mode="assessment">
			<!-- Start Editing Button -->
			<button
				class="open-dialog"
				data-dialog="status-warning-dialog"
				type="button"
				data-restrict-status="complete"
			>
				<div class="icon-and-label-container">
					<IconEdit />
					<span class="label-container">
						<span class="label">Edit</span>
					</span>
				</div>
			</button>
			<div
				class="separator item"
				data-orientation="vertical"
				data-restrict-status="complete"
				aria-hidden="true"
			>
			</div>
			<Toast
				id={"assessment-toolbar_close-toast_success"}
				message={`Assessment closed.`}
				colour={"green"}
				type={"success"}
			>
				<IconCheckmark slot={"icon"} />
			</Toast>
			<Toast
				id={"assessment-toolbar_close-toast_failure"}
				message={`Unable to close assessment. Please reload the page to try again.`}
				colour={"red"}
				type={"failure"}
			>
				<IconWarningSmall slot={"icon"} />
			</Toast>
			<!-- Close Button -->
			<button
				class="close"
				type="button"
				data-toast-success="assessment-toolbar_close-toast_success"
				data-toast-failure="assessment-toolbar_close-toast_failure"
			>
				<div class="icon-and-label-container">
					<IconXmark />
					<span class="label-container">
						<span class="label">Close</span>
					</span>
				</div>
			</button>
		</div>
	</div>
</section>

<style is:global>
	#assessment-controls {
		container-name: assessment-controls;
		container-type: inline-size;

		min-height: 3.75rem;
		top: 0;
		z-index: 100;
	}

	[data-mode="assessment"] #assessment-controls {
		position: sticky;
	}

	#assessment-controls > .notice {
		--icon-size: 1rem;
		display: flex;
		align-items: center;
		gap: var(--space-base);
		height: 100%;
		background-color: var(--colour-fill-accent-subtle);
		border-bottom: 1px solid var(--colour-border-accent-subtle);
		padding: var(--space-base) var(--space-2xl);
	}

	#assessment-controls > .notice p {
		font-size: var(--font-size-2xs);
		line-height: 1.2;
		margin: 0 0 0.125rem;
		text-wrap: balance;
	}

	#assessment-controls > .wrapper {
		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: var(--space-2xs);
		height: 100%;
		background-color: var(--colour-fill-neutral-subtle);
		border-bottom: 1px solid var(--colour-border-neutral-subtle);
		padding: 0 var(--space-2xl);
	}

	@container main (width < 848px) {
		[data-mode="assessment"] #assessment-controls {
			position: static;
		}

		#assessment-controls [data-restrict-device-min="medium"] {
			display: none !important;
		}
	}

	@container main (width >= 848px) {
		#assessment-controls [data-restrict-device-max="small"] {
			display: none !important;
		}
	}

	#assessment-controls .button-group {
		--group-gap: var(--space-2xs);
		flex-shrink: 0;
	}

	#assessment-controls .export-group {
		flex-grow: 1;
	}

	#assessment-controls
		:is(button, [data-style-as="button"]):not(
			[data-style="solid-outline"]
		) {
		--icon-size: 1.25rem;
		--button-background-colour: transparent;
	}

	#assessment-controls
		:is(button, [data-style-as="button"]):is(:hover, :focus-visible):not(
			[data-style="solid-outline"]
		) {
		--icon-colour: var(--colour-ui-reverse);
		--label-colour: var(--colour-ui-reverse);
		--button-background-colour: var(--colour-fill-neutral-bold);
	}

	@container assessment-controls (width < 1552px) {
		main[data-mode="assessment"]
			#assessment-controls
			:is(button, [data-style-as="button"]):not(.field-container)
			.label-container {
			display: none;
		}
	}

	@container assessment-controls (width < 1216px) {
		.separator:has(+ .field-container [data-field="exportStatus"]),
		.field-container:has([data-field="exportStatus"]) {
			display: none;
		}
	}

	#assessment-controls .field-container {
		--icon-size: 1.25rem;
		--label-size: var(--font-size-2xs);
		user-select: none;
	}

	#assessment-controls
		.field-container:has([data-field="activeAssessmentName"]) {
		--label-size: var(--font-size-2xs);
		--label-weight: 700;
		gap: var(--space-xs);
	}

	#assessment-controls
		.field-container:has(
			[data-field="status"],
			[data-field="activeAssessor"]
		) {
		--container-padding: var(--space-2xs);
		--icon-size: 0.875rem;
		height: 1.75rem;
		margin: 0 var(--space-2xs) !important;
	}

	#assessment-controls .field-container:has([data-field="exportStatus"]) {
		--label-colour: var(--colour-ui-neutral-subtle);
		margin: 0 var(--space-2xs) !important;
	}

	#assessment-controls .separator.group {
		--separator-long-edge-dimension: 100%;
	}

	#assessment-controls .separator.item {
		--separator-long-edge-dimension: 1.75rem;
	}
</style>

<script>
	//
	// Imports
	//

	import {
		getActiveAssessmentData,
		getAssessmentName,
		getExportStatus,
		getStatusColour,
		getUserData,
		setAssessment,
		setState,
		subscribe,
	} from "src/stores/userDataStore";
	import { dialogControl } from "src/utilities/dialog";
	import { eventControl } from "src/utilities/event";
	import { toastControl } from "src/utilities/toast";

	//
	// DOM Updates
	//

	let updateToolbar = (data: UserData, changes) => {
		let toolbar = document.querySelector(
			"#assessment-controls",
		) as HTMLElement;
		if (!toolbar) return;

		let stateTriggerKeys = ["activeAssessmentId"];
		let assessmentTriggerKeys = [
			"status",
			"reportingYear",
			"school",
			"unexportedChanges",
			"activeAssessor",
		];
		if (
			!changes.initiating &&
			!(
				(changes.assessments &&
					assessmentTriggerKeys.some((val) =>
						changes.assessments.includes(val),
					)) ||
				(changes.uiState &&
					stateTriggerKeys.some((val) =>
						changes.uiState.includes(val),
					))
			)
		)
			return;

		let assessment = getActiveAssessmentData();
		if (!assessment) return;

		// console.log("Updating Assessment Toolbar");

		// Get the update fields
		let statusField = toolbar?.querySelector('[data-field="status"]');
		let assessmentField = toolbar?.querySelector(
			'[data-field="activeAssessmentName"]',
		);
		let exportField = toolbar?.querySelector('[data-field="exportStatus"]');
		let assessorField = toolbar?.querySelector(
			'[data-field="activeAssessor"]',
		);

		if (!assessment) return;

		// 1. Update the assessment status
		if (statusField) {
			if (assessment.status === undefined) {
				statusField.setAttribute("hidden", "");
			} else {
				statusField.removeAttribute("hidden");
			}

			// Create the assessment title string and inject it
			let statusStr = `${assessment.status}`;
			statusField.textContent = statusStr;
			statusField.setAttribute("title", statusStr);
			statusField
				.closest(".field-container")
				?.setAttribute("data-theme", getStatusColour());
		}

		// 2. Update the assessment name
		if (assessmentField) {
			if (
				assessment.reportingYear === undefined ||
				assessment.school === undefined
			) {
				assessmentField.setAttribute("hidden", "");
			} else {
				assessmentField.removeAttribute("hidden");
			}

			// Create the assessment title string and inject it
			let assessmentStr = getAssessmentName();
			assessmentField.textContent = assessmentStr;
			assessmentField.setAttribute("title", assessmentStr);
		}

		// 3. Update the export status
		if (exportField) {
			if (
				assessment.unexportedChanges === undefined ||
				assessment.status === "Complete"
			) {
				exportField.setAttribute("hidden", "");
			} else {
				exportField.removeAttribute("hidden");
			}

			exportField.textContent = getExportStatus({}) as string;
		}

		// 4. Update the assessor name
		if (assessorField) {
			if (assessment.activeAssessor === undefined) {
				assessorField.setAttribute("hidden", "");
			} else {
				assessorField.removeAttribute("hidden");
				let assessorStr = `Active: ${assessment.activeAssessor}`;
				assessorField.textContent = assessorStr;
				assessorField.setAttribute("title", assessorStr);
			}
		}
	};

	let updateToolbarExportStatus = () => {
		let toolbar = document.querySelector(
			"#assessment-controls",
		) as HTMLElement;
		if (!toolbar) return;

		let userData = getUserData();
		if (userData.uiState.mode !== "assessment") return;

		// Get the update fields
		let exportField = toolbar?.querySelector('[data-field="exportStatus"]');

		exportField.textContent = getExportStatus({}) as string;
	};

	//
	// Inits
	//

	subscribe(updateToolbar);

	// Reset save status every minute
	setInterval(() => {
		updateToolbarExportStatus();
	}, 60_000);

	//
	// Event Listeners
	//

	let onClick = (event) => {
		let target = event.target as HTMLButtonElement;

		let toolbar = document.querySelector(
			"#assessment-controls",
		) as HTMLElement;
		if (!toolbar) return;

		if (target.matches("button.stop-editing")) {
			let activeAssessment = getActiveAssessmentData();

			if (activeAssessment.unexportedChanges) {
				dialogControl.open({
					dialogId: "export-warning-dialog",
				});
			} else {
				setAssessment({
					activeAssessor: null,
				});
				setState({
					mode: "reading",
					activeAssessmentId: null,
				});
			}
		}

		if (target.matches("button.close")) {
			let activeAssessment = getActiveAssessmentData();

			if (activeAssessment.status === "In Progress") {
				dialogControl.open({
					dialogId: "edit-status-dialog",
					context: "close",
					headingText: "Update Status Before Closing",
				});
			} else {
				if (activeAssessment.unexportedChanges) {
					dialogControl.open({
						dialogId: "export-warning-dialog",
					});
				} else {
					try {
						setAssessment({
							activeAssessor: null,
						});
						setState({
							mode: "reading",
							activeAssessmentId: null,
						});
						toastControl.show({ target, type: "success" });
					} catch (error) {
						console.error(error);
						toastControl.show({ target, type: "failure" });
					}
				}
			}
		}
	};
	eventControl.add({
		selector: "#assessment-controls",
		eventType: "click",
		fn: onClick,
	});
</script>
