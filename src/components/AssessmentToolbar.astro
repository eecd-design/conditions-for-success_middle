---
import IconCross from "./icons/IconCross_16.astro";
import IconInfo from "./icons/IconInfo_20.astro";
import IconFolder from "./icons/IconFolder_20.astro";
import IconSave from "./icons/IconSave_20.astro";
import IconChart from "./icons/IconChart_20.astro";
import IconEditStop from "./icons/IconEditStop_20.astro";
---

<section class="assessment-controls" aria-label="Assessment Controls Toolbar">
	<span
		class="active-assessment-title"
		title='Editing "2025 Maple Grove High School"'
		data-restrict-mode="assessment"
		>Editing "2025 Maple Grove High School"</span
	>

	<hr data-restrict-mode="assessment" />

	<button
		class="open-dialog"
		data-dialog="view-assessment"
		type="button"
		data-restrict-mode="assessment"
	>
		<div class="labelled-icon-container">
			<IconInfo />
			<span class="label-container">
				<span class="label"> View Details </span>
			</span>
		</div>
	</button>

	<hr data-restrict-mode="assessment" />

	<div class="button-group">
		<button
			class="open-dialog"
			data-dialog="create-assessment"
			type="button"
		>
			<div class="labelled-icon-container">
				<IconCross />
				<span class="label-container">
					<span class="label"> New Assessment </span>
				</span>
			</div>
		</button>
		<button
			class="open-dialog"
			data-dialog="open-assessment"
			type="button"
		>
			<div class="labelled-icon-container">
				<IconFolder />
				<span class="label-container">
					<span class="label"> Open Assessment </span>
				</span>
			</div>
		</button>
		<!-- <button class="switch-assessment" type="button" data-restrict-mode="assessment">
			<div class="labelled-icon-container">
				<IconSwap/>
				<span class="label-container">
					<span class="label">
						Switch Assessment
					</span>
				</span>
			</div>
		</button> -->
	</div>

	<div class="button-group" data-restrict-mode="assessment">
		<span class="save-status" aria-live="polite">*Unsaved Changes</span>
		<button class="open-dialog" data-dialog="save-assessment" type="button">
			<div class="labelled-icon-container">
				<IconSave />
				<span class="label-container">
					<span class="label"> Save </span>
				</span>
			</div>
		</button>
		<a data-style-as="button" href="/big-seven/report">
			<div class="labelled-icon-container">
				<IconChart />
				<span class="label-container">
					<span class="label"> View Report </span>
				</span>
			</div>
		</a>
	</div>

	<hr data-restrict-mode="assessment" />

	<button class="stop-editing" type="button" data-restrict-mode="assessment">
		<div class="labelled-icon-container">
			<IconEditStop />
			<span class="label-container">
				<span class="label"> Stop Editing </span>
			</span>
		</div>
	</button>
</section>

<style is:global>
	
	.assessment-controls {
		container-name: assessment-controls;
		container-type: inline-size;

		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: 0.5rem;
		height: 3.75rem;
		padding: 0 3rem;
		background-color: var(--colour-fill-neutral-subtle-muted);
		position: sticky;
		top: 0;
		z-index: 100;
	}

	.assessment-controls .button-group:first-of-type {
		flex-grow: 1;
	}

	.assessment-controls :is(.active-assessment-title, .save-status) {
		font-size: 0.875rem;
		font-weight: 600;
		color: var(--colour-ui-neutral-subtle);
	}

	.assessment-controls .active-assessment-title {
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
		max-width: 20rem;
	}

	.assessment-controls :is(button, [data-style-as="button"]) {
		--icon-size: 1.25rem;
		--button-background-colour: var(--colour-background);
	}

	.assessment-controls
		:is(button, [data-style-as="button"]):is(:hover, :focus-visible) {
		--icon-colour: var(--colour-ui-reverse);
		--label-colour: var(--colour-ui-reverse);
		--button-background-colour: var(--colour-fill-neutral-bold-muted);
	}

	@container assessment-controls (width < 1440px) {
		main[data-mode="assessment"]
			.assessment-controls
			:is(button, [data-style-as="button"])
			.label-container {
			display: none;
		}
	}

	.assessment-controls hr {
		display: block;
		height: 2.25rem;
		width: 2px;
		flex-shrink: 0;
		margin: 0;
	}

</style>

<script>




	// //
	// // Helpers
	// //

	// let sanitizeHTML = (input:string) => {
	// 	return input.replace(/&/g, "&amp;")
	// 		.replace(/</g, "&lt;")
	// 		.replace(/>/g, "&gt;")
	// 		.replace(/"/g, "&quot;")
	// 		.replace(/'/g, "&#039;");
	// }



	// //
	// // Methods
	// //

	// /**
	//  * Create an DOM element from HTML string
	//  * @param  {String} html
	//  * @return  {Element}
	//  */
	// let htmlToElement = (html) => {
	// 	let template = document.createElement("template");
	// 	html = html.trim(); // Never return a node of whitespace as a result
	// 	template.innerHTML = html;
	// 	return template.content.firstChild;
	// };

	// let openDialog = (selector: string) => {
	// 	let dialog = document.querySelector(
	// 		`#${selector}`,
	// 	) as HTMLDialogElement;
	// 	if (dialog) dialog.showModal();
	// };

	// let closeDialog = (dialog: HTMLDialogElement) => {
	// 	if (dialog) dialog.close();
	// };

	// let addAssessorToList = (target: HTMLButtonElement | HTMLInputElement) => {
	// 	let input = target.closest(".input-container").querySelector("input");
	// 	let template = `
	// 		<li>
	// 			<button class="remove-assessor" type="button">
	// 				<span class="labelled-icon-container">
	// 					<span class="label-container">
	// 						<span class="label">${sanitizeHTML(input.value).trim()}</span>
	// 					</span>
	// 					<svg class="icon xmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
	// 						<path d="m9.41 8 4.24-4.24a.996.996 0 1 0-1.41-1.41L8 6.59 3.76 2.34a.996.996 0 1 0-1.41 1.41l4.24 4.24-4.24 4.24a.996.996 0 0 0 .71 1.7c.26 0 .51-.1.71-.29L8.01 9.4l4.24 4.24c.2.2.45.29.71.29s.51-.1.71-.29a.996.996 0 0 0 0-1.41L9.43 7.99Z"/>
	// 					</svg>
	// 				</span>
	// 			</button>
	// 		</li>
	// 	`;
	// 	let item = htmlToElement(template);
	// 	let list = target.closest("form").querySelector(".assessor-list");
	// 	list.append(item);
	// 	list.removeAttribute("hidden");
	// 	input.value = "";
	// };

	// let removeAssessorFromList = (target: HTMLButtonElement) => {
	// 	let item = target.closest("li");
	// 	item.remove();
	// };

	// //
	// // Inits & Event Listeners
	// //

	// document.addEventListener("click", (event) => {
	// 	let target = event.target as HTMLButtonElement;

	// 	if (target.matches("button.open-dialog")) {
	// 		console.log(target);
	// 		let targetDialog = target.getAttribute("data-dialog");
	// 		openDialog(targetDialog);
	// 	}

	// 	if (target.matches("button.close-dialog")) {
	// 		closeDialog(target.closest("dialog"));
	// 	}

	// 	if (target.matches("button.add-assessor")) {
	// 		addAssessorToList(target);
	// 	}

	// 	if (target.matches("button.remove-assessor")) {
	// 		removeAssessorFromList(target);
	// 	}
	// });

	// document.addEventListener("input", (event) => {
	// 	let target = event.target as HTMLInputElement;

	// 	if (target.matches("select.district")) {
	// 		let schoolSelect = target.closest("form").querySelector("select.school") as HTMLSelectElement;
	// 		let schoolOptionGroups = schoolSelect?.querySelectorAll("optgroup");

	// 		if (target.value !== "") {
	// 			schoolSelect.removeAttribute("disabled");
	// 			console.log(target.value);
	// 			schoolSelect.querySelector(`.${target.value.toLowerCase()}-schools`).removeAttribute('hidden');

	// 		} else {
	// 			schoolSelect.value = '';
	// 			schoolSelect.setAttribute("disabled", "");
	// 			for (let group of schoolOptionGroups as NodeListOf<HTMLOptGroupElement>) {
	// 				group.setAttribute('hidden', '');
	// 			}

	// 		}
	// 	}
	// });

	// document.addEventListener("keydown", (event) => {
	// 	if (event.key === "Enter") {
	// 		let target = event.target as HTMLInputElement;

	// 		if (target.matches("input.assessor")) {
	// 			addAssessorToList(target);
	// 		}
	// 	}
	// });
</script>
