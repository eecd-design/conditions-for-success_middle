---
import IconCross from "./icons/IconCross_16.astro";
import IconInfo from "./icons/IconInfo_20.astro";
import IconFolder from "./icons/IconFolder_20.astro";
import IconSave from "./icons/IconSave_20.astro";
import IconChart from "./icons/IconChart_20.astro";
import IconEdit from "./icons/IconEdit_20.astro";
import IconEditStop from "./icons/IconEditStop_20.astro";
import IconSwap from "./icons/IconSwap_20.astro";
import IconAssessor from "./icons/IconAssessor_20.astro";
import IconAssessment from "./icons/IconAssessment_20.astro";
---

<section class="assessment-controls" aria-label="Assessment Controls Toolbar" role="toolbar" transition:persist>
	<!-- TODO: Investigate the use of transition persist throughout -->

	<div class="info-group button-group" data-restrict-mode="assessment">

		<div class="field-container icon-and-label-container">
			<IconAssessment />
			<span class="label-container" data-restrict-length>
				<span class="label" data-field="activeAssessmentName" 
				></span>
			</span>
		</div>

		<div class="field-container label-container" data-style="shading-and-outline">
			<span class="label" data-field="status"></span>
		</div>
		
		<div class="separator item" data-orientation="vertical"></div>

		<button
			class="open-dialog"
			data-dialog="info-assessment-dialog"
			type="button"
			aria-label="View Assessment Info"
		>
			<div class="icon-and-label-container">
				<IconInfo />
				<span class="label-container">
					<span class="label">Info</span>
				</span>
			</div>
		</button>

	</div>
	
	<div class="separator group" data-orientation="vertical" data-restrict-mode="assessment"></div>
	
	<div class="file-group button-group">
		<button
			class="open-dialog"
			data-dialog="create-assessment-dialog"
			aria-label="New Assessment"
			type="button"
			>
			<div class="icon-and-label-container">
				<IconCross />
				<span class="label-container">
					<span class="label">New</span>
				</span>
			</div>
		</button>
		
		<div class="separator item" data-orientation="vertical"></div>
		
		<button
			class="open-dialog"
			data-dialog="open-assessment-dialog"
			aria-label="Open Assessment"
			type="button"
			>
			<div class="icon-and-label-container">
				<IconFolder />
				<span class="label-container">
					<span class="label">Open</span>
				</span>
			</div>
		</button>

	</div>

	<div class="separator group" data-orientation="vertical" data-restrict-mode="assessment"></div>
	
	<div class="export-group button-group" data-restrict-mode="assessment"> 

		<div class="field-container label-container" data-restrict-status="in-progress">
			<span class="label" data-field="exportStatus"></span>
		</div>

		<div class="separator item" data-orientation="vertical" data-restrict-status="in-progress"></div>
		
		<button
			class="open-dialog"
			data-dialog="export-assessment-dialog"
			type="button"
			aria-label="Export"
		>
			<div class="icon-and-label-container">
				<IconSave />
				<span class="label-container">
					<span class="label">Export</span>
				</span>
			</div>
		</button>

	</div>

	<div class="separator group" data-orientation="vertical" data-restrict-mode="assessment"></div>

	<div class="report-group button-group" data-restrict-mode="assessment">

		<a
			data-style-as="button"
			href="/big-seven/report"
			aria-label="View Report"
		>
			<div class="icon-and-label-container">
				<IconChart />
				<span class="label-container">
					<span class="label">Report</span>
				</span>
			</div>
		</a>

	</div>

	<div class="separator group" data-orientation="vertical" data-restrict-mode="assessment" data-restrict-status="in-progress"></div>

	<div class="user-group button-group" data-restrict-mode="assessment" data-restrict-status="in-progress">
		
		<div class="field-container icon-and-label-container" data-restrict-assessor="true">
			<IconAssessor />
			<span class="label-container" data-restrict-length>
				<span class="label" data-field="activeAssessorName"></span>
			</span>
		</div>

		<div class="separator item" data-orientation="vertical" data-restrict-assessor="true"></div>

		<button
			class="open-dialog"
			data-dialog="change-assessor-dialog"
			data-restrict-assessor="true"
			type="button"
			aria-label="Change Active Assessor"
		>
			<div class="icon-and-label-container">
				<IconSwap />
				<span class="label-container">
					<span class="label">Change</span>
				</span>
			</div>
		</button>

		<button
			class="open-dialog"
			data-dialog="select-assessor-dialog"
			data-restrict-assessor="false"
			type="button"
			aria-label="Select Active Assessor"
		>
			<div class="icon-and-label-container">
				<IconAssessor />
				<span class="label-container">
					<span class="label">Select Assessor</span>
				</span>
			</div>
		</button>

	</div>

	<div class="separator group" data-orientation="vertical" data-restrict-mode="assessment"></div>

	<div class="mode-group button-group" data-restrict-mode="assessment">

		<button
			class="stop-editing"
			type="button"
			data-restrict-status="in-progress"
		>
			<div class="icon-and-label-container">
				<IconEditStop />
				<span class="label-container">
					<span class="label"> Stop Editing </span>
				</span>
			</div>
		</button>

		<button
			class="open-dialog"
			data-dialog="status-warning-dialog"
			type="button"
			data-restrict-status="complete"
		>
			<div class="icon-and-label-container">
				<IconEdit />
				<span class="label-container">
					<span class="label">Edit</span>
				</span>
			</div>
		</button>
		
	</div>

</section>

<style is:global>
	.assessment-controls {
		container-name: assessment-controls;
		container-type: inline-size;

		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		gap: 0.5rem;
		height: 3.75rem;
		padding: 0 3rem;
		background-color: var(--colour-fill-neutral-subtle-muted);
		border-bottom: 1px solid var(--colour-border-neutral-subtle-muted);
		top: 0;
		z-index: 100;
	}

	[data-mode="assessment"] .assessment-controls {
		position: sticky;
	}

	.assessment-controls .button-group {
		--group-gap: 0.5rem;
	}

	.assessment-controls .report-group {
		flex-grow: 1;
	}

	.assessment-controls :is(button, [data-style-as="button"]) {
		--icon-size: 1.25rem;
		--button-background-colour: transparent;
	}

	.assessment-controls
		:is(button, [data-style-as="button"]):is(:hover, :focus-visible) {
		--icon-colour: var(--colour-ui-reverse);
		--label-colour: var(--colour-ui-reverse);
		--button-background-colour: var(--colour-fill-neutral-bold-muted);
	}

	@container assessment-controls (width < 1440px) {
		main[data-mode="assessment"]
			.assessment-controls
			:is(button, [data-style-as="button"])
			.label-container {
			display: none;
		}
	}

	.assessment-controls .field-container {
		--icon-size: 1.25rem;
		--label-size: 0.875rem;
		margin: 0 0.5rem;
		user-select: none;
	}

	.assessment-controls .field-container:has([data-field="activeAssessmentName"], [data-field="activeAssessorName"]) {
		--label-size: 0.9375rem;
		--label-weight: 700;
		gap: 0.75rem		
	}

	.assessment-controls .field-container:has([data-field="exportStatus"]) {
		--label-colour: var(--colour-ui-neutral-subtle);		
	}

	.assessment-controls .separator.item {
		--separator-long-edge-dimension: 1.75rem;
	}

</style>

<script>
	import { getActiveAssessmentData, getAssessmentName, getExportStatus, getStatusColour, setState, subscribe } from "src/stores/userDataStore";
	import { findObjectByKey, getTimeDifference } from "src/utilities/helpers";

	let updateToolbar = (data) => {
		let { uiState, assessments } = data;

		if (!uiState.activeAssessmentId) return;

		// Get the toolbar
		let toolbar = document.querySelector(".assessment-controls");

		if (!toolbar) return;

		// Get the update fields
		let statusField = toolbar?.querySelector(
			'[data-field="status"]',
		);
		let assessmentField = toolbar?.querySelector(
			'[data-field="activeAssessmentName"]',
		);
		let exportField = toolbar?.querySelector('[data-field="exportStatus"]');
		let assessorField = toolbar?.querySelector(
			'[data-field="activeAssessorName"]',
		);

		// Get the active assessment
		let activeAssessment = getActiveAssessmentData();

		if (!activeAssessment) return;

		// 1. Update the assessment status
		if (statusField) {
			if (
				activeAssessment.status === undefined
			) {
				statusField.setAttribute("hidden", "");
			} else {
				statusField.removeAttribute("hidden");
			}

			// Create the assessment title string and inject it
			let statusStr = `${activeAssessment.status}`;
			statusField.textContent = statusStr;
			statusField.setAttribute("title", statusStr);
			statusField.closest('.field-container')?.setAttribute('data-theme', getStatusColour());
		}

		// 2. Update the assessment name
		if (assessmentField) {
			if (
				activeAssessment.reportingYear === undefined ||
				activeAssessment.school === undefined
			) {
				assessmentField.setAttribute("hidden", "");
			} else {
				assessmentField.removeAttribute("hidden");
			}

			// Create the assessment title string and inject it
			let assessmentStr = getAssessmentName();
			assessmentField.textContent = assessmentStr;
			assessmentField.setAttribute("title", assessmentStr);
		}

		// 3. Update the export status
		if (exportField) {
			if (activeAssessment.unexportedChanges === undefined || activeAssessment.status === "Complete") {
				exportField.setAttribute("hidden", "");
			} else {
				exportField.removeAttribute("hidden");
			}

			exportField.textContent = getExportStatus();
		}

		// 4. Update the assessor name
		if (assessorField) {
			if (uiState.activeAssessor === undefined) {
				assessorField.setAttribute("hidden", "");
			} else {
				assessorField.removeAttribute("hidden");
			}

			let assessorStr = uiState.activeAssessor;
			assessorField.textContent = assessorStr;
			assessorField.setAttribute("title", assessorStr);
		}

	};

	let updateToolbarExportStatus = () => {

		// Get the toolbar
		let toolbar = document.querySelector(".assessment-controls");

		if (!toolbar) return;

		// Get the update fields
		let exportField = toolbar?.querySelector('[data-field="exportStatus"]');

		exportField.textContent = getExportStatus();

	};

	subscribe(updateToolbar);

	document.addEventListener("click", (event) => {

		let target = event.target as HTMLButtonElement;

	});

	// Reset save status every minute
	setInterval(() => {

		updateToolbarExportStatus();

	}, 60_000);
	
</script>
