---
import { getCollection, render } from "astro:content";
import Accordion from "../components/Accordion.astro";
import IconFlag from "./icons/IconFlag_24.astro";

const { entry } = Astro.props;

// console.log(entry);
// console.log(entry.data.initiating);

// Store the path to the current component
const pathToComponent = `src/content/components/${entry.id}`;

// Get all reflection questions
let allQuestions = Object.values(
	import.meta.glob("src/content/components/**/reflectionQuestion.md", {
		eager: true,
	}),
);

// Get the current reflection question
let question:any = allQuestions.find((match:any) =>
	match.file.includes(pathToComponent),
);

// Get all component goals
let allGoals = Object.values(
	import.meta.glob("src/content/components/**/goal.md", {
		eager: true,
	}),
);

// Get the current component goal
let goal:any = allGoals.find((match:any) =>
	match.file.includes(pathToComponent),
);

// Get all component focus statements
let allFocuses = Object.values(
	import.meta.glob("src/content/components/**/focus.md", {
		eager: true,
	}),
);

// Get the current component focus statements
let focuses = Object.fromEntries(allFocuses
.filter((match:any) => match.file.includes(pathToComponent))
.map((match:any) => {
    let path = match.file.split('/');
    let id = path[path.length - 2];
    return [id, match]
}));

// Get all resources
let allResources = await getCollection("resources");

---

<p class="current-phase" hidden></p>

<h2 id={entry.id}>
    <span class="tag" data-font-type="sans-serif">
        <span class="number">{entry.data?.tag}</span>
    </span>
    <span class="title">{entry.data?.title}</span>
</h2>

{ question && question.rawContent().trim().length > 0 && (

    <div class="callout" data-style="outline" data-on-path-elem="heading">
        <h3 class="heading">Reflection Question</h3>
        <question.Content />
    </div>

)}

{ goal && goal.rawContent().trim().length > 0 && (
    <h3>
        <span class="icon-group"><IconFlag/></span>
        <span class="text-group">Goal</span>
    </h3>
    <goal.Content />
)}

<div class="accordion-group">

	<Accordion title="Initiating" componentData={{
		id: entry.id,
		tag: entry.data?.tag,
		focus: focuses?.initiating,
		considerations: entry.data?.initiating?.considerations,
		resources: allResources.filter((resource) => {

			let targetIndicator = entry.data?.tag.split('.')[0];
			let targetComponent = entry.data?.tag;
			let targetConsiderations = new Set(entry.data?.initiating?.considerations.map((c) => c.tag));

			let matchesIndicator = resource.data.linkedIndicators.includes(targetIndicator);
			let matchesComponent = resource.data.linkedComponents.includes(targetComponent);
			let matchesConsideration = false;
			for (let consideration of resource.data.linkedConsiderations) {
				if (targetConsiderations.has(consideration)) matchesConsideration = true;
			}

			if (matchesIndicator || matchesComponent || matchesConsideration) {
				return resource
			}

		}),
	}}/>
	<Accordion title="Implementing" componentData={{
		id: entry.id,
		tag: entry.data?.tag,
		focus: focuses?.implementing,
		considerations: entry.data?.implementing?.considerations,
		resources: allResources.filter((resource) => {

			let targetIndicator = entry.data?.tag.split('.')[0];
			let targetComponent = entry.data?.tag;
			let targetConsiderations = new Set(entry.data?.implementing?.considerations.map((c) => c.tag));

			let matchesIndicator = resource.data.linkedIndicators.includes(targetIndicator);
			let matchesComponent = resource.data.linkedComponents.includes(targetComponent);
			let matchesConsideration = false;
			for (let consideration of resource.data.linkedConsiderations) {
				if (targetConsiderations.has(consideration)) matchesConsideration = true;
			}

			if (matchesIndicator || matchesComponent || matchesConsideration) {
				return resource
			}

		}),
	}}/>

</div>