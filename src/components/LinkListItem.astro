---
import { getResourcePath } from "src/utilities/helpers";

import { toTitleCase } from "src/utilities/helpers";

import ResourceIcons from "./icons/ResourceIcons.astro";
import IconArrowRight from "./icons/IconArrowRight_16.astro";
import IconExpand from "./icons/IconExpand_16.astro";
import IconExternal from "./icons/IconExternal_16.astro";
import IconDownload from "./icons/IconDownload_16.astro";

let { itemData } = Astro.props;

let {
	category = null,
	colour = null,
	title = null,
	tag = null,
	type = null,
	dateAdded = null,
	description = null,
	external = null,
	indicator = null,
	slug = null,
	linkedIndicators = null,
	linkedComponents = null,
	linkedConsiderations = null,
} = itemData;

let colourMap = {
	"1": "red",
	"2": "orange",
	"3": "yellow",
	"4": "green",
	"5": "teal",
	"6": "blue",
	"7": "purple",
};

let path;
let date = null;
if (category === "resource") {
	path = getResourcePath(itemData);
	date = new Date(dateAdded).toLocaleDateString("en-US", {
		day: "numeric",
		month: "long",
		year: "numeric",
	});
} else {
	if (category === "indicator") path = `/big-seven/${slug}`;
	else
		path = `/big-seven/${indicator}#${category}-${tag.replaceAll(".", "-")}`;
}

let tags = null;
if (linkedIndicators || linkedComponents || linkedConsiderations) {
	tags = linkedIndicators.concat(linkedComponents, linkedConsiderations);
	tags = tags.map((tag) => {
		return {
			colour: colourMap[tag.charAt(0)],
			tag,
		};
	});
	tags.sort((a, b) => {
		return (a.tag || "").localeCompare(b.tag || "");
	});
}

let ItemWrapper = "li";
let itemWrapperAttrs =
	category === "resource"
		? {
				"data-category": category,
				"data-date-added": dateAdded,
				"data-description": description,
				"data-title": title.toLowerCase(),
				"data-type": type,
				"data-indicators": JSON.stringify(linkedIndicators),
				"data-components": JSON.stringify(linkedComponents),
				"data-considerations": JSON.stringify(linkedConsiderations),
			}
		: {
				"data-category": category,
				"data-tag": tag,
				"data-theme": colour,
				"data-title": title.toLowerCase(),
			};

let InteractiveWrapper = ["video", "audio"].includes(type) ? "button" : "a";
let interactiveWrapperAttrs = ["video", "audio"].includes(type)
	? {
			class: "open-dialog",
			type: "button",
			"data-style-as": "link",
			"data-dialog": "media-dialog",
			"data-dialog-heading": title,
			"data-media-type": type,
			"data-media-src": path,
			"data-media-external": external.discriminant,
		}
	: {
			href: path,
		};

let DestinationIcon = null;
// Pages and Locations
if (category !== "resource") {
	DestinationIcon = IconArrowRight;
}
// External Files and Websites
else if (
	external.discriminant === true &&
	["document", "presentation", "website"].includes(type)
) {
	DestinationIcon = IconExternal;
}
// Internal and External Media
else if (["video", "audio"].includes(type)) {
	DestinationIcon = IconExpand;
}
// Internal Files
else if (["document", "presentation"].includes(type)) {
	DestinationIcon = IconDownload;
}
---

<ItemWrapper {...itemWrapperAttrs}>
	<InteractiveWrapper {...interactiveWrapperAttrs}>
		<ResourceIcons
			type={type}
			classes={["type"]}
			dataset={[{ key: "restrict-content", value: "resources" }]}
		/>
		<div
			class="separator group"
			data-orientation="vertical"
			data-restrict-content="resources"
			aria-hidden="true"
		>
		</div>
		<span class="text-container">
			<span class="label" data-restrict-content="mixed">
				{
					category !== "resource"
						? `${toTitleCase(category)} ${tag}`
						: `${toTitleCase(type)} Resource`
				}
			</span>
			<span class="title">
				{title}
				{
					tags && (
						<ul class="tags-list" data-restrict-content="resources">
							{tags.map((tag) => (
								<li
									class="tag"
									data-theme={tag.colour}
									data-vibrancy="vivid"
								>
									{tag.tag}
								</li>
							))}
						</ul>
					)
				}
			</span>
			{
				date && (
					<span
						class="date"
						data-theme="red"
						data-restrict-content="resources"
					>
						Date Added: {date}
					</span>
				)
			}
			{
				description && (
					<span class="description" data-restrict-layout="detailed">
						{description}
					</span>
				)
			}
		</span>
		<span class="icon-container">
			<DestinationIcon classes={["destination"]} />
		</span>
	</InteractiveWrapper>
</ItemWrapper>

<style is:global>
	.links-list[data-style="divided"] {
		gap: 0;
	}

	.links-list[data-style="divided"] > li {
		padding: var(--space-2xs) 0;
	}

	.links-list[data-style="divided"] > li:first-child {
		padding-top: 0 !important;
	}

	.links-list[data-style="divided"] > li:last-child {
		padding-bottom: 0 !important;
	}

	.links-list[data-style="divided"] > li:has(+ li:not([hidden])) {
		border-bottom: 1px solid var(--colour-border-neutral-subtle);
	}

	.links-list[data-style="divided"] :is(a, [data-style-as="link"]) {
		padding: var(--space-xs) var(--space-sm) var(--space-xs) var(--space-xs);
		border-radius: var(--border-radius-normal);
		gap: var(--space-xs);
		text-decoration: none;
		width: 100%;
	}

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"]):is(:hover, :focus-visible) {
		background-color: var(
			--colour-fill-accent-subtle,
			var(--colour-fill-neutral-subtle)
		);
	}

	/* SEPARATOR */

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"])
		.separator {
		align-self: stretch;
	}

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"]):is(:hover, :focus-visible)
		.separator {
		background-color: var(
			--colour-border-accent-mid,
			var(--colour-border-neutral-mid)
		);
	}

	/* TEXT CONTAINER */

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"])
		.text-container {
		display: flex;
		flex-flow: column;
		gap: var(--space-2xs);
	}

	/* TITLE */

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"])
		.text-container
		.title {
		display: flex;
		flex-flow: row wrap;
		align-items: start;
		gap: var(--space-2xs);
		font-size: var(--font-size-xs);
	}

	/* DATE */

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"])
		.text-container
		.date {
		font-size: var(--font-size-3xs);
		font-weight: 500;
		color: var(--colour-ui-neutral-subtle);
	}

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"]):is(:hover, :focus-visible)
		.text-container
		.date {
		color: var(--colour-ui-neutral);
	}

	/* TAGS */

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"])
		.text-container
		.tags-list {
		display: flex;
		flex-flow: row wrap;
		align-items: start;
		column-gap: 0.375rem;
		row-gap: 0.375rem;
		list-style-type: none;
		padding: 0;
		margin: 0;
	}

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"])
		.text-container
		.tags-list
		li {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		padding: 0 var(--space-3xs);
		height: 1.125rem;
		min-width: 1.125rem;
		border-radius: var(--border-radius-small);
		background-color: var(--colour-fill-accent-subtle);
		font-size: var(--font-size-3xs);
		color: var(--colour-ui-accent);
		line-height: 1;
		transition: all var(--transition-linear-fast);
	}

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"]):is(:hover, :focus-visible)
		.text-container
		.tags-list
		li {
		background-color: var(--colour-fill-neutral-mid);
		color: var(--colour-ui-reverse);
	}

	/* DESCRIPTION */

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"])
		.text-container
		.description {
		font-size: var(--font-size-2xs);
		font-weight: 500;
		color: var(--colour-ui-neutral-subtle);
		line-height: 1.4;
		transition: max-height var(--transition-ease-medium);
	}

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"]):is(:hover, :focus-visible)
		.description {
		color: var(--colour-ui-neutral);
	}

	.links-list[data-style="divided"] :is(a, [data-style-as="link"]) .label {
		--label-size: var(--font-size-2xs);
		--label-colour: var(
			--colour-ui-accent-subtle,
			var(--colour-ui-neutral-subtle)
		);
	}

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"]):is(:hover, :focus-visible)
		.label {
		--label-colour: var(--colour-ui-accent, var(--colour-ui-neutral));
	}

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"]):is(:hover, :focus-visible)
		.icon-and-label-container {
		--label-colour: var(--colour-ui-accent, var(--colour-ui-neutral));
	}

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"]):is(:hover, :focus-visible)
		:is(.icon.destination, .icon.type) {
		--icon-colour: var(--colour-ui-accent, var(--colour-ui-neutral));
	}

	.links-list[data-style="divided"]
		:is(a, [data-style-as="link"]):is(:hover, :focus-visible)
		span.highlight {
		--highlight-background-colour: transparent;
		--highlight-ui-colour: var(--colour-ui-neutral);
	}
</style>
