---
import { getCollection, render } from "astro:content";

import { findObjectByKey, toTitleCase } from "../utilities/helpers"

import IconXmark from "./icons/IconXmark_20.astro";
import IconWarningSmall from "./icons/IconWarning_16.astro";
import { getAllCodes } from "node_modules/astro/dist/i18n";
import ResourceIcons from "./icons/ResourceIcons.astro";
import IconArrowRight from "./icons/IconArrowRight_16.astro";
import IconDownload from "./icons/IconDownload_16.astro";
import IconExternal from "./icons/IconExternal_16.astro";

let searchList = [];

// Get all indicator
let allIndicators = await getCollection("indicators");

for (let indicator of allIndicators) {
	searchList.push({
		type: 'indicator',
		tag: indicator.data.tag,
		title: indicator.data.title,
		url: `/big-seven/${indicator.id}`,
		colour: indicator.data.colour,
	})
}

// Get all indicator components
let allComponents = await getCollection("components");

for (let component of allComponents) {

	let colour = findObjectByKey(allIndicators, 'id', component.data.indicator)?.data.colour;

	searchList.push({
		type: 'component',
		tag: component.data.tag,
		title: component.data.title,
		url: `/big-seven/${component.data.indicator}#component-${component.data.tag.replaceAll('.', '-')}_${component.id}`,
		colour: colour,
	})

	for (let consideration of component.data['initiating'].considerations) {
		searchList.push({
			type: 'consideration',
			tag: consideration.tag,
			title: consideration.description,
			url: `/big-seven/${component.data.indicator}?consideration=${consideration.tag}#component-${component.data.tag.replaceAll('.', '-')}_${component.id}`,
			colour: colour,
		})
	}

}

// Get all resources
let allResources = await getCollection("resources");

for (let resource of allResources) {
	searchList.push({
		type: 'resource',
		category: resource.data.category,
		title: resource.data.title,
		url: resource.data.source.filePath ? resource.data.source.filePath.replace('public', '') : resource.data.source.url,
		external: resource.data.source.url ? true : false,
	})
}

console.log(searchList);


---

<dialog
	id="search-dialog"
	aria-labelledby="search-dialog_heading"
>
	<button
		class="close-dialog"
		type="button"
		aria-label="Close Search Dialog"><IconXmark /></button
	>

	<h2 id="search-dialog_heading" class="heading">
		Search
	</h2>

	<form>

		<fieldset>
			<p
				id="search-dialog_search-input_help"
				class="instructions"
			>
				Search for an Indicator, Component, Consideration, or Resource by entering a valid tag (e.g., 1.0, 2.1, 3.1.1) or title.
			</p>
			<div class="input-container">
				<input
					id="search-dialog_search-input"
					name="search"
					type="text"
					placeholder="Enter search term..."
					aria-labelledby="search-dialog_heading"
					aria-describedby="search-dialog_search-input_help, search-dialog_search-input_error"
					autofocus
				/>
			</div>
			<p class="error" hidden>
				<IconWarningSmall />
				<span
					id="search-dialog_search-input_error"
					role="alert">There are no results that match the search term.</span
				>
			</p>
		</fieldset>

		<ul class="search-results link-list" data-style="divided" hidden>

			{searchList.map((item) => {

				return (

					<li
						data-type={item.type}
						data-title={item.title.toLowerCase()}
						data-tag={item.tag ?? null}
						data-category={item.category ?? null}
						data-theme={item.colour ?? null}
						data-external={item.external}
					>

						<a href={item.url}>

							<span class="text-container">
								<span class="label">
									{item.type !== 'resource' ? `${toTitleCase(item.type)} ${item.tag}` : `${toTitleCase(item.category)} ${toTitleCase(item.type)}`}
								</span>
								{/* TODO: Website Resource or Web Resource? */}
								<span class="text">
									{item.title}
								</span>
							</span>

							<span class="icon-container">
								{item.type !== 'resource' ? 
									
									<IconArrowRight classes={['destination']} />
								
								: 
								
									item.category === 'document' || item.category === 'presentation' ? 
									
									<IconDownload classes={['destination']} /> : <IconExternal classes={['destination']} />
								
								}
							</span>

						</a>

					</li>

				)

			})}

		</ul>

	</form>
	
</dialog>

<style is:global>

	#search-dialog {
		margin-top: 2rem;
	}

	#search-dialog .search-results {
		margin: 0;
	}

</style>


<script>

/**
 * Filters a list of <li> items based on input value, calculates relevance scores,
 * hides non-matching items, and optionally sorts matching items by relevance.
 * 
 * @param {Object} options
 * @param {HTMLInputElement} options.input - The input element whose value is used to filter the list.
 * @param {HTMLElement} options.list - The container element containing <li> items to filter. Items must include
 *   data attributes like `data-title`, `data-type`, and optionally `data-tag`, `data-date`.
 */
let filterList = ({input, list}) => {

	let results = [];
	let matches = 0;
	let presortType = 'byTitle';

	let items = list.querySelectorAll('li');
	let value = input.value.trim();

	console.log('Value', value);

    for (const item of items) {

		// Get the item data
		let type = item.getAttribute('data-type');
		let title = item.getAttribute('data-title');
		let tag = item.getAttribute('data-tag');

		let result = {
			elem: item,
			title: title ?? null,
			tag: tag ?? null,
			match: false,
			relevance: 0,
		}

		// 1. Check for tag match
        if (type !== 'resource' && tag) {
	
			// If the tag starts with the input value, show it
			if (tag.startsWith(value)) {
				item.removeAttribute('hidden');
				result.match = true;
				matches += 1;
				result.relevance += 10;
				presortType = 'byTag';
				continue;
			}

        }

		// 2. Check for title match
		if (value.includes(' ')) {

			if (title.startsWith(value)) {
				result.match = true;
				matches += 1;
				// Give higher relevance to title start matches
				result.relevance += 10;

			} else if (title.includes(value)) {
				result.match = true;
				matches += 1;
				result.relevance += 1;
			}

		} else {

			// Split into individual words
			let words = title.split(' ');

			words.forEach((word, index) => {
				if (word.startsWith(value)) {
					result.match = true;
					matches += 1;
					// Give higher relevance to first word matches
					result.relevance = index === 0 ? result.relevance + 10 : result.relevance + 1;
				}
			})

		}

		results.push(result);

		// If there's a match, show it, otherwise, hide it
		if (result.match) {
			item.removeAttribute('hidden');
		} else {
			item.setAttribute('hidden', '');
		}
        
    }

    if (matches > 1) {

		sortList({
			sortType: 'byRelevance',
			presortType: presortType,
			list: list,
			items: results,
		});

    }

	let errorMessage = input.closest('fieldset').querySelector('.error');

	if (errorMessage){
		
		// If there are no positive results, reveal the error message
		if (matches === 0) {
			errorMessage.removeAttribute('hidden');
			list.setAttribute('hidden', '');

		// Otherwise, hide the error message
		} else {
			errorMessage.setAttribute('hidden', '');
			list.removeAttribute('hidden');
		}
	}

}


/**
 * Sorts and reorders list items based on a given type and optional presort.
 *
 * @param {Object} options
 * @param {string} [options.sortType='byTitle'] - Primary sort: 'byTitle', 'byDate', 'byDateNumAsc', 'byDateNumDesc', or 'byRelevance'.
 * @param {string|null} [options.presortType=null] - Optional presort: 'byTag' or 'byTitle'.
 * @param {HTMLElement} options.list - Container holding the list items.
 * @param {Array<Object>} options.items - Items to sort, each with `{ elem, title?, tag?, relevance? }`.
 */
let sortList = ({sortType = 'byTitle', presortType = null, list, items}) => {

	console.log(items);

    if (!list || !items || !Array.isArray(items)) return;

	// Ensure all items have a numeric relevance score
	if (sortType === 'byRelevance'){
		for (let item of items) {
			if (item.relevance === undefined || isNaN(item.relevance)) {
				item.relevance = 0;
			}
		}
	}

    // Optional presort (by tag or title)
    if (presortType === 'byTag') {
        items.sort((a, b) => {
            return (a.tag || '').localeCompare(b.tag || '');
        });
    } else if (presortType === 'byTitle') {
        items.sort((a, b) => {
            return (a.title || '').localeCompare(b.title || '');
        });
    }

    // Primary sort
    items.sort((a, b) => {
        if (sortType === 'byTitle') {
            return (a.title || '').localeCompare(b.title || '');
        }

        if (sortType === 'byDate') {
            let dateA = Date.parse(a.elem?.getAttribute('data-date') || '');
            let dateB = Date.parse(b.elem?.getAttribute('data-date') || '');
            return dateB - dateA;
        }

        if (sortType === 'byDateNumAsc') {
            let numA = Number(a.elem?.getAttribute('data-date'));
            let numB = Number(b.elem?.getAttribute('data-date'));
            return numA - numB;
        }

        if (sortType === 'byDateNumDesc') {
            let numA = Number(a.elem?.getAttribute('data-date'));
            let numB = Number(b.elem?.getAttribute('data-date'));
            return numB - numA;
        }

        if (sortType === 'byRelevance') {
            return b.relevance - a.relevance;
        }

        return 0;
    });

    // Reorder elements in the DOM
    for (let item of items) {
        if (item.elem instanceof HTMLElement) {
            list.appendChild(item.elem);
        }
    }

}

let debounce = (fn, delay = 200) => {
	let timeout;
	return (...args) => {
		clearTimeout(timeout);
		timeout = setTimeout(() => fn(...args), delay);
	};
};

let debouncedFilter = debounce(({input, list}) => {
	filterList({ input: input, list: list});
}, 200);




// TODO: Click <a> tag for same page inside of dialog, closes dialog

// TODO: Catch anchor links with query string ?consideration=1.1.1 and open correct accordion and scroll to that accordion.

//
// INITS
//

let search = (() => {
	let input, list;

	let onInput = (event) => {
		let target = event.target;
		if (target.value.trim().length > 0) {
			debouncedFilter({ input: target, list });
		} else {
			list.setAttribute('hidden', '');
		}
	};

	let init = () => {
		input = document.querySelector('#search-dialog input');
		list = document.querySelector('#search-dialog .search-results');
		if (input) input.addEventListener('input', onInput);
	};

	let destroy = () => {
		if (input) input.removeEventListener('input', onInput);
		input = null;
		list = null;
	};

	return { init, destroy };
})();

search.init();
document.addEventListener('astro:before-swap', search.destroy);
document.addEventListener('astro:after-swap', search.init);

</script>
