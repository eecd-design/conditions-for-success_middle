---

import { ViewTransitions } from "astro:transitions";

import Header from "../components/Header.astro";

import "../styles/normalize.css";
import "../styles/global.css";

const { pageTitle, indicatorTag } = Astro.props;

---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <meta name="generator" content={Astro.generator} />
        <!-- <meta name="color-scheme" content="dark light" /> -->
        <title>{pageTitle}</title>
		<!-- Public Sans Font ~ Google Fonts -->
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,100..900;1,100..900" rel="stylesheet">
		<!-- Aesthet Nova Font ~ Adobe Fonts -->
		<link rel="stylesheet" href="https://use.typekit.net/omy5wmz.css">
        <ViewTransitions />
    </head>
    <body>
		<Header />
		<main data-mode="reading" data-indicator-tag={indicatorTag ? indicatorTag : null}>
        	<slot />
		</main>
		<footer></footer>
    </body>

	<script>

		import { getActiveAssessmentData, subscribe } from "src/stores/userDataStore";
		import { scrollIntoView } from "src/utilities/helpers";
		import { dialogControl } from "src/utilities/dialog";

		let updateTheme = (data) => {

			let theme = data.uiPreferences.theme;
	
			if (theme !== 'dark' && theme !== 'light') return;

			// Get the html root
			let html = document.documentElement;

			// Update the theme
			html.setAttribute('data-theme', theme);

		}

		let updateMode = (data) => {

			let mode = data.uiState.mode;

			if (mode !== 'assessment' && mode !== 'reading') mode = 'reading';

			// Get the main
			let main = document.querySelector('main');

			// Update the mode
			main.setAttribute('data-mode', mode);

		}

		let updateStatus = (data) => {

			let assessment = getActiveAssessmentData();
			if (!assessment) return;

			let status = assessment.status;

			if (status !== 'In Progress' && status !== 'Complete') status = 'In Progress';

			// Get the main
			let main = document.querySelector('main');

			// Update the status
			main.setAttribute('data-status', status.split(" ").join('-').toLowerCase());

		}

		let updateAssessor = (data) => {

			let activeAssessor = data.uiState.activeAssessor;
			
			// Get the main
			let main = document.querySelector('main');

			// Update the assessor
			if (!activeAssessor || activeAssessor === undefined) {
				main.setAttribute('data-assessor', 'false');
			} else {
				main.setAttribute('data-assessor', 'true');
			}

		}

		subscribe(updateTheme);
		subscribe(updateMode);
		subscribe(updateStatus);
		subscribe(updateAssessor);

		let scrollToConsideration = (tag) => {

			let consideration = document.querySelector(`[value="${tag}"]`);

			if (!consideration) return;

			let accordion = consideration.closest('.accordion');
			let accordionBtn = accordion?.querySelector('.heading button') as HTMLButtonElement;

			if (!accordion || !accordionBtn) return;

			if (accordionBtn.getAttribute('aria-expanded') === 'true') return;

			accordionBtn.click();

			setTimeout(() => {
				scrollIntoView(accordion, { behavior: 'smooth' });
			}, 50);

		}

		window.addEventListener('popstate', () => {
  			let hash = window.location.hash;
			if (!hash) return;

			// If link was within a dialog, close it
			let activeDialog = document.querySelector('dialog:open') as HTMLDialogElement;
			if (activeDialog) activeDialog.close();

			if (hash.includes('consideration')) {
				let tag = hash.replace(/^#consideration-/, "").replace(/-/g, ".");
				scrollToConsideration(tag);
			}
		});

		document.addEventListener('astro:page-load', () => {

			let hash = window.location.hash;
			console.log('After Load', hash);

			if (!hash) return;

			if (hash.includes('consideration')) {
				let tag = hash.replace(/^#consideration-/, "").replace(/-/g, ".");
				scrollToConsideration(tag);
			}

		})

		dialogControl.init();
		document.addEventListener('astro:before-swap', dialogControl.destroy);
		document.addEventListener('astro:after-swap', dialogControl.init);

	</script>

</html>
