---
import { ClientRouter } from "astro:transitions";

import Header from "../components/Header.astro";

import "../styles/normalize.css";
import "../styles/global.css";

import { Image } from "astro:assets";
import GNBLogo from "../images/gnb-logo-reverse.png";

const { pageTitle, indicatorTag, pageType } = Astro.props;
---

<!doctype html>
<html lang="en" data-loading>
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width,initial-scale=1" />
		<meta name="generator" content={Astro.generator} />
		<!-- <meta name="color-scheme" content="dark light" /> -->
		<title>{pageTitle}</title>
		<!-- Public Sans Font ~ Google Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,100..900;1,100..900"
			rel="stylesheet"
		/>
		<!-- Aesthet Nova Font ~ Adobe Fonts -->
		<link rel="stylesheet" href="https://use.typekit.net/omy5wmz.css" />
		<ClientRouter />
	</head>
	<body>
		<div
			class="skip-link-container"
			data-theme="red"
			data-background="dark"
		>
			<a href="#main-heading" class="skip-link">Skip to main content</a>
		</div>
		<Header />
		<main
			class:list={[pageType]}
			data-mode="reading"
			data-indicator-tag={indicatorTag ? indicatorTag : null}
		>
			<div class="wrapper">
				<slot />
			</div>
		</main>
		<footer>
			<div class="wrapper">
				<Image src={GNBLogo} alt="Government of New Brunswick Logo" />
				<small
					>Copyright Â© <span id="copyrightYear">2025</span> Government
					of New Brunswick. All Rights Reserved.</small
				>
				<small
					>Continuum Version <span data-field="continuumVersion"
					></span></small
				>
			</div>
		</footer>
	</body><script>
		//
		// Imports
		//

		import {
			getActiveAssessmentData,
			setState,
			subscribe,
		} from "src/stores/userDataStore";
		import { scrollIntoView } from "src/utilities/helpers";
		import { dialogControl } from "src/utilities/dialog";
		import { eventControl } from "src/utilities/event";
		import { search } from "src/utilities/list";

		//
		// DOM Updates
		//

		let updateCopyright = () => {
			let field = document.querySelector("#copyrightYear");
			if (field) field.textContent = String(new Date().getFullYear());
		};
		updateCopyright();

		let updateContinuumVersion = (data: UserData, changes) => {
			let triggerKeys = ["currentContinuumVersion"];
			if (
				!changes.initiating &&
				!(
					changes.uiState &&
					triggerKeys.some((val) => changes.uiState.includes(val))
				)
			)
				return;

			console.log("Updating Continuum Version (footer)");

			let continuumVersion = data.uiState.currentContinuumVersion;

			// 1. Site footer
			let fields = document.querySelectorAll(
				`[data-field="continuumVersion"]`,
			);
			for (let field of fields) {
				field.textContent = continuumVersion;
			}
		};

		let updateTheme = (data: UserData, changes) => {
			let triggerKeys = ["theme"];
			if (
				!changes.initiating &&
				!(
					changes.uiPreferences &&
					triggerKeys.some((val) =>
						changes.uiPreferences.includes(val),
					)
				)
			)
				return;

			let theme = data.uiPreferences.theme;
			if (theme !== "dark" && theme !== "light") return;

			// console.log("Updating Theme (on html)");

			// Get the html root
			let html = document.documentElement;

			// Update the theme
			html.setAttribute("data-theme", theme);
		};

		let updateMode = (data: UserData, changes) => {
			let triggerKeys = ["mode"];
			if (
				!changes.initiating &&
				!(
					changes.uiState &&
					triggerKeys.some((val) => changes.uiState.includes(val))
				)
			)
				return;

			let mode = data.uiState.mode;
			if (mode !== "assessment" && mode !== "reading") mode = "reading";

			// console.log("Updating Mode (on main)");

			// Get the main
			let main = document.querySelector("main");

			// Update the mode
			main.setAttribute("data-mode", mode);
		};

		let updateStatus = (data: UserData, changes) => {
			let stateTriggerKeys = ["activeAssessmentId"];
			let assessmentTriggerKeys = ["status"];
			if (
				!changes.initiating &&
				!(
					(changes.assessments &&
						assessmentTriggerKeys.some((val) =>
							changes.assessments.includes(val),
						)) ||
					(changes.uiState &&
						stateTriggerKeys.some((val) =>
							changes.uiState.includes(val),
						))
				)
			)
				return;

			let assessment = getActiveAssessmentData();
			if (!assessment) return;

			// console.log("Updating Status (on main)");

			let status = assessment.status;
			if (status !== "In Progress" && status !== "Complete")
				status = "In Progress";

			// Get the main
			let main = document.querySelector("main");

			// Update the status
			main.setAttribute(
				"data-status",
				status.split(" ").join("-").toLowerCase(),
			);
		};

		let updateAssessor = (data: UserData, changes) => {
			let stateTriggerKeys = ["activeAssessmentId"];
			let assessmentTriggerKeys = ["activeAssessor"];
			if (
				!changes.initiating &&
				!(
					(changes.assessments &&
						assessmentTriggerKeys.some((val) =>
							changes.assessments.includes(val),
						)) ||
					(changes.uiState &&
						stateTriggerKeys.some((val) =>
							changes.uiState.includes(val),
						))
				)
			)
				return;

			let assessment = getActiveAssessmentData();
			if (!assessment) return;

			// console.log("Updating Assessor (on main)");

			// Get the main
			let main = document.querySelector("main");

			// Update the assessor
			if (
				!assessment.activeAssessor ||
				assessment.activeAssessor === undefined
			) {
				main.setAttribute("data-assessor", "false");
			} else {
				main.setAttribute("data-assessor", "true");
			}
		};

		//
		// Methods
		//

		let scrollToConsideration = (tag) => {
			let consideration = document.querySelector(`[value="${tag}"]`);

			if (!consideration) return;

			let accordion = consideration.closest(".accordion");
			let accordionBtn = accordion?.querySelector(
				".heading button",
			) as HTMLButtonElement;

			if (!accordion || !accordionBtn) return;

			if (accordionBtn.getAttribute("aria-expanded") === "true") return;

			accordionBtn.click();

			setTimeout(() => {
				scrollIntoView(accordion, { behavior: "smooth" });
			}, 50);
		};

		//
		// Inits
		//

		subscribe(updateContinuumVersion);
		subscribe(updateTheme);
		subscribe(updateMode);
		subscribe(updateStatus);
		subscribe(updateAssessor);

		dialogControl.init();
		eventControl.add({
			elem: document,
			eventType: "astro:after-swap",
			fn: dialogControl.init,
		});

		search.init();
		eventControl.add({
			elem: document,
			eventType: "astro:before-swap",
			fn: search.destroy,
		});
		eventControl.add({
			elem: document,
			eventType: "astro:after-swap",
			fn: search.init,
		});

		//
		// Event listeners
		//

		let onPopstate = () => {
			// Handles hash changes on the active page

			let hash = window.location.hash;
			if (!hash) return;

			// If link was within a dialog, close it
			let activeDialog = document.querySelector(
				"dialog:open",
			) as HTMLDialogElement;
			if (activeDialog) dialogControl.close(activeDialog);

			if (hash.includes("consideration")) {
				let tag = hash
					.replace(/^#consideration-/, "")
					.replace(/-/g, ".");
				scrollToConsideration(tag);
			}
		};
		eventControl.add({
			elem: window,
			eventType: "popstate",
			fn: onPopstate,
		});

		let onPageLoad = () => {
			let currentPagePath = window.location.pathname;
			if (currentPagePath !== "/") {
				setState({
					lastVisitedPage: {
						title: document.querySelector("h1").textContent,
						path: window.location.pathname,
					},
				});
			}

			// Handles hash changes on a new page

			let hash = window.location.hash;

			if (hash.includes("consideration")) {
				let tag = hash
					.replace(/^#consideration-/, "")
					.replace(/-/g, ".");
				scrollToConsideration(tag);
			}

			let query = new URLSearchParams(window.location.search);
			let dialog = query.get("dialog");
			if (dialog) {
				let dialogId;
				if (dialog === "create-assessment")
					dialogId = "edit-assessment-properties-dialog";
				dialogControl.open({
					dialogId,
					context: "setup",
				});
			}

			setTimeout(() => {
				document.documentElement.removeAttribute("data-loading");
			}, 1000);
		};
		eventControl.add({
			elem: document,
			eventType: "astro:page-load",
			fn: onPageLoad,
		});

		let onAfterSwap = () => {
			document.documentElement.setAttribute("data-loading", "");
		};
		eventControl.add({
			elem: document,
			eventType: "astro:after-swap",
			fn: onAfterSwap,
		});

		console.log(eventControl._registry);
	</script>
</html>
